[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 852
PlayResY: 480

[Aegisub Project Garbage]
Audio File: ../../New folder/1397755924/FileRecv/MobileFile/0.flv
Video File: ../../New folder/1397755924/FileRecv/MobileFile/0.flv
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.000000
Scroll Position: 266
Active Line: 268
Video Position: 46867

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,等线,25,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:02.62,Default,,0,0,0,,大家好，我是Wenting
Dialogue: 0,0:00:02.62,0:00:07.09,Default,,0,0,0,,我来展示的是我个人的VerilogBoy项目
Dialogue: 0,0:00:07.09,0:00:10.32,Default,,0,0,0,,我猜我大概是这儿最年轻的参展者了
Dialogue: 0,0:00:10.32,0:00:15.36,Default,,0,0,0,,我是Penn State University的本科生
Dialogue: 0,0:00:15.36,0:00:19.87,Default,,0,0,0,,目前在Analog Devices工作
Dialogue: 0,0:00:19.87,0:00:25.30,Default,,0,0,0,,这个项目大概没什么实际用处
Dialogue: 0,0:00:25.30,0:00:29.84,Default,,0,0,0,,不过我设计它的时候还是挺有趣的，所以我也希望你们也能喜欢这次演讲
Dialogue: 0,0:00:29.84,0:00:32.71,Default,,0,0,0,,
Dialogue: 0,0:00:32.71,0:00:39.04,Default,,0,0,0,,因为时间有限，我不会细说GameBoy的具体实现
Dialogue: 0,0:00:39.04,0:00:41.79,Default,,0,0,0,,而是会着重于一些一般性的信息
Dialogue: 0,0:00:44.62,0:00:47.03,Default,,0,0,0,,先总体看看这个项目
Dialogue: 0,0:00:47.03,0:00:52.03,Default,,0,0,0,,这个项目可以分为两部分，一是VerilogBoy Core
Dialogue: 0,0:00:52.03,0:00:54.43,Default,,0,0,0,,二是VerilogBoy掌机
Dialogue: 0,0:00:54.43,0:00:59.04,Default,,0,0,0,,（RTL：寄存器传输级）\NVerilogBoy Core是一个对GameBoy的RTL级实现
Dialogue: 0,0:00:59.04,0:01:03.34,Default,,0,0,0,,主要由CPU，GPU（PPU）和声音发生器模块组成
Dialogue: 0,0:01:03.34,0:01:06.81,Default,,0,0,0,,还有一些其他的支持外设
Dialogue: 0,0:01:06.81,0:01:12.08,Default,,0,0,0,,目前它可以运行许多的GameBoy游戏
Dialogue: 0,0:01:12.08,0:01:15.89,Default,,0,0,0,,像马里奥，塞尔达，还有口袋妖怪
Dialogue: 0,0:01:15.89,0:01:18.98,Default,,0,0,0,,不过这不是说这就是一个完全准确的实现
Dialogue: 0,0:01:18.98,0:01:23.66,Default,,0,0,0,, 我在这里也写了，“CPU是准确的，PPU不是”
Dialogue: 0,0:01:23.66,0:01:27.86,Default,,0,0,0,,它现在可以在PanoLogic G1和VerilogBoy掌机上运行
Dialogue: 0,0:01:27.86,0:01:32.67,Default,,0,0,0,,还有用于调试的基于Verilog Verilator的模拟器
Dialogue: 0,0:01:34.26,0:01:40.13,Default,,0,0,0,,VerilogBoy掌机是一个FPGA掌机
Dialogue: 0,0:01:40.13,0:01:46.19,Default,,0,0,0,,设计可以运行Verilog Core，不过别人也可以刷别的Bitstream进去运行
Dialogue: 0,0:01:46.19,0:01:48.49,Default,,0,0,0,,比如说，可能会是一个Chip Tune Player(? 存疑)
Dialogue: 0,0:01:49.02,0:01:55.60,Default,,0,0,0,, 掌机我一共设计了三版，这个是初版，Bug奇多，也不能用
Dialogue: 0,0:01:55.60,0:01:59.37,Default,,0,0,0,,元件都是我自己手焊的，嗯，不能用
Dialogue: 0,0:01:59.37,0:02:02.60,Default,,0,0,0,,我过一会再说关于设计的一些细节
Dialogue: 0,0:02:03.34,0:02:09.71,Default,,0,0,0,,在此之前，我想先分享一下这个项目的一些故事
Dialogue: 0,0:02:09.71,0:02:14.71,Default,,0,0,0,,我开始这个项目大概在一年多以前，是我的课设
Dialogue: 0,0:02:14.71,0:02:19.42,Default,,0,0,0,,给CMPEN 275 Digitial Design Lab做的课设
Dialogue: 0,0:02:19.42,0:02:23.19,Default,,0,0,0,,我想这应该就是这个课程的最后一个项目了
Dialogue: 0,0:02:23.19,0:02:29.53,Default,,0,0,0,,所以就跑去问我的教授要有什么需求
Dialogue: 0,0:02:29.53,0:02:33.83,Default,,0,0,0,,因为我也知道我要是做些什么大项目，就应该马上开搞
Dialogue: 0,0:02:34.13,0:02:40.80,Default,,0,0,0,,然后教授说只要有我自己设计的数字逻辑就可以了
Dialogue: 0,0:02:40.80,0:02:44.04,Default,,0,0,0,,因为这真的就是一个数电入门课
Dialogue: 0,0:02:44.04,0:02:46.48,Default,,0,0,0,,（笑）
Dialogue: 0,0:02:46.48,0:02:52.13,Default,,0,0,0,,我也见过许多人试图在FPGA上做一些复古游戏平台的实现
Dialogue: 0,0:02:52.13,0:02:54.80,Default,,0,0,0,,（NES：美版红白机）\N特别是非常流行的，NES
Dialogue: 0,0:02:54.80,0:02:59.80,Default,,0,0,0,,觉得做些这样的东西很cool
Dialogue: 0,0:02:59.80,0:03:01.19,Default,,0,0,0,,然后我就选择了GameBoy
Dialogue: 0,0:03:01.86,0:03:07.30,Default,,0,0,0,,当然很多人已经做过同样的事情了
Dialogue: 0,0:03:07.30,0:03:13.51,Default,,0,0,0,,GitHub上，有些说能用，有些最后就弃坑了
Dialogue: 0,0:03:13.51,0:03:17.65,Default,,0,0,0,,那些弃坑的项目就像是对我的警告
Dialogue: 0,0:03:17.65,0:03:24.11,Default,,0,0,0,,因为我知道不应该低估做这些东西耗费的时间
Dialogue: 0,0:03:24.11,0:03:31.32,Default,,0,0,0,,而且这也是我做的第一个FPGA项目，根本没有什么经验
Dialogue: 0,0:03:31.32,0:03:35.34,Default,,0,0,0,,所以我就决定从一些已有的代码开始
Dialogue: 0,0:03:35.34,0:03:38.60,Default,,0,0,0,,我从Fighting Meerkats那里“借”了CPU来用
Dialogue: 0,0:03:38.60,0:03:42.80,Default,,0,0,0,,那个GameBoy实现有问题，但是CPU是好的
Dialogue: 0,0:03:42.80,0:03:46.27,Default,,0,0,0,,所以我就在那个CPU的基础上做了我的GameBoy实现
Dialogue: 0,0:03:46.27,0:03:54.20,Default,,0,0,0,,到课程结束的时候基本上都能用了，我在展示的结尾用它玩了塞尔达
Dialogue: 0,0:03:54.20,0:03:59.59,Default,,0,0,0,,本来应该到这就结束了，不过还有一件事我心里难受
Dialogue: 0,0:03:59.59,0:04:02.72,Default,,0,0,0,,因为CPU是别人那里“借”来的
Dialogue: 0,0:04:02.72,0:04:07.17,Default,,0,0,0,,所以我自己重构了CPU部分，也没设期限，花了很长时间
Dialogue: 0,0:04:07.17,0:04:09.43,Default,,0,0,0,,因为我鸽了，而且……
Dialogue: 0,0:04:09.43,0:04:15.17,Default,,0,0,0,,（笑）至少我自己觉得没有硬件的项目都挺无聊的
Dialogue: 0,0:04:15.17,0:04:19.48,Default,,0,0,0,,所以我也做了配套的硬件（VerilogBoy掌机）
Dialogue: 0,0:04:19.48,0:04:23.78,Default,,0,0,0,,不过后来我在MIPI-DSI屏幕上出了些岔子
Dialogue: 0,0:04:23.78,0:04:27.28,Default,,0,0,0,,然后开始害怕这个坑要填不了了
Dialogue: 0,0:04:27.28,0:04:33.15,Default,,0,0,0,, 所以我就转而用PanoLogic来开发，然而问题更多了（
Dialogue: 0,0:04:33.15,0:04:39.06,Default,,0,0,0,,当然最后我还是把东西都修好了来给大家展示这个
Dialogue: 0,0:04:40.03,0:04:44.13,Default,,0,0,0,,现在我们深入地看看GameBoy的SoC
Dialogue: 0,0:04:44.37,0:04:48.77,Default,,0,0,0,,VerilogBoy Core也用了同样的架构
Dialogue: 0,0:04:48.77,0:04:55.87,Default,,0,0,0,,最初是夏普基于他们给一些单片机用的SM80系列CPU设计的
Dialogue: 0,0:04:55.87,0:05:02.71,Default,,0,0,0,,因为它和Intel 8080和Zilog Z80很相似，有时候也被叫做GB-Z80
Dialogue: 0,0:05:02.92,0:05:06.60,Default,,0,0,0,,在这块SoC上又两个平行的8位总线
Dialogue: 0,0:05:06.60,0:05:10.76,Default,,0,0,0,,（MMIO：存储器映射IO）\N一个是主内存总线，另一个是MMIO总线
Dialogue: 0,0:05:10.76,0:05:13.19,Default,,0,0,0,,后者是CPU独占的
Dialogue: 0,0:05:13.19,0:05:19.80,Default,,0,0,0,,对其他的设备则是CPU、PPU和DMA共享
Dialogue: 0,0:05:19.80,0:05:25.05,Default,,0,0,0,,PPU或者DMA在读取内存的时候CPU是不能读取的
Dialogue: 0,0:05:25.05,0:05:30.88,Default,,0,0,0,,最令人困惑的部分就是 有那么多总线，但是他们的寻址Base都是同一个
Dialogue: 0,0:05:30.88,0:05:36.15,Default,,0,0,0,,所以有时候它对一个外设可用，有时候对另一个外设可用
Dialogue: 0,0:05:36.15,0:05:37.68,Default,,0,0,0,,有点难理解
Dialogue: 0,0:05:37.68,0:05:43.09,Default,,0,0,0,,并且CPU、PPU、PSG都有它们自己各自的内存
Dialogue: 0,0:05:43.69,0:05:47.29,Default,,0,0,0,,所以它们在运行的时候不必一直都占有着总线
Dialogue: 0,0:05:48.03,0:05:54.90,Default,,0,0,0,,那么，再看看CPU，它是一个8位CISC处理器，主频1MHz，十个寄存器
Dialogue: 0,0:05:55.17,0:05:59.37,Default,,0,0,0,,有A（累加器），BCDE四个通用寄存器
Dialogue: 0,0:05:59.37,0:06:03.97,Default,,0,0,0,,H和L组合起来是一个指向内存地址的（16位）指针
Dialogue: 0,0:06:03.97,0:06:07.02,Default,,0,0,0,,还有SP（栈指针）,PC（程序计数器）和F（标志）
Dialogue: 0,0:06:07.02,0:06:10.58,Default,,0,0,0,,指令长度1~3字节不等
Dialogue: 0,0:06:10.58,0:06:16.45,Default,,0,0,0,,通常第一个字节是操作码，二三是8或16位的立即数
Dialogue: 0,0:06:16.45,0:06:21.89,Default,,0,0,0,,（注：GameBoy的操作码0xCB是一些位操作组合的第一个字节）\N如果第一个字节是0xCB，那么第二个字节就也会是一个操作码
Dialogue: 0,0:06:21.89,0:06:26.33,Default,,0,0,0,,两个结合起来一共有511种可能的操作码
Dialogue: 0,0:06:26.33,0:06:30.60,Default,,0,0,0,,里面一共500个可用的操作码
Dialogue: 0,0:06:30.60,0:06:33.17,Default,,0,0,0,,非法的指令会使处理器卡死
Dialogue: 0,0:06:34.27,0:06:41.41,Default,,0,0,0,,我要说一下，这里的操作码指的是指令的第一个字节或者0xCB组合的第二个字节
Dialogue: 0,0:06:41.41,0:06:45.40,Default,,0,0,0,,比如，寄存器转移指令
Dialogue: 0,0:06:45.40,0:06:49.65,Default,,0,0,0,,如果借用MIPS里的概念，叫“R型指令”
Dialogue: 0,0:06:49.65,0:06:53.65,Default,,0,0,0,,里面01是操作码
Dialogue: 0,0:06:53.65,0:06:59.50,Default,,0,0,0,,下面3位是RD（目标寄存器），最后3位是RS（源寄存器）
Dialogue: 0,0:06:59.50,0:07:07.60,Default,,0,0,0,,但是这儿我们不说LD B,D和LD C,E是两个有同样操作码01的指令
Dialogue: 0,0:07:07.60,0:07:15.11,Default,,0,0,0,,而是说这两个指令有不同的操作码0x42和0x4B
Dialogue: 0,0:07:15.85,0:07:21.25,Default,,0,0,0,,因为时间有限，我不会详细地解释指令集
Dialogue: 0,0:07:21.25,0:07:23.05,Default,,0,0,0,,你回去也能上网找
Dialogue: 0,0:07:23.62,0:07:27.46,Default,,0,0,0,,下面说说PPU，像素处理单元
Dialogue: 0,0:07:27.46,0:07:31.20,Default,,0,0,0,,PPU就是渲染图形的，主频4MHz
Dialogue: 0,0:07:31.20,0:07:34.73,Default,,0,0,0,,它至多可以每个时钟周期推出来一个像素（给LCD）
Dialogue: 0,0:07:34.73,0:07:38.77,Default,,0,0,0,,所有绘制的场景都是整齐排列的8x8图像块
Dialogue: 0,0:07:38.77,0:07:41.20,Default,,0,0,0,,有些游戏的块分割比较明显，有些看不出来
Dialogue: 0,0:07:41.20,0:07:46.51,Default,,0,0,0,,显存分三层，背景层，前景层和精灵层
Dialogue: 0,0:07:46.82,0:07:53.39,Default,,0,0,0,,背景层最大256x256像素大
Dialogue: 0,0:07:53.39,0:07:57.11,Default,,0,0,0,,实际显示的区域比它小，可以在背景层上移动
Dialogue: 0,0:07:57.11,0:08:01.16,Default,,0,0,0,,可以通过移动显示区域的方法实现无限卷轴
Dialogue: 0,0:08:01.16,0:08:06.00,Default,,0,0,0,,前景层和背景层工作原理一样，只不过只有显示区域那么大
Dialogue: 0,0:08:07.07,0:08:14.00,Default,,0,0,0,,精灵层就是那些可以运动的东西，比如屏幕上跑的角色
Dialogue: 0,0:08:14.00,0:08:16.34,Default,,0,0,0,,那些就是精灵图
Dialogue: 0,0:08:16.34,0:08:18.68,Default,,0,0,0,,最多可以有40个精灵图
Dialogue: 0,0:08:19.68,0:08:24.75,Default,,0,0,0,,有很多最近在FPGA上尝试实现PPU的人脑子里只有一个问题
Dialogue: 0,0:08:24.75,0:08:27.59,Default,,0,0,0,,“这是怎么做到的”
Dialogue: 0,0:08:27.59,0:08:32.05,Default,,0,0,0,,因为PPU可以每秒推出4M个像素给LCD
Dialogue: 0,0:08:32.05,0:08:36.08,Default,,0,0,0,,但是显存的速度被限制在了2MB/s
Dialogue: 0,0:08:36.08,0:08:46.00,Default,,0,0,0,,算一下，有一层（背景+前景）还有精灵图，一共需要2.5MB/s的带宽
Dialogue: 0,0:08:46.00,0:08:48.57,Default,,0,0,0,,但是显存的速度根本跟不上
Dialogue: 0,0:08:48.57,0:08:53.05,Default,,0,0,0,,我看了别人的代码像FPGABoy里面
Dialogue: 0,0:08:53.05,0:08:58.52,Default,,0,0,0,,那里面PPU和显存都是32MB/s所以就毛事都没有了
Dialogue: 0,0:08:58.52,0:09:05.57,Default,,0,0,0,,在不同的GameBoy的模拟器上他们直接用了双端口的显存和OAM内存
Dialogue: 0,0:09:05.57,0:09:08.26,Default,,0,0,0,,所以就有了很大的带宽
Dialogue: 0,0:09:08.26,0:09:11.36,Default,,0,0,0,,那说到底，任天堂是怎么做到的？
Dialogue: 0,0:09:11.93,0:09:15.10,Default,,0,0,0,,然而现实是任天堂并没有做到
Dialogue: 0,0:09:15.10,0:09:18.17,Default,,0,0,0,,要是发生这种情况，那么图像渲染会被暂停
Dialogue: 0,0:09:18.17,0:09:20.21,Default,,0,0,0,,然后拉取数据，重新开始
Dialogue: 0,0:09:20.21,0:09:21.77,Default,,0,0,0,,（笑）
Dialogue: 0,0:09:21.77,0:09:27.61,Default,,0,0,0,,这个答案听起来挺没劲的，然而这就是逆向时发现的真相
Dialogue: 0,0:09:27.61,0:09:29.91,Default,,0,0,0,,所以我也是这么实现的
Dialogue: 0,0:09:31.15,0:09:33.92,Default,,0,0,0,,最后是可编程声音发生器
Dialogue: 0,0:09:33.92,0:09:37.79,Default,,0,0,0,,GameBoy有四声部的可编程声音发生器
Dialogue: 0,0:09:37.79,0:09:42.23,Default,,0,0,0,,两个方波，一个PCM采样，一个噪波
Dialogue: 0,0:09:42.23,0:09:44.83,Default,,0,0,0,,顾名即可思义
Dialogue: 0,0:09:44.83,0:09:51.64,Default,,0,0,0,,四个声部都可以调整频率、音量，可以自动开关
Dialogue: 0,0:09:51.64,0:09:57.01,Default,,0,0,0,,有些声部也可以自动sweep音量或者频率
Dialogue: 0,0:09:58.98,0:10:02.05,Default,,0,0,0,,下一个话题是Verilog掌机
Dialogue: 0,0:10:02.05,0:10:04.82,Default,,0,0,0,,这是一个钥匙链大小的游戏机
Dialogue: 0,0:10:04.82,0:10:08.25,Default,,0,0,0,,主要设计为运行VerilogBoy Core
Dialogue: 0,0:10:08.25,0:10:13.99,Default,,0,0,0,,并且大概也是个初学者玩FPGA的好平台
Dialogue: 0,0:10:13.99,0:10:19.50,Default,,0,0,0,,（别再把Board读Broad了好吗）\N那么先看看PCB，整体是四层板
Dialogue: 0,0:10:19.50,0:10:23.10,Default,,0,0,0,,最细走线和线距是4/4mil
Dialogue: 0,0:10:23.10,0:10:29.25,Default,,0,0,0,,过孔是机械钻能打的最小的0.2mm直径孔
Dialogue: 0,0:10:29.25,0:10:31.54,Default,,0,0,0,,因为镭射钻会特别贵
Dialogue: 0,0:10:31.54,0:10:39.12,Default,,0,0,0,,右边这里是一个没有画完的V0.3版板子
Dialogue: 0,0:10:39.12,0:10:42.28,Default,,0,0,0,,可以看见这里还是挺密集的
Dialogue: 0,0:10:42.28,0:10:47.39,Default,,0,0,0,,最大的这部分BGA是FPGA的焊盘
Dialogue: 0,0:10:47.39,0:10:51.66,Default,,0,0,0,,旁边是8MB的PSRAM
Dialogue: 0,0:10:51.66,0:10:54.97,Default,,0,0,0,,然后是SPI Flash，上面是PMIC
Dialogue: 0,0:10:54.97,0:11:03.11,Default,,0,0,0,,管理电池充电，检测剩余电量
Dialogue: 0,0:11:03.11,0:11:07.21,Default,,0,0,0,,还供给了3个Buck降压和4个线性降压模块
Dialogue: 0,0:11:07.21,0:11:10.68,Default,,0,0,0,,上面是一个STM32的MCU
Dialogue: 0,0:11:10.68,0:11:14.39,Default,,0,0,0,,它会初始化PMIC
Dialogue: 0,0:11:14.39,0:11:20.59,Default,,0,0,0,,初始化DAC，初始化LCD屏幕，和SD卡通讯
Dialogue: 0,0:11:20.59,0:11:25.60,Default,,0,0,0,,掌控FAT文件系统，控制USB通信
Dialogue: 0,0:11:25.60,0:11:31.90,Default,,0,0,0,,这样你就可以用USB刷Bitstream了，因为你可不会想在FPGA上实现这个
Dialogue: 0,0:11:31.90,0:11:38.14,Default,,0,0,0,,这边这个是DPI-DSI桥接IC
Dialogue: 0,0:11:38.14,0:11:40.75,Default,,0,0,0,,上面是音频DAC
Dialogue: 0,0:11:44.58,0:11:47.00,Default,,0,0,0,,然后就是总体结构了
Dialogue: 0,0:11:47.00,0:11:51.02,Default,,0,0,0,,好多人问我说“为啥做这么小啊”
Dialogue: 0,0:11:51.02,0:11:54.53,Default,,0,0,0,,游戏体验肯定不怎么样
Dialogue: 0,0:11:54.53,0:12:02.07,Default,,0,0,0,,emm  说小掌机为什么更好理由很多
Dialogue: 0,0:12:02.07,0:12:07.61,Default,,0,0,0,,我可以说这样子我可以一天到晚都拿着；不过最大的问题是屏幕
Dialogue: 0,0:12:07.61,0:12:11.31,Default,,0,0,0,,我是被迫把他做这么小的
Dialogue: 0,0:12:11.31,0:12:16.51,Default,,0,0,0,,原版GameBoy屏幕是160x144的
Dialogue: 0,0:12:16.51,0:12:23.62,Default,,0,0,0,,要想让像素完全对齐最好那么屏幕分辨率横纵最好都是原版整数倍
Dialogue: 0,0:12:23.62,0:12:30.20,Default,,0,0,0,,所以会是320x288或者480x436之类的
Dialogue: 0,0:12:30.20,0:12:34.94,Default,,0,0,0,,并不一定要一模一样大，可以稍大一些然后留黑边
Dialogue: 0,0:12:34.94,0:12:42.11,Default,,0,0,0,,但是现在唯一在量产的这样分辨率的屏是智能手表上面的（（
Dialogue: 0,0:12:42.11,0:12:47.25,Default,,0,0,0,,所以，嗯，超级小，这样的1.5英寸屏
Dialogue: 0,0:12:47.25,0:12:51.42,Default,,0,0,0,,所以整台游戏机基本上就是基于屏幕设计的
Dialogue: 0,0:12:52.55,0:12:58.25,Default,,0,0,0,,缺点就是这样的屏只有MIPI-DSI接口，给我搞了很多麻烦
Dialogue: 0,0:12:59.36,0:13:04.68,Default,,0,0,0,,现在的话屏幕是直接由FPGA驱动的
Dialogue: 0,0:13:04.68,0:13:08.00,Default,,0,0,0,,(????)运行在270Mbps下
Dialogue: 0,0:13:08.00,0:13:12.20,Default,,0,0,0,,下一版你们也看见了，我加了桥接IC
Dialogue: 0,0:13:12.20,0:13:20.51,Default,,0,0,0,,原因是我想让对外部设备的接口越简单越好
Dialogue: 0,0:13:20.51,0:13:26.32,Default,,0,0,0,,所以更多人就可以给这个平台编程了
Dialogue: 0,0:13:26.32,0:13:29.35,Default,,0,0,0,,前提是这个东西能量产
Dialogue: 0,0:13:29.35,0:13:34.51,Default,,0,0,0,,直驱MIPI-DSI和这一点相悖，所以……
Dialogue: 0,0:13:34.51,0:13:40.73,Default,,0,0,0,,不过我还是很高兴我在换用桥接IC之前搞完了这部分
Dialogue: 0,0:13:41.43,0:13:46.62,Default,,0,0,0,,目前按键是直接从Sega Dreamcast VMU里面抠的
Dialogue: 0,0:13:46.62,0:13:51.61,Default,,0,0,0,,如果我想量产这个东西我还得进一步研究下
Dialogue: 0,0:13:51.61,0:13:55.68,Default,,0,0,0,,上面IO口有一个USB
Dialogue: 0,0:13:55.68,0:14:00.02,Default,,0,0,0,,一个3.5mm耳机口和一个MicroSD卡槽
Dialogue: 0,0:14:00.02,0:14:04.12,Default,,0,0,0,,（日常黑苹果/GameBoy耳机孔）\N是的，它有耳机口，我也不会瞎搞些什么“创新”
Dialogue: 0,0:14:04.12,0:14:06.12,Default,,0,0,0,,（笑）
Dialogue: 0,0:14:06.12,0:14:11.65,Default,,0,0,0,,右边有一个编码器，控制音量
Dialogue: 0,0:14:11.65,0:14:15.67,Default,,0,0,0,,控制亮度，还是电源键
Dialogue: 0,0:14:15.67,0:14:20.74,Default,,0,0,0,,我本来很希望能搞个独立的电源键，但是空间实在不够
Dialogue: 0,0:14:20.74,0:14:26.01,Default,,0,0,0,,后面是一个可更换电池
Dialogue: 0,0:14:26.01,0:14:29.74,Default,,0,0,0,,（其实最开始是想用BL-5C的）\N现在是计划用诺基亚的BP-6M电池
Dialogue: 0,0:14:30.68,0:14:34.20,Default,,0,0,0,,不清楚有没有什么更好的选择，嘛……
Dialogue: 0,0:14:34.54,0:14:39.36,Default,,0,0,0,,那么，总的来说，掌机还在做
Dialogue: 0,0:14:39.36,0:14:43.80,Default,,0,0,0,,不过现在也大概能运行了，能跑Demo
Dialogue: 0,0:14:43.80,0:14:48.17,Default,,0,0,0,,不过还是有些细节要完善
Dialogue: 0,0:14:48.48,0:14:52.77,Default,,0,0,0,,还有一个我提到的目标是PanoLogic G1
Dialogue: 0,0:14:54.77,0:15:00.25,Default,,0,0,0,,是一个致力于开发基于FPGA瘦客户机的创业公司
Dialogue: 0,0:15:00.25,0:15:05.12,Default,,0,0,0,,小有成功，不过2013年破产了
Dialogue: 0,0:15:05.12,0:15:11.49,Default,,0,0,0,,那些瘦客户机原先是大公司批发的，现在都没有用了
Dialogue: 0,0:15:11.49,0:15:15.29,Default,,0,0,0,,eBay上不到十刀都能买到一个
Dialogue: 0,0:15:15.29,0:15:22.03,Default,,0,0,0,,极低的价格让它变成了Hack和重新利用的诱人平台
Dialogue: 0,0:15:22.73,0:15:30.64,Default,,0,0,0,,具体配置要么是Spartan-3E要么是Spartan-6的FPGA，视代数和版本而定
Dialogue: 0,0:15:30.64,0:15:36.38,Default,,0,0,0,,有一些DDR内存，以太网，音视频输出和一些USB主机端口
Dialogue: 0,0:15:36.38,0:15:38.85,Default,,0,0,0,,我选了G1作为我的目标平台
Dialogue: 0,0:15:39.72,0:15:46.14,Default,,0,0,0,,Cool，听起来运行这类复古游戏平台很合适对吧，是啊
Dialogue: 0,0:15:46.14,0:15:50.80,Default,,0,0,0,,那把它VerilogBoy Core移植到这上面有啥挑战性啊
Dialogue: 0,0:15:50.80,0:15:53.33,Default,,0,0,0,,一是储存，二是输入
Dialogue: 0,0:15:54.00,0:15:58.20,Default,,0,0,0,,我最开始在Virtex5开发板上做VerilogBoy的时候
Dialogue: 0,0:15:58.20,0:16:00.34,Default,,0,0,0,,上面的Block RAM非常大
Dialogue: 0,0:16:00.34,0:16:09.01,Default,,0,0,0,,板载了并行NOR闪存，就可以把内部RAM丢进Block RAM，游戏丢进Flash
Dialogue: 0,0:16:09.01,0:16:14.69,Default,,0,0,0,,还有很多可以让我接任何控制器的GPIO
Dialogue: 0,0:16:14.69,0:16:23.90,Default,,0,0,0,,但是G1上东西就不一样了，上面的SPI闪存大部分被Bitstream占完了，剩下300K
Dialogue: 0,0:16:23.90,0:16:32.94,Default,,0,0,0,,一般的GameBoy游戏ROM都有1~2M大，根本放不下
Dialogue: 0,0:16:34.27,0:16:39.34,Default,,0,0,0,,唯一的解决方案就是外部加载游戏
Dialogue: 0,0:16:39.34,0:16:46.55,Default,,0,0,0,,用以太网或者USB放到板上像DDR这样的通用存储器里
Dialogue: 0,0:16:47.65,0:16:49.89,Default,,0,0,0,,这个问题要解决
Dialogue: 0,0:16:49.89,0:16:58.40,Default,,0,0,0,,还有控制器，这样的商业化产品根本没有GPIO
Dialogue: 0,0:16:58.40,0:17:03.47,Default,,0,0,0,,我就必须要用USB控制器来玩游戏
Dialogue: 0,0:17:03.47,0:17:12.97,Default,,0,0,0,,OK，Pano Logic已经在被逆向了，我应该有充足的代码参考对吧
Dialogue: 0,0:17:12.97,0:17:15.68,Default,,0,0,0,,emm  是，但实际不是
Dialogue: 0,0:17:16.65,0:17:21.02,Default,,0,0,0,,从没有人接触过Pano Logic上的LPDDR
Dialogue: 0,0:17:21.02,0:17:27.31,Default,,0,0,0,,Xilinx MIG是FPGA上现成的DDR内存接口方案
Dialogue: 0,0:17:27.31,0:17:35.60,Default,,0,0,0,,但是…它支持的是16位DDR内存，G1上的是32位的LPDDR内存
Dialogue: 0,0:17:35.60,0:17:41.31,Default,,0,0,0,,这俩玩意MIG都不支持，所以就…而且也没有人接触过G1上的USB
Dialogue: 0,0:17:41.31,0:17:45.28,Default,,0,0,0,,板载USB控制器甚至都不是完全EHCI兼容的
Dialogue: 0,0:17:45.28,0:17:51.55,Default,,0,0,0,,我急需一个能在软件内核运行的的轻量级USB Host Stack
Dialogue: 0,0:17:52.02,0:17:58.60,Default,,0,0,0,,东西都开始变得难缠起来了，不过我设法让MIG支持了LPDDR
Dialogue: 0,0:17:58.60,0:18:02.88,Default,,0,0,0,,写了USB控制器的Host控制器驱动
Dialogue: 0,0:18:02.88,0:18:06.20,Default,,0,0,0,,把UBoot USB Host Stack移植到G1上
Dialogue: 0,0:18:06.20,0:18:10.77,Default,,0,0,0,,还实现了USB HID通用游戏手柄驱动
Dialogue: 0,0:18:10.77,0:18:17.21,Default,,0,0,0,,所有USB相关的东西都运行在FPGA上的一个Pico RISC-V 32核心里
Dialogue: 0,0:18:19.18,0:18:26.65,Default,,0,0,0,,现在都能用了，我能用USB手柄控制游戏，可以从U盘加载游戏了
Dialogue: 0,0:18:28.15,0:18:34.69,Default,,0,0,0,,最后总结，这个就是我最开始要做的东西，那次展示本来就应该全部结束了
Dialogue: 0,0:18:34.99,0:18:38.13,Default,,0,0,0,,这是我最后做了的东西
Dialogue: 0,0:18:38.13,0:18:38.65,Default,,0,0,0,,
Dialogue: 0,0:18:38.65,0:18:44.47,Default,,0,0,0,,考虑到这也是我的学习过程，大概也不算是浪费时间了吧
Dialogue: 0,0:18:44.47,0:18:51.11,Default,,0,0,0,,那么未来的计划我也不太清楚，可行的话要让它完全周期级精确
Dialogue: 0,0:18:51.11,0:18:56.45,Default,,0,0,0,,做一些VerilogBoy掌机的套件然后大家都可以买来玩？
Dialogue: 0,0:18:56.45,0:19:01.60,Default,,0,0,0,,当然问题还是很多，但是还是有很多在做
Dialogue: 0,0:19:01.60,0:19:09.09,Default,,0,0,0,,我也愿意学更多，帮助其他人学习这个东西，感谢大家聆听
Dialogue: 0,0:19:09.80,0:19:15.51,Default,,0,0,0,,看起来我还有个两分多钟？那就放点花絮吧
Dialogue: 0,0:19:15.51,0:19:19.14,Default,,0,0,0,,这是我用Mooneye-GB测试ROM发现的一个Bug
Dialogue: 0,0:19:19.14,0:19:26.38,Default,,0,0,0,,Mooneye-GB是一个GameBoy模拟器，内置了很多测试他们模拟器周期精确度的ROM
Dialogue: 0,0:19:26.38,0:19:29.45,Default,,0,0,0,,其中一个叫ADD SP, e计时测试
Dialogue: 0,0:19:29.45,0:19:40.29,Default,,0,0,0,,它测试的是ADD SP, e指令，SP和一个8位立即数e相加并存回SP
Dialogue: 0,0:19:40.86,0:19:47.87,Default,,0,0,0,,它是一个2字节长的指令，第二个字节就是一个立即数，执行需要4周期
Dialogue: 0,0:19:47.87,0:19:52.37,Default,,0,0,0,,读取立即数e的动作应该在第二个周期时进行
Dialogue: 0,0:19:52.37,0:19:55.01,Default,,0,0,0,,就是测试这个指令的行为
Dialogue: 0,0:19:55.42,0:19:59.17,Default,,0,0,0,,emm，Verilog Core最开始没能通过这个测试
Dialogue: 0,0:19:59.17,0:20:02.21,Default,,0,0,0,,但……我很确定我的实现是对的呀……
Dialogue: 0,0:20:02.21,0:20:06.55,Default,,0,0,0,,然而为啥呢？我很想知道他们是怎么测试的
Dialogue: 0,0:20:06.80,0:20:10.62,Default,,0,0,0,,测试的过程很复杂，但是因为测试实在GameBoy内部进行的
Dialogue: 0,0:20:10.62,0:20:17.88,Default,,0,0,0,,它是没法直接接个逻辑分析仪上去的，只能调用外设进行测试
Dialogue: 0,0:20:17.88,0:20:25.50,Default,,0,0,0,,这里解释下：它会把ADD SP, e指令的第一个字节丢到工作内存的尾部
Dialogue: 0,0:20:25.50,0:20:29.40,Default,,0,0,0,,接下来的第二个字节则在另一块，也就是OAM内存里
Dialogue: 0,0:20:29.40,0:20:32.98,Default,,0,0,0,,然后它会开始进行DMA
Dialogue: 0,0:20:32.98,0:20:38.17,Default,,0,0,0,,那么，DMA会占用那个总线，它对CPU会不可用
Dialogue: 0,0:20:38.17,0:20:43.52,Default,,0,0,0,,在这里它DMA占用了OAM内存的总线，这样CPU就没法读到第二个字节了
Dialogue: 0,0:20:43.85,0:20:51.16,Default,,0,0,0,,CPU在DMA结束前倒数第二个周期开始执行指令
Dialogue: 0,0:20:51.16,0:20:57.07,Default,,0,0,0,,读第二个字节的时候正好就是DMA占用总线最后的一个周期
Dialogue: 0,0:20:57.07,0:21:03.11,Default,,0,0,0,,那么DMA会占着总线，CPU没法读到第二个字节
Dialogue: 0,0:21:03.11,0:21:10.51,Default,,0,0,0,,如果CPU读取到了正确的值，那么就意味着CPU读取的时机不正确
Dialogue: 0,0:21:11.88,0:21:18.02,Default,,0,0,0,,然而……我的ADD SP, e指令没问题，但是其他的都乱套了
Dialogue: 0,0:21:18.02,0:21:27.00,Default,,0,0,0,,DMA开始的早了一个周期，也没有正确地占用总线
Dialogue: 0,0:21:27.00,0:21:31.94,Default,,0,0,0,,我的内存映射也不正确，所以……嗯
Dialogue: 0,0:21:32.44,0:21:35.34,Default,,0,0,0,,那么，就到这里了，还有什么问题吗？
Dialogue: 0,0:21:35.34,0:21:43.81,Default,,0,0,0,,（掌声）
Dialogue: 0,0:21:43.81,0:21:46.80,Default,,0,0,0,,Wenting，真不可思议，这…
Dialogue: 0,0:21:46.80,0:21:48.97,Default,,0,0,0,,…这还是你第一个数电项目
Dialogue: 0,0:21:48.97,0:21:50.82,Default,,0,0,0,,（笑）
Dialogue: 0,0:21:50.82,0:21:52.56,Default,,0,0,0,,太不可思议了
Dialogue: 0,0:21:52.91,0:22:00.51,Default,,0,0,0,,我有一个问题就是，我知道那些模拟器对于芯片的时序要求非常精确对吧
Dialogue: 0,0:22:00.51,0:22:07.97,Default,,0,0,0,,但是你在哪里搞来的GameBoy的信息，像什么CPU、PPU、PSG，资源哪里来的？
Dialogue: 0,0:22:07.97,0:22:14.31,Default,,0,0,0,,emm，其实说起来也是挺神的，GameBoy是1989年发布的
Dialogue: 0,0:22:14.31,0:22:21.05,Default,,0,0,0,,那时候就有很多人在逆向它，到现在依然有人在试图逆向它
Dialogue: 0,0:22:21.05,0:22:24.02,Default,,0,0,0,,它里面还是有很多奥秘的
Dialogue: 0,0:22:24.02,0:22:33.80,Default,,0,0,0,,就像去年，人们发现GameBoy很简单的8位CISC核心有两级流水线
Dialogue: 0,0:22:33.80,0:22:43.51,Default,,0,0,0,,他们直接卡时钟，只在特定时间给CPU呈现数据，然后观察它的行为
Dialogue: 0,0:22:43.51,0:22:49.75,Default,,0,0,0,,就这样一顿操作，然后把自己的结果放到一些Wiki之类的地方上
Dialogue: 0,0:22:49.75,0:22:55.22,Default,,0,0,0,,GitHub上也有，搜一下GameBoy你就能找到一大堆相关的内容
Dialogue: 0,0:22:55.22,0:22:57.49,Default,,0,0,0,,（OK，很好，还有谁）
Dialogue: 0,0:23:00.62,0:23:02.76,Default,,0,0,0,,机子里面有电池嘛？
Dialogue: 0,0:23:03.53,0:23:06.26,Default,,0,0,0,,嗯？   ——机子里面有电池吗？
Dialogue: 0,0:23:06.26,0:23:09.60,Default,,0,0,0,,现在里面还暂时没装   ——好的
Dialogue: 0,0:23:09.60,0:23:09.91,Default,,0,0,0,,嗯
Dialogue: 0,0:23:09.91,0:23:11.77,Default,,0,0,0,,里面有一个音频Codec
Dialogue: 0,0:23:11.77,0:23:18.78,Default,,0,0,0,,你需要它是不是就可以从FPGA做PWM或者Σ-Δ了？
Dialogue: 0,0:23:18.78,0:23:24.20,Default,,0,0,0,,嗯，emm……我觉得……我没…
Dialogue: 0,0:23:24.20,0:23:25.22,Default,,0,0,0,,这玩意不便宜
Dialogue: 0,0:23:25.22,0:23:30.51,Default,,0,0,0,,嗯，是不便宜，不过我看那还有点地方我就放了一个
Dialogue: 0,0:23:30.51,0:23:36.62,Default,,0,0,0,,（笑）其实……也没啥的理由
Dialogue: 0,0:23:36.62,0:23:42.27,Default,,0,0,0,,那MCU就是只管加载代码那些活吧？
Dialogue: 0,0:23:42.27,0:23:43.70,Default,,0,0,0,,对，基本上是
Dialogue: 0,0:23:44.54,0:23:50.11,Default,,0,0,0,,因为我想让实现RTL的过程更简单些；如果有任何人…
Dialogue: 0,0:23:50.11,0:23:57.40,Default,,0,0,0,,…如果有任何人想给这个平台写RTL实现，起始的代码就应该越少越好
Dialogue: 0,0:23:57.40,0:24:03.35,Default,,0,0,0,,他们应该只需要写核心部分的逻辑，剩下的就“神奇地”已有了
Dialogue: 0,0:24:03.35,0:24:05.72,Default,,0,0,0,,那个“神奇的”事情就是MCU做的
Dialogue: 0,0:24:06.82,0:24:07.62,Default,,0,0,0,,很好
Dialogue: 0,0:24:14.77,0:24:20.24,Default,,0,0,0,,你提到开展这个项目是为了课程对吧
Dialogue: 0,0:24:20.24,0:24:21.14,Default,,0,0,0,,对
Dialogue: 0,0:24:21.14,0:24:22.51,Default,,0,0,0,,成绩怎么样？
Dialogue: 0,0:24:22.51,0:24:24.40,Default,,0,0,0,,（真实）
Dialogue: 0,0:24:24.40,0:24:30.20,Default,,0,0,0,,对，我的教授完全被这个项目震惊了
Dialogue: 0,0:24:30.20,0:24:32.22,Default,,0,0,0,,以前根本没人干过这种事情
Dialogue: 0,0:24:32.22,0:24:36.68,Default,,0,0,0,,这……这东西就是大二课程罢了
Dialogue: 0,0:24:36.68,0:24:40.22,Default,,0,0,0,,本来就是数电入门课程
Dialogue: 0,0:24:40.22,0:24:44.40,Default,,0,0,0,,别人搞的基本就是闪LED什么的
Dialogue: 0,0:24:44.40,0:24:46.20,Default,,0,0,0,,（Z佬tql）
Dialogue: 0,0:24:46.20,0:24:48.90,Default,,0,0,0,,就是那样……我理所当然得了A
Dialogue: 0,0:25:00.95,0:25:02.45,Default,,0,0,0,,你最喜欢哪款GameBoy游戏？
Dialogue: 0,0:25:03.01,0:25:06.55,Default,,0,0,0,,emm 个人来说的话，是口袋妖怪
Dialogue: 0,0:25:06.85,0:25:09.69,Default,,0,0,0,,我打穿过好多次了
Dialogue: 0,0:25:09.82,0:25:15.39,Default,,0,0,0,,实际上我买的一些后期的机器像NDS 3DS之类的
Dialogue: 0,0:25:15.39,0:25:20.97,Default,,0,0,0,,就是为了玩口袋妖怪，别的游戏基本不怎么玩
Dialogue: 0,0:25:23.90,0:25:31.84,Default,,0,0,0,,而且，我还有一个原因就是我打那些卡操作的游戏也不怎么样
Dialogue: 0,0:25:32.21,0:25:35.18,Default,,0,0,0,,所以我倾向于RPG
Dialogue: 0,0:25:36.78,0:25:42.05,Default,,0,0,0,,我希望你再有一次数电课程，然后你就可以做N64这种东西了
Dialogue: 0,0:25:42.05,0:25:43.85,Default,,0,0,0,,（xswl）
Dialogue: 0,0:25:43.85,0:25:45.76,Default,,0,0,0,,下一年怎么样，快去筹备
Dialogue: 0,0:25:45.94,0:25:48.11,Default,,0,0,0,,好的，Wenting的展示要结束了，谢谢
Dialogue: 0,0:25:54.68,0:25:57.31,Default,,0,0,0,,（瞄）
Dialogue: 0,0:25:57.70,0:25:59.70,Default,,0,0,0,,（听译字幕由@RigoLigo提供）
