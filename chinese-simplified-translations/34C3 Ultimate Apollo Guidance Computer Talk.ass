[Script Info]
; Script generated by Aegisub 3.4.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: ../../../../../Downloads/34c3-9064-eng-fra-deu-The_Ultimate_Apollo_Guidance_Computer_Talk_hd.mp4
Video File: ../../../../../Downloads/34c3-9064-eng-fra-deu-The_Ultimate_Apollo_Guidance_Computer_Talk_hd.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 1.375000
Scroll Position: 2041
Active Line: 2044
Video Position: 86759

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,37,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,4,0,2,30,30,30,1
Style: Default - CN,PingFang SC,70,&H00FFFFFF,&H000000FF,&H00654731,&H00000000,-1,0,0,0,100,100,0,0,1,4,2,2,10,10,10,1
Style: Top Comments,PingFang SC,65,&H00FFFFFF,&H000000FF,&H00654731,&H00000000,-1,0,0,0,100,100,0,0,1,4,2,8,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:14.60,Default,,0,0,0,,{\b1}*34C3 preroll music*{\b}
Dialogue: 0,0:00:14.60,0:00:22.68,Default,,0,0,0,,{\b1}Herald: The following talk is about a very relevant piece of technological legacy of our human race.{\b}
Dialogue: 0,0:00:22.68,0:00:30.56,Default,,0,0,0,,{\b1}The first piece of computer that landed on our moon and actually it became a metric.{\b}
Dialogue: 0,0:00:30.56,0:00:34.80,Default,,0,0,0,,{\b1}People started to compare other architectures, other computers{\b}
Dialogue: 0,0:00:34.80,0:00:40.08,Default,,0,0,0,,{\b1}in volumes of multiples of processing speed of this computer.{\b}
Dialogue: 0,0:00:40.08,0:00:44.48,Default,,0,0,0,,{\b1}It's rocket science, but it's even harder: it's computer rocket science.{\b}
Dialogue: 0,0:00:44.48,0:00:50.92,Default,,0,0,0,,{\b1}So I'm very happy to have Christian Hessmann, or Hessie, on stage who is actually a rocket scientist.{\b}
Dialogue: 0,0:00:50.92,0:00:55.68,Default,,0,0,0,,{\b1}And for the ... *laughter* ... for the computer part we have Michael Steil{\b}
Dialogue: 0,0:00:55.68,0:01:01.40,Default,,0,0,0,,{\b1}who is the founder of the Xbox Linux project and has gathered with this project and many others{\b}
Dialogue: 0,0:01:01.40,0:01:05.40,Default,,0,0,0,,{\b1}lots and lots of experience around architectures of computers.{\b}
Dialogue: 0,0:01:05.40,0:01:09.56,Default,,0,0,0,,{\b1}So please give a warm round of applause for the Ultimate Apollo Guidance talk!{\b}
Dialogue: 0,0:01:09.56,0:01:18.04,Default,,0,0,0,,{\b1}*applause*{\b}
Dialogue: 0,0:01:18.04,0:01:22.64,Default,,0,0,0,,{\b1}Michael Steil: Welcome! Is this on? Can you all hear me? Yes.{\b}
Dialogue: 0,0:01:22.64,0:01:25.92,Default,,0,0,0,,{\b1}Welcome to the Ultimate Apollo Guidance Computer Talk,{\b}
Dialogue: 0,0:01:25.92,0:01:29.68,Default,,0,0,0,,{\b1}a.k.a. a comprehensive introduction into computer architecture.{\b}
Dialogue: 0,0:01:29.68,0:01:31.24,Default,,0,0,0,,{\b1}And operating systems.{\b}
Dialogue: 0,0:01:31.24,0:01:34.20,Default,,0,0,0,,{\b1}And spaceflight. *laughter*{\b}
Dialogue: 0,0:01:34.20,0:01:35.40,Default,,0,0,0,,{\b1}My name is Michael Steil ...{\b}
Dialogue: 0,0:01:35.40,0:01:36.68,Default,,0,0,0,,{\b1}Christian: ... and I'm Christian Hessmann.{\b}
Dialogue: 0,0:01:37.80,0:01:40.72,Default,,0,0,0,,{\b1}Michael: This talk is number six in a series by various people.{\b}
Dialogue: 0,0:01:40.72,0:01:45.56,Default,,0,0,0,,{\b1}The idea is to explain as much as possible about a classic computer system in 60 minutes.{\b}
Dialogue: 0,0:01:45.56,0:01:50.24,Default,,0,0,0,,{\b1}The Apollo Guidance Computer AGC is a digital computer that was designed from scratch{\b}
Dialogue: 0,0:01:50.24,0:01:52.84,Default,,0,0,0,,{\b1}specifically for use on board of the Apollo spacecraft{\b}
Dialogue: 0,0:01:53.16,0:01:57.36,Default,,0,0,0,,{\b1}to support the Apollo moon landings between 1969 and 1972.{\b}
Dialogue: 0,0:01:57.36,0:02:00.40,Default,,0,0,0,,{\b1}Developed at MIT between 1961 and 1966{\b}
Dialogue: 0,0:02:00.40,0:02:04.68,Default,,0,0,0,,{\b1}a total of 42 AGCs were built at a cost of about $200,000 each.{\b}
Dialogue: 0,0:02:04.68,0:02:08.48,Default,,0,0,0,,{\b1}The base clock is about one megahertz, all data is 15 bits,{\b}
Dialogue: 0,0:02:08.48,0:02:12.48,Default,,0,0,0,,{\b1}and there are two kilowords of RAM and 36 kiloword ROM, words of ROM.{\b}
Dialogue: 0,0:02:12.48,0:02:18.20,Default,,0,0,0,,{\b1}It's about the size of a large suitcase, weighs 32 kilograms and consumes about 55 watts.{\b}
Dialogue: 0,0:02:18.20,0:02:22.12,Default,,0,0,0,,{\b1}Its user interface is a numeric display and keyboard.{\b}
Dialogue: 0,0:02:22.12,0:02:27.08,Default,,0,0,0,,{\b1}Some historical context: In the mid 1960s you couldn't just take{\b}
Dialogue: 0,0:02:27.08,0:02:29.60,Default,,0,0,0,,{\b1}an off-the-shelf computer and put it into a spacecraft.{\b}
Dialogue: 0,0:02:29.60,0:02:31.76,Default,,0,0,0,,{\b1}The first mini computers were the size of a small fridge -{\b}
Dialogue: 0,0:02:31.76,0:02:36.92,Default,,0,0,0,,{\b1}too heavy, to power-hungry and too slow for real-time scientific calculations,{\b}
Dialogue: 0,0:02:36.92,0:02:40.04,Default,,0,0,0,,{\b1}even though the industry had come a long way since the previous decade.{\b}
Dialogue: 0,0:02:40.04,0:02:43.84,Default,,0,0,0,,{\b1}Already 10 years later though, microcomputers with highly integrated circuits{\b}
Dialogue: 0,0:02:43.84,0:02:46.84,Default,,0,0,0,,{\b1}started outclassing the AGC Hardware in many regards.{\b}
Dialogue: 0,0:02:46.84,0:02:49.96,Default,,0,0,0,,{\b1}There are many reasons that make the AGC especially interesting:{\b}
Dialogue: 0,0:02:51.40,0:02:55.64,Default,,0,0,0,,{\b1}The architecture is very 60s and feels very alien to us today,{\b}
Dialogue: 0,0:02:55.64,0:02:58.04,Default,,0,0,0,,{\b1}the hardware is very innovative for its time.{\b}
Dialogue: 0,0:02:58.04,0:03:01.56,Default,,0,0,0,,{\b1}It has some very interesting and unusual peripherals.{\b}
Dialogue: 0,0:03:01.56,0:03:04.76,Default,,0,0,0,,{\b1}Its operating system was revolutionary for its time and{\b}
Dialogue: 0,0:03:04.76,0:03:07.88,Default,,0,0,0,,{\b1}the mission software has all the bits to - with the right hardware attached -{\b}
Dialogue: 0,0:03:07.88,0:03:09.40,Default,,0,0,0,,{\b1}fly you to the moon.{\b}
Dialogue: 0,0:03:10.72,0:03:11.92,Default,,0,0,0,,{\b1}C: In the Apollo program,{\b}
Dialogue: 0,0:03:11.92,0:03:14.96,Default,,0,0,0,,{\b1}the Apollo guidance computer was used in two unmanned test missions,{\b}
Dialogue: 0,0:03:14.96,0:03:16.68,Default,,0,0,0,,{\b1}where it was remote control from the ground,{\b}
Dialogue: 0,0:03:16.68,0:03:21.04,Default,,0,0,0,,{\b1}and three manned test missions, and in the seven manned landing missions.{\b}
Dialogue: 0,0:03:21.04,0:03:24.52,Default,,0,0,0,,{\b1}Astronauts hated the idea of giving up any control to a computer,{\b}
Dialogue: 0,0:03:24.52,0:03:26.04,Default,,0,0,0,,{\b1}they wanted to be in charge. {\b}
Dialogue: 0,0:03:26.04,0:03:29.16,Default,,0,0,0,,{\b1}And while as a fallback, most of the mission could also be flown manually,{\b}
Dialogue: 0,0:03:29.16,0:03:30.92,Default,,0,0,0,,{\b1}the mission planners got their way.{\b}
Dialogue: 0,0:03:30.92,0:03:34.08,Default,,0,0,0,,{\b1}To understand the purpose and the responsibilities of the Apollo Guidance Computer,{\b}
Dialogue: 0,0:03:34.08,0:03:36.08,Default,,0,0,0,,{\b1}we need to first look at the Apollo mission.{\b}
Dialogue: 0,0:03:36.08,0:03:38.20,Default,,0,0,0,,{\b1}The core strategy of the Apollo program was,{\b}
Dialogue: 0,0:03:38.20,0:03:40.72,Default,,0,0,0,,{\b1}instead of landing the complete spacecraft on the moon,{\b}
Dialogue: 0,0:03:40.72,0:03:43.44,Default,,0,0,0,,{\b1}for which an extremely large rocket would have been required,{\b}
Dialogue: 0,0:03:43.44,0:03:45.24,Default,,0,0,0,,{\b1}to only land a much smaller lander{\b}
Dialogue: 0,0:03:45.24,0:03:48.76,Default,,0,0,0,,{\b1}while the larger part with the fuel for the way back stays in orbit.{\b}
Dialogue: 0,0:03:48.76,0:03:51.88,Default,,0,0,0,,{\b1}So the Apollo spacecraft can be separated into the lunar module,{\b}
Dialogue: 0,0:03:51.88,0:03:54.12,Default,,0,0,0,,{\b1}the command module and the service module.{\b}
Dialogue: 0,0:03:54.12,0:03:59.12,Default,,0,0,0,,{\b1}The Saturn 5 rocket launches it and three astronauts from Cape Kennedy into Earth orbit.{\b}
Dialogue: 0,0:03:59.12,0:04:02.96,Default,,0,0,0,,{\b1}By accelerating at the right time the translunar injection moves the spacecraft{\b}
Dialogue: 0,0:04:02.96,0:04:05.68,Default,,0,0,0,,{\b1}into a so-called free return orbit,{\b}
Dialogue: 0,0:04:05.68,0:04:09.04,Default,,0,0,0,,{\b1}but just coasting it would travel around the moon and back to earth.{\b}
Dialogue: 0,0:04:09.04,0:04:10.96,Default,,0,0,0,,{\b1}Right at the beginning of this three-day journey{\b}
Dialogue: 0,0:04:10.96,0:04:15.20,Default,,0,0,0,,{\b1}the command and service module extracts the lunar module and docks with it.{\b}
Dialogue: 0,0:04:15.20,0:04:19.04,Default,,0,0,0,,{\b1}By braking on the far side of the moon the spacecraft enters a lunar orbit.{\b}
Dialogue: 0,0:04:19.04,0:04:23.00,Default,,0,0,0,,{\b1}After two of the astronauts have climbed into the lunar module,{\b}
Dialogue: 0,0:04:23.00,0:04:25.80,Default,,0,0,0,,{\b1}and after undocking, the lunar module breaks -{\b}
Dialogue: 0,0:04:25.80,0:04:31.20,Default,,0,0,0,,{\b1}this is called powered descent -{\b}
Dialogue: 0,0:04:31.20,0:04:32.84,Default,,0,0,0,,{\b1}and lands.{\b}
Dialogue: 0,0:04:32.84,0:04:36.24,Default,,0,0,0,,{\b1}*Applause*{\b}
Dialogue: 0,0:04:36.24,0:04:40.24,Default,,0,0,0,,{\b1}After taking off again, the lunar module rendezvous with the command and service module{\b}
Dialogue: 0,0:04:40.24,0:04:43.24,Default,,0,0,0,,{\b1}and the two astronauts from the lunar module climb into the command module{\b}
Dialogue: 0,0:04:43.24,0:04:45.56,Default,,0,0,0,,{\b1}and the lunar module is jettisoned.{\b}
Dialogue: 0,0:04:45.56,0:04:48.72,Default,,0,0,0,,{\b1}The remaining command and service module accelerates at the far side of the Moon{\b}
Dialogue: 0,0:04:48.72,0:04:50.52,Default,,0,0,0,,{\b1}for trajectory towards Earth.{\b}
Dialogue: 0,0:04:50.52,0:04:52.92,Default,,0,0,0,,{\b1}For entry, only the command module remains.{\b}
Dialogue: 0,0:04:52.92,0:04:55.16,Default,,0,0,0,,{\b1}By the way, these excellent visualizations{\b}
Dialogue: 0,0:04:55.16,0:04:58.16,Default,,0,0,0,,{\b1}are from Jared Owen's "How the Apollo spacecraft works" videos,{\b}
Dialogue: 0,0:04:58.16,0:05:00.96,Default,,0,0,0,,{\b1}which we can highly recommend.{\b}
Dialogue: 0,0:05:00.96,0:05:05.08,Default,,0,0,0,,{\b1}The command and service module and the lunar module each contained one a AGC.{\b}
Dialogue: 0,0:05:05.08,0:05:08.32,Default,,0,0,0,,{\b1}It was the same hardware, but attached to partially different I/O devices,{\b}
Dialogue: 0,0:05:08.32,0:05:11.04,Default,,0,0,0,,{\b1}and with the software adapted for the specific spacecraft.{\b}
Dialogue: 0,0:05:11.04,0:05:14.96,Default,,0,0,0,,{\b1}The astronauts interact with them through the display and keyboard units,{\b}
Dialogue: 0,0:05:14.96,0:05:18.88,Default,,0,0,0,,{\b1}which are mounted alongside these hundreds of switches.{\b}
Dialogue: 0,0:05:18.88,0:05:23.80,Default,,0,0,0,,{\b1}The computer's responsibilities during the mission are to track the position and speed,{\b}
Dialogue: 0,0:05:23.80,0:05:26.20,Default,,0,0,0,,{\b1}the so called state vector of both spacecraft,{\b}
Dialogue: 0,0:05:26.20,0:05:30.04,Default,,0,0,0,,{\b1}stabilize the spacecraft's attitude, calculate the control engine burns{\b}
Dialogue: 0,0:05:30.04,0:05:34.72,Default,,0,0,0,,{\b1}and monitor or control the Saturn V during launch.{\b}
Dialogue: 0,0:05:36.80,0:05:40.28,Default,,0,0,0,,{\b1}M: In order to understand how the Apollo guidance computer does all this,{\b}
Dialogue: 0,0:05:40.28,0:05:43.52,Default,,0,0,0,,{\b1}we'll look at its architecture, the hardware implementation,{\b}
Dialogue: 0,0:05:43.52,0:05:46.52,Default,,0,0,0,,{\b1}some of its interesting peripherals, the system software{\b}
Dialogue: 0,0:05:46.52,0:05:50.32,Default,,0,0,0,,{\b1}as well as ... the system software as well as the mission software.{\b}
Dialogue: 0,0:05:51.88,0:05:56.20,Default,,0,0,0,,{\b1}The architecture of the AGC can be described as a Von Neumann accumulator machine{\b}
Dialogue: 0,0:05:56.20,0:05:59.36,Default,,0,0,0,,{\b1}with 15 bit one's complement big-endian arithmetic.{\b}
Dialogue: 0,0:05:59.36,0:06:00.96,Default,,0,0,0,,{\b1}So we'll talk about the instruction set,{\b}
Dialogue: 0,0:06:00.96,0:06:04.32,Default,,0,0,0,,{\b1}the arithmetic model and instruction encoding as well as the memory model,{\b}
Dialogue: 0,0:06:04.32,0:06:07.48,Default,,0,0,0,,{\b1}I/O operations and counters, and finally the interrupt model.{\b}
Dialogue: 0,0:06:08.36,0:06:10.76,Default,,0,0,0,,{\b1}Machine code instruction sets vary widely.{\b}
Dialogue: 0,0:06:10.76,0:06:12.40,Default,,0,0,0,,{\b1}The instruction set of a modern ARM processor,{\b}
Dialogue: 0,0:06:12.40,0:06:16.24,Default,,0,0,0,,{\b1}which is mainly optimized for runtime performance consists of about 400 instructions.{\b}
Dialogue: 0,0:06:16.24,0:06:18.72,Default,,0,0,0,,{\b1}Subleq is a language mostly of academic interest,{\b}
Dialogue: 0,0:06:18.72,0:06:20.04,Default,,0,0,0,,{\b1}that shows that a single instruction{\b}
Dialogue: 0,0:06:20.04,0:06:24.00,Default,,0,0,0,,{\b1}can be enough to solve the same problems as all other turing-complete languages.{\b}
Dialogue: 0,0:06:24.00,0:06:27.56,Default,,0,0,0,,{\b1}While a more complex constructions, that can achieve higher code density{\b}
Dialogue: 0,0:06:27.56,0:06:29.56,Default,,0,0,0,,{\b1}and contribute to higher performance,{\b}
Dialogue: 0,0:06:29.56,0:06:33.24,Default,,0,0,0,,{\b1}it also generally means that the CPU will be drastically more complex.{\b}
Dialogue: 0,0:06:33.24,0:06:37.48,Default,,0,0,0,,{\b1}A computer from the early 1960s consisted of only a few thousand transistors{\b}
Dialogue: 0,0:06:37.48,0:06:38.88,Default,,0,0,0,,{\b1}as opposed to today's billions,{\b}
Dialogue: 0,0:06:38.88,0:06:41.76,Default,,0,0,0,,{\b1}which is why this is the sweet spot for the AGC.{\b}
Dialogue: 0,0:06:41.76,0:06:46.04,Default,,0,0,0,,{\b1}36 instructions provided just about the performance that was required for the mission.{\b}
Dialogue: 0,0:06:46.04,0:06:49.44,Default,,0,0,0,,{\b1}These are the 36 instructions: some load and store instructions,{\b}
Dialogue: 0,0:06:49.44,0:06:52.24,Default,,0,0,0,,{\b1}arithmetic and logic, control flow instructions,{\b}
Dialogue: 0,0:06:52.24,0:06:56.12,Default,,0,0,0,,{\b1}I/O instructions and instructions for dealing with interrupts.{\b}
Dialogue: 0,0:06:56.12,0:06:59.04,Default,,0,0,0,,{\b1}The memory model is the cornerstone of the instruction set.{\b}
Dialogue: 0,0:06:59.04,0:07:04.56,Default,,0,0,0,,{\b1}Memory consists of 4096 cells, numbered in hexadecimal 000 through FFF.{\b}
Dialogue: 0,0:07:04.56,0:07:09.28,Default,,0,0,0,,{\b1}Each cell contains a 15 bit word, numbered between 0 and 7FFF.{\b}
Dialogue: 0,0:07:09.28,0:07:13.64,Default,,0,0,0,,{\b1}Almost all changes in data - in memory go through a 15 bit accumulator,{\b}
Dialogue: 0,0:07:13.64,0:07:14.96,Default,,0,0,0,,{\b1}I also called it A register.{\b}
Dialogue: 0,0:07:14.96,0:07:17.92,Default,,0,0,0,,{\b1}A program can copy words between the accumulator and a memory cell,{\b}
Dialogue: 0,0:07:17.92,0:07:22.04,Default,,0,0,0,,{\b1}but also add, subtract, multiply and divide values, as they are moved around.{\b}
Dialogue: 0,0:07:22.04,0:07:25.44,Default,,0,0,0,,{\b1}The data in memory can have many meanings, depending on how it is interpreted.{\b}
Dialogue: 0,0:07:25.44,0:07:27.28,Default,,0,0,0,,{\b1}These values may represent integers,{\b}
Dialogue: 0,0:07:27.28,0:07:30.36,Default,,0,0,0,,{\b1}while those three words are meant to be decoded as machine code instructions.{\b}
Dialogue: 0,0:07:30.36,0:07:34.56,Default,,0,0,0,,{\b1}Code and data in a single address space make the AGC a so-called Von Neumann machine.{\b}
Dialogue: 0,0:07:34.56,0:07:39.48,Default,,0,0,0,,{\b1}The CPU's program counter PC always holds the address of the instruction to be executed next.{\b}
Dialogue: 0,0:07:39.48,0:07:44.12,Default,,0,0,0,,{\b1}The 'load' instruction copies the contents of a given memory cell into the accumulator.{\b}
Dialogue: 0,0:07:44.12,0:07:46.20,Default,,0,0,0,,{\b1}The PC goes on to the next instruction.{\b}
Dialogue: 0,0:07:46.20,0:07:49.92,Default,,0,0,0,,{\b1}The 'add' instruction adds contents of a given memory cell to the accumulator,{\b}
Dialogue: 0,0:07:49.92,0:07:54.64,Default,,0,0,0,,{\b1}and the 'store' instruction copies the value in the accumulator into memory at a given location.{\b}
Dialogue: 0,0:07:54.64,0:07:57.20,Default,,0,0,0,,{\b1}The generalized version of these instructions we just saw,{\b}
Dialogue: 0,0:07:57.20,0:08:00.64,Default,,0,0,0,,{\b1}use K as a placeholder for a memory address as an argument.{\b}
Dialogue: 0,0:08:00.64,0:08:04.84,Default,,0,0,0,,{\b1}These are cards that are quick reference of instructions.{\b}
Dialogue: 0,0:08:04.84,0:08:07.56,Default,,0,0,0,,{\b1}This is the generic syntax of the instruction,{\b}
Dialogue: 0,0:08:07.56,0:08:10.52,Default,,0,0,0,,{\b1}a short description, the exact operations in pseudocode -{\b}
Dialogue: 0,0:08:10.52,0:08:14.12,Default,,0,0,0,,{\b1}this one takes a memory address k and adds it to a, the accumulator -{\b}
Dialogue: 0,0:08:14.12,0:08:18.04,Default,,0,0,0,,{\b1}the encoding of the instruction in memory, and the number of clock cycles.{\b}
Dialogue: 0,0:08:18.04,0:08:21.40,Default,,0,0,0,,{\b1}The original syntax is the name the original designers gave to the instruction.{\b}
Dialogue: 0,0:08:21.40,0:08:25.16,Default,,0,0,0,,{\b1}For this talk I have chosen a more modern syntax, here on the right,{\b}
Dialogue: 0,0:08:25.16,0:08:28.60,Default,,0,0,0,,{\b1}which makes it much more easier, much easier to describe the CPU{\b}
Dialogue: 0,0:08:28.60,0:08:31.84,Default,,0,0,0,,{\b1}both to people with and without a background in machine programming.{\b}
Dialogue: 0,0:08:31.84,0:08:34.16,Default,,0,0,0,,{\b1}Let's have a look at the instruction set in detail.{\b}
Dialogue: 0,0:08:34.16,0:08:35.92,Default,,0,0,0,,{\b1}Here's an example of the load instruction.{\b}
Dialogue: 0,0:08:35.92,0:08:38.16,Default,,0,0,0,,{\b1}Load a comma indirect two zero zero.{\b}
Dialogue: 0,0:08:38.16,0:08:41.32,Default,,0,0,0,,{\b1}On the left you see the set of registers of the AGC.{\b}
Dialogue: 0,0:08:41.32,0:08:43.16,Default,,0,0,0,,{\b1}Most operations work with the accumulator,{\b}
Dialogue: 0,0:08:43.16,0:08:45.40,Default,,0,0,0,,{\b1}so we will be ignoring the other registers for now.{\b}
Dialogue: 0,0:08:45.40,0:08:49.56,Default,,0,0,0,,{\b1}While executing this instruction, the CPU looks at memory at location two zero zero,{\b}
Dialogue: 0,0:08:49.56,0:08:52.16,Default,,0,0,0,,{\b1}reads its contents and copies it into the accumulator.{\b}
Dialogue: 0,0:08:52.16,0:08:57.08,Default,,0,0,0,,{\b1}This is the store instruction "store", a load indirect two zero zero comma A.{\b}
Dialogue: 0,0:08:57.08,0:09:00.24,Default,,0,0,0,,{\b1}Like with all instructions the first argument is the destination - memory -{\b}
Dialogue: 0,0:09:00.24,0:09:02.24,Default,,0,0,0,,{\b1}the second one the source - the accumulator.{\b}
Dialogue: 0,0:09:02.24,0:09:04.44,Default,,0,0,0,,{\b1}It looks up address two zero zero in memory{\b}
Dialogue: 0,0:09:04.44,0:09:07.76,Default,,0,0,0,,{\b1}and copies the contents of the accumulator to that cell.{\b}
Dialogue: 0,0:09:07.76,0:09:09.80,Default,,0,0,0,,{\b1}There's also an exchange instruction which can atomically swap{\b}
Dialogue: 0,0:09:09.80,0:09:13.12,Default,,0,0,0,,{\b1}the contents of the accumulator and a memory cell.{\b}
Dialogue: 0,0:09:13.12,0:09:16.40,Default,,0,0,0,,{\b1}The 'add' instruction will look up the contents of a given memory address{\b}
Dialogue: 0,0:09:16.40,0:09:18.32,Default,,0,0,0,,{\b1}and add it to the contents of the accumulator{\b}
Dialogue: 0,0:09:18.32,0:09:21.84,Default,,0,0,0,,{\b1}and store the result back into the accumulator.{\b}
Dialogue: 0,0:09:21.84,0:09:23.56,Default,,0,0,0,,{\b1}And there's a 'subtract' instruction.{\b}
Dialogue: 0,0:09:23.56,0:09:25.24,Default,,0,0,0,,{\b1}It takes the contents of memory address{\b}
Dialogue: 0,0:09:25.24,0:09:28.60,Default,,0,0,0,,{\b1}and subtracts it from the content of the accumulator{\b}
Dialogue: 0,0:09:28.60,0:09:30.72,Default,,0,0,0,,{\b1}and stores the result back into the accumulator.{\b}
Dialogue: 0,0:09:30.72,0:09:33.00,Default,,0,0,0,,{\b1}The result of every subtraction can be negative,{\b}
Dialogue: 0,0:09:33.00,0:09:37.44,Default,,0,0,0,,{\b1}so we need to talk about how negative numbers are expressed on the AGC.{\b}
Dialogue: 0,0:09:37.44,0:09:39.28,Default,,0,0,0,,{\b1}Let's look at just 4 bit numbers.{\b}
Dialogue: 0,0:09:39.28,0:09:43.56,Default,,0,0,0,,{\b1}4-bit unsigned integers can express values from 0 to 15{\b}
Dialogue: 0,0:09:43.56,0:09:46.88,Default,,0,0,0,,{\b1}with sign and value encoding the uppermost bit corresponds to the sign,{\b}
Dialogue: 0,0:09:46.88,0:09:49.40,Default,,0,0,0,,{\b1}and the remaining 3 bits represent the absolute value.{\b}
Dialogue: 0,0:09:49.40,0:09:52.64,Default,,0,0,0,,{\b1}Consequently, there are separate values for plus 0 and minus 0.{\b}
Dialogue: 0,0:09:52.64,0:09:56.56,Default,,0,0,0,,{\b1}This encoding is hard to work with, since the 0 transitions need to be special cased.{\b}
Dialogue: 0,0:09:56.56,0:09:59.80,Default,,0,0,0,,{\b1}One's Complement encoding has the order of the negative numbers reversed.{\b}
Dialogue: 0,0:09:59.80,0:10:03.32,Default,,0,0,0,,{\b1}The 0 transitions are simpler now, but there's still two representations of 0.{\b}
Dialogue: 0,0:10:03.32,0:10:06.96,Default,,0,0,0,,{\b1}Modern Two's Complement encoding only has a single encoding for 0,{\b}
Dialogue: 0,0:10:06.96,0:10:10.88,Default,,0,0,0,,{\b1}and it's fully backwards compatible with unsigned addition and subtraction.{\b}
Dialogue: 0,0:10:10.88,0:10:15.44,Default,,0,0,0,,{\b1}In the 1960s, computers designed for scientific calculations are usually One's Complement{\b}
Dialogue: 0,0:10:15.44,0:10:18.20,Default,,0,0,0,,{\b1}and so is the AGC.{\b}
Dialogue: 0,0:10:18.20,0:10:21.04,Default,,0,0,0,,{\b1}Unsigned four bit numbers can express values from 0 to 15.{\b}
Dialogue: 0,0:10:21.04,0:10:23.16,Default,,0,0,0,,{\b1}In One's Complement the values 0 through 7{\b}
Dialogue: 0,0:10:23.16,0:10:25.36,Default,,0,0,0,,{\b1}match the unsigned values 0 through 7,{\b}
Dialogue: 0,0:10:25.36,0:10:28.68,Default,,0,0,0,,{\b1}and the negative size side is organized like this:{\b}
Dialogue: 0,0:10:28.68,0:10:31.96,Default,,0,0,0,,{\b1}Unlike Two's Complement, the two sides are perfectly symmetrical,{\b}
Dialogue: 0,0:10:31.96,0:10:35.60,Default,,0,0,0,,{\b1}so negating a number is as easy as complementing it,{\b}
Dialogue: 0,0:10:35.60,0:10:37.84,Default,,0,0,0,,{\b1}that is, flipping all the bits.{\b}
Dialogue: 0,0:10:37.84,0:10:41.48,Default,,0,0,0,,{\b1}So the two representations of 0 are plus 0, with all 0 bits,{\b}
Dialogue: 0,0:10:41.48,0:10:44.80,Default,,0,0,0,,{\b1}and minus 0, with all 1 bits.{\b}
Dialogue: 0,0:10:44.80,0:10:48.16,Default,,0,0,0,,{\b1}Addition in the positive space is equivalent to the unsigned version,{\b}
Dialogue: 0,0:10:48.16,0:10:50.36,Default,,0,0,0,,{\b1}same in the negative space when{\b}
Dialogue: 0,0:10:50.36,0:10:53.28,Default,,0,0,0,,{\b1}mapping signed negative numbers to their unsigned counterparts.{\b}
Dialogue: 0,0:10:53.28,0:10:55.60,Default,,0,0,0,,{\b1}It gets interesting when we have a 0 transition.{\b}
Dialogue: 0,0:10:55.60,0:11:01.24,Default,,0,0,0,,{\b1}Signed 6 - 4 is 6 + (-4) which is unsigned 6 + 11,{\b}
Dialogue: 0,0:11:01.24,0:11:05.96,Default,,0,0,0,,{\b1}which in modulus 16 is 1. We have a carry.{\b}
Dialogue: 0,0:11:05.96,0:11:08.76,Default,,0,0,0,,{\b1}In One's Complement, a carry needs to be added to the end result,{\b}
Dialogue: 0,0:11:08.76,0:11:10.32,Default,,0,0,0,,{\b1}so we get two, which is correct.{\b}
Dialogue: 0,0:11:10.32,0:11:14.12,Default,,0,0,0,,{\b1}The trick to jump over the duplicate 0 on a zero-transition by adding the carries{\b}
Dialogue: 0,0:11:14.12,0:11:16.32,Default,,0,0,0,,{\b1}is called the 'end-around-carry'.{\b}
Dialogue: 0,0:11:16.32,0:11:20.04,Default,,0,0,0,,{\b1}An overflow means that the signed result does not fit into the number space.{\b}
Dialogue: 0,0:11:20.04,0:11:24.28,Default,,0,0,0,,{\b1}Signed 7 + 1 would result in signed -7, which is incorrect.{\b}
Dialogue: 0,0:11:24.28,0:11:26.20,Default,,0,0,0,,{\b1}The same happens when overshooting negative numbers.{\b}
Dialogue: 0,0:11:26.20,0:11:30.56,Default,,0,0,0,,{\b1}After applying the end-around carry, the result of signed 7 here is incorrect.{\b}
Dialogue: 0,0:11:30.56,0:11:32.88,Default,,0,0,0,,{\b1}The CPU detects this and flags the result,{\b}
Dialogue: 0,0:11:32.88,0:11:35.00,Default,,0,0,0,,{\b1}the accumulator has an extra bit to record{\b}
Dialogue: 0,0:11:35.00,0:11:37.44,Default,,0,0,0,,{\b1}the information about an overflow, we call it V.{\b}
Dialogue: 0,0:11:38.48,0:11:43.48,Default,,0,0,0,,{\b1}So if we have code that reads the value of 7FFF from memory{\b}
Dialogue: 0,0:11:43.48,0:11:46.64,Default,,0,0,0,,{\b1}and adds 1, the result is 0 and an overflow is detected,{\b}
Dialogue: 0,0:11:46.64,0:11:48.52,Default,,0,0,0,,{\b1}so the accumulator is flagged.{\b}
Dialogue: 0,0:11:48.52,0:11:51.44,Default,,0,0,0,,{\b1}The store instruction in addition to writing A to memory,{\b}
Dialogue: 0,0:11:51.44,0:11:53.48,Default,,0,0,0,,{\b1}does extra work if there's an overflow condition:{\b}
Dialogue: 0,0:11:53.48,0:11:58.52,Default,,0,0,0,,{\b1}it clears the overflow condition, writes plus 1 or minus 1 into A,{\b}
Dialogue: 0,0:11:58.52,0:12:00.80,Default,,0,0,0,,{\b1}depending on whether it's a positive or a negative overflow,{\b}
Dialogue: 0,0:12:00.80,0:12:03.08,Default,,0,0,0,,{\b1}and skips the next instruction.{\b}
Dialogue: 0,0:12:03.08,0:12:04.68,Default,,0,0,0,,{\b1}This way the program can detect the overflow{\b}
Dialogue: 0,0:12:04.68,0:12:09.40,Default,,0,0,0,,{\b1}and use the plus 1 or minus 1 to apply the signed carry to a higher-order word.{\b}
Dialogue: 0,0:12:09.40,0:12:13.44,Default,,0,0,0,,{\b1}By storing A to memory, we now have a double-word result.{\b}
Dialogue: 0,0:12:13.44,0:12:17.28,Default,,0,0,0,,{\b1}In one's complement negating a number is as easy as flipping every bit in a word{\b}
Dialogue: 0,0:12:17.28,0:12:19.80,Default,,0,0,0,,{\b1}so there's a dedicated instruction for loading and negating a value.{\b}
Dialogue: 0,0:12:19.80,0:12:22.56,Default,,0,0,0,,{\b1}ldc, which stands for 'load complement', reads a word from memory,{\b}
Dialogue: 0,0:12:22.56,0:12:27.60,Default,,0,0,0,,{\b1}negates it by inverting all the bits and writes it into the accumulator.{\b}
Dialogue: 0,0:12:27.60,0:12:30.96,Default,,0,0,0,,{\b1}Incrementing, that is adding 1 to a word, is such a common operation{\b}
Dialogue: 0,0:12:30.96,0:12:34.64,Default,,0,0,0,,{\b1}that there's a dedicated instruction that increments a word in memory in place.{\b}
Dialogue: 0,0:12:34.64,0:12:37.24,Default,,0,0,0,,{\b1}There is no corresponding decrement instruction.{\b}
Dialogue: 0,0:12:37.24,0:12:40.52,Default,,0,0,0,,{\b1}Instead, there are two similar instructions: augment and diminish.{\b}
Dialogue: 0,0:12:40.52,0:12:43.36,Default,,0,0,0,,{\b1}The increment instruction adds one to the original value,{\b}
Dialogue: 0,0:12:43.36,0:12:46.40,Default,,0,0,0,,{\b1}the augment instruction adds one to all positive values{\b}
Dialogue: 0,0:12:46.40,0:12:48.04,Default,,0,0,0,,{\b1}and subtracts 1 from all negative values.{\b}
Dialogue: 0,0:12:48.04,0:12:52.16,Default,,0,0,0,,{\b1}Effectively increments the absolute value retaining the sign.{\b}
Dialogue: 0,0:12:52.16,0:12:57.08,Default,,0,0,0,,{\b1}The diminish instruction decrements positive values and increments negative values.{\b}
Dialogue: 0,0:12:57.08,0:13:02.32,Default,,0,0,0,,{\b1}Optimized for scientific calculations, the CPU has dedicated multiplication circuitry.{\b}
Dialogue: 0,0:13:02.32,0:13:06.24,Default,,0,0,0,,{\b1}The model instruction reads a word from memory and multiplies it with the accumulator.{\b}
Dialogue: 0,0:13:06.24,0:13:08.76,Default,,0,0,0,,{\b1}When you multiply two signed 15 bit words,{\b}
Dialogue: 0,0:13:08.76,0:13:12.16,Default,,0,0,0,,{\b1}you need up to 29 bits, that is two words, for the result.{\b}
Dialogue: 0,0:13:12.16,0:13:14.40,Default,,0,0,0,,{\b1}The complete result will be written into two registers,{\b}
Dialogue: 0,0:13:14.40,0:13:17.16,Default,,0,0,0,,{\b1}the upper half into A and the lower half into B.{\b}
Dialogue: 0,0:13:17.16,0:13:21.40,Default,,0,0,0,,{\b1}B is a separate 15 bit register which is mostly used together with the accumulator{\b}
Dialogue: 0,0:13:21.40,0:13:24.56,Default,,0,0,0,,{\b1}with instructions that deal with 30 bit data.{\b}
Dialogue: 0,0:13:24.56,0:13:27.72,Default,,0,0,0,,{\b1}Double word values are expressed with the uppermost bits in A,{\b}
Dialogue: 0,0:13:27.72,0:13:29.24,Default,,0,0,0,,{\b1}or, if in memory, at lower addresses,{\b}
Dialogue: 0,0:13:29.24,0:13:31.92,Default,,0,0,0,,{\b1}and the lower bits in B, or at higher addresses,{\b}
Dialogue: 0,0:13:31.92,0:13:33.76,Default,,0,0,0,,{\b1}making the AGC a big endian machine.{\b}
Dialogue: 0,0:13:33.76,0:13:36.04,Default,,0,0,0,,{\b1}Assuming the normalized form, with matching signs,{\b}
Dialogue: 0,0:13:36.04,0:13:42.28,Default,,0,0,0,,{\b1}the effective value is the concatenation of the two times 14 bits of the values.{\b}
Dialogue: 0,0:13:42.28,0:13:44.88,Default,,0,0,0,,{\b1}Division also works with double words.{\b}
Dialogue: 0,0:13:44.88,0:13:47.92,Default,,0,0,0,,{\b1}It takes the combination of the A and B registers as the dividend{\b}
Dialogue: 0,0:13:47.92,0:13:49.76,Default,,0,0,0,,{\b1}and a word from memory as the divisor.{\b}
Dialogue: 0,0:13:49.76,0:13:52.36,Default,,0,0,0,,{\b1}There are also two results: the result and the remainder.{\b}
Dialogue: 0,0:13:52.36,0:13:55.84,Default,,0,0,0,,{\b1}The result is written into A and the remainder in to B.{\b}
Dialogue: 0,0:13:55.84,0:13:59.60,Default,,0,0,0,,{\b1}Some other instructions also allow using A and B as a double word register.{\b}
Dialogue: 0,0:13:59.60,0:14:03.44,Default,,0,0,0,,{\b1}Load a b comma indirect two zero zero looks up addresse two zero zero in memory{\b}
Dialogue: 0,0:14:03.44,0:14:06.44,Default,,0,0,0,,{\b1}and reads the words at this and the next cell into A and B.{\b}
Dialogue: 0,0:14:06.44,0:14:09.88,Default,,0,0,0,,{\b1}The load complement variant does the same but inverts all bits during the load.{\b}
Dialogue: 0,0:14:09.88,0:14:13.00,Default,,0,0,0,,{\b1}There is no instruction to store A and B in a single step,{\b}
Dialogue: 0,0:14:13.00,0:14:15.24,Default,,0,0,0,,{\b1}but there is a double word exchange instruction.{\b}
Dialogue: 0,0:14:15.24,0:14:19.12,Default,,0,0,0,,{\b1}And finally there's an add instruction that works in double words.{\b}
Dialogue: 0,0:14:19.12,0:14:24.20,Default,,0,0,0,,{\b1}And to load and store just the B register there's an exchange instruction for that.{\b}
Dialogue: 0,0:14:24.20,0:14:27.92,Default,,0,0,0,,{\b1}For working with tables there's the indexed addressing mode.{\b}
Dialogue: 0,0:14:27.92,0:14:31.32,Default,,0,0,0,,{\b1}Any instruction that takes an address as an argument can use it.{\b}
Dialogue: 0,0:14:31.32,0:14:35.60,Default,,0,0,0,,{\b1}This example 'load A comma indirect 7 0 0 plus indirect 8 0'{\b}
Dialogue: 0,0:14:35.60,0:14:42.24,Default,,0,0,0,,{\b1}first looks up address 0 8 0, adds it to the base of 7 0 0, which results in 7 0 2,{\b}
Dialogue: 0,0:14:42.24,0:14:46.00,Default,,0,0,0,,{\b1}reads from that address and writes the result into A.{\b}
Dialogue: 0,0:14:46.00,0:14:49.24,Default,,0,0,0,,{\b1}What does this mean? There's a table in memory at 7 0 0.{\b}
Dialogue: 0,0:14:49.24,0:14:51.16,Default,,0,0,0,,{\b1}In the example, it contains multiples of 3,{\b}
Dialogue: 0,0:14:51.16,0:14:56.32,Default,,0,0,0,,{\b1}and an index to that table is stored in memory at 0 8 0, which in the example is 2.{\b}
Dialogue: 0,0:14:56.32,0:15:01.16,Default,,0,0,0,,{\b1}So we read the entry at index 2 of the table, which is 6.{\b}
Dialogue: 0,0:15:01.16,0:15:03.80,Default,,0,0,0,,{\b1}Without a base address, we get the syntax in this example:{\b}
Dialogue: 0,0:15:03.80,0:15:05.92,Default,,0,0,0,,{\b1}load A comma double indirect 8 0.{\b}
Dialogue: 0,0:15:05.92,0:15:08.32,Default,,0,0,0,,{\b1}The base is effectively zero in this case.{\b}
Dialogue: 0,0:15:08.32,0:15:13.48,Default,,0,0,0,,{\b1}The CPU will look up the value at 0 8 0 in memory, add it to the base of 0,{\b}
Dialogue: 0,0:15:13.48,0:15:17.00,Default,,0,0,0,,{\b1}so the value is still the same. And read from that address.{\b}
Dialogue: 0,0:15:17.00,0:15:22.60,Default,,0,0,0,,{\b1}In this case, memory at 0 8 0 effectively stores what C programmers know as a pointer,{\b}
Dialogue: 0,0:15:22.60,0:15:25.20,Default,,0,0,0,,{\b1}and 3A0 is the pointer's different destination.{\b}
Dialogue: 0,0:15:25.20,0:15:28.80,Default,,0,0,0,,{\b1}The instruction performed it indirectly.{\b}
Dialogue: 0,0:15:29.60,0:15:32.60,Default,,0,0,0,,{\b1}By default, instructions are executed sequentially.{\b}
Dialogue: 0,0:15:32.60,0:15:35.60,Default,,0,0,0,,{\b1}The program counter PC increments as instructions are executed,{\b}
Dialogue: 0,0:15:35.60,0:15:37.60,Default,,0,0,0,,{\b1}always pointing to the next instruction.{\b}
Dialogue: 0,0:15:37.60,0:15:41.76,Default,,0,0,0,,{\b1}Control flow instructions like jump and conditional jump change that.{\b}
Dialogue: 0,0:15:41.76,0:15:45.60,Default,,0,0,0,,{\b1}When the CPU hits a jump instruction, it will load its argument into the program counter,{\b}
Dialogue: 0,0:15:45.60,0:15:49.08,Default,,0,0,0,,{\b1}which means that execution will continue at that address.{\b}
Dialogue: 0,0:15:49.08,0:15:54.16,Default,,0,0,0,,{\b1}jz, jump if zero, only jumps if A is zero. Otherwise it continues with the next instruction.{\b}
Dialogue: 0,0:15:54.16,0:15:58.68,Default,,0,0,0,,{\b1}Similarly, jlez only jumps if A is negative or zero.{\b}
Dialogue: 0,0:15:58.68,0:16:03.44,Default,,0,0,0,,{\b1}CCS count compare and skip, is a fun one. It's a four-way fork for execution.{\b}
Dialogue: 0,0:16:03.44,0:16:06.84,Default,,0,0,0,,{\b1}Depending on whether the value in memory is positive, negative,{\b}
Dialogue: 0,0:16:06.84,0:16:11.80,Default,,0,0,0,,{\b1}plus minus - plus zero, minus zero, it will jump to one of the next four instructions.{\b}
Dialogue: 0,0:16:11.80,0:16:13.68,Default,,0,0,0,,{\b1}If you know the value is positive or zero,{\b}
Dialogue: 0,0:16:13.68,0:16:16.76,Default,,0,0,0,,{\b1}you can ignore the other two cases and just fill the first two slots.{\b}
Dialogue: 0,0:16:16.76,0:16:20.64,Default,,0,0,0,,{\b1}And if it's supposed to be only negative, you have to skip the first two slots.{\b}
Dialogue: 0,0:16:20.64,0:16:21.68,Default,,0,0,0,,{\b1}They should never be reached,{\b}
Dialogue: 0,0:16:21.68,0:16:25.68,Default,,0,0,0,,{\b1}but it's good practice for them to fill them with error handlers.{\b}
Dialogue: 0,0:16:25.68,0:16:30.40,Default,,0,0,0,,{\b1}Since CCS also puts the absolute diminished value of the memory location into A,{\b}
Dialogue: 0,0:16:30.40,0:16:33.28,Default,,0,0,0,,{\b1}so it decrements A, a special case of CCS A{\b}
Dialogue: 0,0:16:33.28,0:16:36.80,Default,,0,0,0,,{\b1}can be used for loops that count down A.{\b}
Dialogue: 0,0:16:36.80,0:16:40.20,Default,,0,0,0,,{\b1}The call instruction. Isn't it for calling subroutines aka functions.{\b}
Dialogue: 0,0:16:40.20,0:16:42.52,Default,,0,0,0,,{\b1}It's like a jump instruction but it saves its origin,{\b}
Dialogue: 0,0:16:42.52,0:16:44.32,Default,,0,0,0,,{\b1}so the callee can return to it later.{\b}
Dialogue: 0,0:16:44.32,0:16:46.76,Default,,0,0,0,,{\b1}For the call instruction, the program counter is incremented first,{\b}
Dialogue: 0,0:16:46.76,0:16:49.24,Default,,0,0,0,,{\b1}and then copied into the link register LR.{\b}
Dialogue: 0,0:16:49.24,0:16:52.44,Default,,0,0,0,,{\b1}Finally, the argument of the call instruction is copied into the program counter,{\b}
Dialogue: 0,0:16:52.44,0:16:54.16,Default,,0,0,0,,{\b1}so that execution continues there.{\b}
Dialogue: 0,0:16:54.16,0:16:57.80,Default,,0,0,0,,{\b1}The link register now contains the return address.{\b}
Dialogue: 0,0:16:57.80,0:16:58.92,Default,,0,0,0,,{\b1}At the end of the subroutine,{\b}
Dialogue: 0,0:16:58.92,0:17:03.00,Default,,0,0,0,,{\b1}the RET instruction effectively copies the contents of the linked register into the program counter,{\b}
Dialogue: 0,0:17:03.00,0:17:07.48,Default,,0,0,0,,{\b1}so execution resumes just after the call instruction.{\b}
Dialogue: 0,0:17:07.48,0:17:09.40,Default,,0,0,0,,{\b1}If the subroutine wants to call its own subroutine,{\b}
Dialogue: 0,0:17:09.40,0:17:11.28,Default,,0,0,0,,{\b1}the program has to save the link register before,{\b}
Dialogue: 0,0:17:11.28,0:17:15.08,Default,,0,0,0,,{\b1}and restore it afterwards. There's an exchange instruction specifically for this.{\b}
Dialogue: 0,0:17:15.08,0:17:20.96,Default,,0,0,0,,{\b1}For additional levels, a stack can be constructed, manually, using the indexing syntax.{\b}
Dialogue: 0,0:17:20.96,0:17:22.88,Default,,0,0,0,,{\b1}So far we've seen the following registers:{\b}
Dialogue: 0,0:17:22.88,0:17:26.12,Default,,0,0,0,,{\b1}the A register is used for memory accesses and all arithmetic.{\b}
Dialogue: 0,0:17:26.12,0:17:28.80,Default,,0,0,0,,{\b1}It is combined with the B register for double width arithmetic,{\b}
Dialogue: 0,0:17:28.80,0:17:31.20,Default,,0,0,0,,{\b1}the program counter to keep track of what to execute{\b}
Dialogue: 0,0:17:31.20,0:17:34.12,Default,,0,0,0,,{\b1}and the link register remembers the return address when calling a subroutine.{\b}
Dialogue: 0,0:17:34.12,0:17:35.76,Default,,0,0,0,,{\b1}We haven't seen the zero register yet.{\b}
Dialogue: 0,0:17:35.76,0:17:38.52,Default,,0,0,0,,{\b1}It always contains zero, so when we read from it, we get zero{\b}
Dialogue: 0,0:17:38.52,0:17:41.04,Default,,0,0,0,,{\b1}and when we write to it the value gets discarded.{\b}
Dialogue: 0,0:17:41.04,0:17:43.92,Default,,0,0,0,,{\b1}There are three more registers that we will talk about later.{\b}
Dialogue: 0,0:17:43.92,0:17:48.40,Default,,0,0,0,,{\b1}The eight registers are numbered, that is they are assigned memory addresses.{\b}
Dialogue: 0,0:17:48.40,0:17:52.16,Default,,0,0,0,,{\b1}This means that the first eight words in memory are actually occupied by the registers.{\b}
Dialogue: 0,0:17:52.16,0:17:56.64,Default,,0,0,0,,{\b1}They can be accessed using the addresses and all instructions that take a memory address.{\b}
Dialogue: 0,0:17:56.64,0:17:59.24,Default,,0,0,0,,{\b1}This allows for much greater flexibility in the instruction set:{\b}
Dialogue: 0,0:17:59.24,0:18:01.56,Default,,0,0,0,,{\b1}we can load A with the contents of the B register{\b}
Dialogue: 0,0:18:01.56,0:18:04.24,Default,,0,0,0,,{\b1}by reading the contents of memory at location 1 into A.{\b}
Dialogue: 0,0:18:04.24,0:18:07.88,Default,,0,0,0,,{\b1}The content of zero can be loaded into A by just reading from memory at 7,{\b}
Dialogue: 0,0:18:07.88,0:18:09.68,Default,,0,0,0,,{\b1}which is the zero register.{\b}
Dialogue: 0,0:18:09.68,0:18:13.12,Default,,0,0,0,,{\b1}A can be incremented by incrementing memory at zero{\b}
Dialogue: 0,0:18:13.12,0:18:17.80,Default,,0,0,0,,{\b1}and B can be used as a pointer by reading from double indirect one.{\b}
Dialogue: 0,0:18:17.80,0:18:21.28,Default,,0,0,0,,{\b1}Let's look at memory more closely.{\b}
Dialogue: 0,0:18:21.28,0:18:25.56,Default,,0,0,0,,{\b1}Memory is 4096 words and goes from 000 to FFF.{\b}
Dialogue: 0,0:18:25.56,0:18:27.88,Default,,0,0,0,,{\b1}The registers are located at the very bottom of memory.{\b}
Dialogue: 0,0:18:27.88,0:18:32.32,Default,,0,0,0,,{\b1}Including them, there are 1024 words of RAM, random access memory,{\b}
Dialogue: 0,0:18:32.32,0:18:35.08,Default,,0,0,0,,{\b1}and three kilowords of ROM, read-only memory.{\b}
Dialogue: 0,0:18:35.08,0:18:38.80,Default,,0,0,0,,{\b1}The AGC was originally architected to only have this little RAM and ROM,{\b}
Dialogue: 0,0:18:38.80,0:18:42.20,Default,,0,0,0,,{\b1}but there's actually more. Let's look at the RAM area.{\b}
Dialogue: 0,0:18:42.20,0:18:43.48,Default,,0,0,0,,{\b1}The uppermost quarter is banked.{\b}
Dialogue: 0,0:18:43.48,0:18:47.28,Default,,0,0,0,,{\b1}The area is a window through which one of eight different banks can be accessed,{\b}
Dialogue: 0,0:18:47.28,0:18:49.16,Default,,0,0,0,,{\b1}each 250 words in size.{\b}
Dialogue: 0,0:18:49.16,0:18:53.16,Default,,0,0,0,,{\b1}The erasable Bank register EB points to one of these banks.{\b}
Dialogue: 0,0:18:53.16,0:18:55.92,Default,,0,0,0,,{\b1}If EB is 0, Bank 0 is visible in the banked area.{\b}
Dialogue: 0,0:18:55.92,0:18:59.92,Default,,0,0,0,,{\b1}If EB is five, bank five is visible.{\b}
Dialogue: 0,0:18:59.92,0:19:03.04,Default,,0,0,0,,{\b1}Addresses in the fixed area always represent the same RAM cells,{\b}
Dialogue: 0,0:19:03.04,0:19:06.24,Default,,0,0,0,,{\b1}but these are not additional cells, but the same as banks zero, one and two.{\b}
Dialogue: 0,0:19:06.24,0:19:12.72,Default,,0,0,0,,{\b1}This means that there's a total of 8 times 256 words of RAM, two kilowords.{\b}
Dialogue: 0,0:19:12.72,0:19:15.68,Default,,0,0,0,,{\b1}ROM is organized similarly. The lower kiloword is banked.{\b}
Dialogue: 0,0:19:15.68,0:19:20.76,Default,,0,0,0,,{\b1}The fixed bank register FB selects one of the 32 banks.{\b}
Dialogue: 0,0:19:20.76,0:19:24.20,Default,,0,0,0,,{\b1}Support for more than 32 kilowords of ROM was added at the last minute.{\b}
Dialogue: 0,0:19:24.20,0:19:28.12,Default,,0,0,0,,{\b1}The 'superbank' bit can switch the uppermost eight banks to the second set.. *laughter*{\b}
Dialogue: 0,0:19:28.12,0:19:32.88,Default,,0,0,0,,{\b1}so that a total of 40 kilowords are supported by the architecture.{\b}
Dialogue: 0,0:19:32.88,0:19:36.64,Default,,0,0,0,,{\b1}The fixed ROM area will always show the same contents as two of the ROM banks,{\b}
Dialogue: 0,0:19:36.64,0:19:41.32,Default,,0,0,0,,{\b1}the designers chose banks two and three to simplify address encoding.{\b}
Dialogue: 0,0:19:41.32,0:19:44.64,Default,,0,0,0,,{\b1}In practice, fixed ROM contains core operating system code,{\b}
Dialogue: 0,0:19:44.64,0:19:48.72,Default,,0,0,0,,{\b1}and fixed RAM core operating system data, that have to be available at all times.{\b}
Dialogue: 0,0:19:48.72,0:19:53.56,Default,,0,0,0,,{\b1}The remaining functionality is distributed across the different ROM and RAM banks.{\b}
Dialogue: 0,0:19:53.56,0:19:57.12,Default,,0,0,0,,{\b1}Switching the RAM Bank can be done by writing through the EB register.{\b}
Dialogue: 0,0:19:57.12,0:20:02.76,Default,,0,0,0,,{\b1}This is not a separate instruction but can be expressed by writing A to memory location three.{\b}
Dialogue: 0,0:20:02.76,0:20:08.24,Default,,0,0,0,,{\b1}If A is five, writing A into EB will make RAM Bank five visible at 3 0 0.{\b}
Dialogue: 0,0:20:08.24,0:20:12.00,Default,,0,0,0,,{\b1}The same store instruction could be used to write to the FB register at memory location 4,{\b}
Dialogue: 0,0:20:12.00,0:20:15.88,Default,,0,0,0,,{\b1}to switch the ROM Bank. But that wouldn't work for a common case.{\b}
Dialogue: 0,0:20:15.88,0:20:18.72,Default,,0,0,0,,{\b1}If code in one bank wants to call code in another Bank,{\b}
Dialogue: 0,0:20:18.72,0:20:23.04,Default,,0,0,0,,{\b1}by first switching the ROM Bank, load FB, and then doing the function call,{\b}
Dialogue: 0,0:20:23.04,0:20:26.96,Default,,0,0,0,,{\b1}writing the bank number into FB will switch out the bank the code is currently running on,{\b}
Dialogue: 0,0:20:26.96,0:20:29.24,Default,,0,0,0,,{\b1}so it won't be able to execute the call instruction.{\b}
Dialogue: 0,0:20:29.24,0:20:31.64,Default,,0,0,0,,{\b1}Instead it will continue running some completely unrelated code{\b}
Dialogue: 0,0:20:31.64,0:20:34.60,Default,,0,0,0,,{\b1}that happens to get the same address on the other bank.{\b}
Dialogue: 0,0:20:34.60,0:20:38.96,Default,,0,0,0,,{\b1}To call code on a different Bank, FB and PC registers need to be changed atomically.{\b}
Dialogue: 0,0:20:38.96,0:20:43.24,Default,,0,0,0,,{\b1}call f is only a synonym for the existing double word exchange instruction.{\b}
Dialogue: 0,0:20:43.24,0:20:48.96,Default,,0,0,0,,{\b1}Code first has to load the bank and the program counter into A and B.{\b}
Dialogue: 0,0:20:48.96,0:20:54.80,Default,,0,0,0,,{\b1}Which then call f can atomically move into FB and PC.{\b}
Dialogue: 0,0:20:54.80,0:20:57.56,Default,,0,0,0,,{\b1}The same exchange instruction can be used for a far return:{\b}
Dialogue: 0,0:20:57.56,0:21:02.08,Default,,0,0,0,,{\b1}it moves the original values back into FB and PC.{\b}
Dialogue: 0,0:21:02.08,0:21:06.08,Default,,0,0,0,,{\b1}The two Bank registers only hold five and three bits respectively.{\b}
Dialogue: 0,0:21:06.08,0:21:10.20,Default,,0,0,0,,{\b1}The other bits are zero and there's a third bank register, BB, both banks,{\b}
Dialogue: 0,0:21:10.20,0:21:13.32,Default,,0,0,0,,{\b1}which merges the information from both other bank registers.{\b}
Dialogue: 0,0:21:13.32,0:21:16.92,Default,,0,0,0,,{\b1}The call far both banks synonym is a double word exchange instruction{\b}
Dialogue: 0,0:21:16.92,0:21:20.04,Default,,0,0,0,,{\b1}that updates the program counter and both banks.{\b}
Dialogue: 0,0:21:20.04,0:21:24.08,Default,,0,0,0,,{\b1}Subroutines usually have their private variables on particular RAM banks.{\b}
Dialogue: 0,0:21:24.08,0:21:27.44,Default,,0,0,0,,{\b1}Call for both banks passes control to a function on the different ROM Bank{\b}
Dialogue: 0,0:21:27.44,0:21:31.60,Default,,0,0,0,,{\b1}and also directly switches RAM banks, so that the callee can immediately access its variables.{\b}
Dialogue: 0,0:21:31.60,0:21:36.92,Default,,0,0,0,,{\b1}Return for both banks returns to the caller, restoring its RAM Bank configuration.{\b}
Dialogue: 0,0:21:36.92,0:21:39.52,Default,,0,0,0,,{\b1}The unusual ordering of the bank registers was chosen{\b}
Dialogue: 0,0:21:39.52,0:21:42.08,Default,,0,0,0,,{\b1}to allow for a double word exchange of FB and PC,{\b}
Dialogue: 0,0:21:42.08,0:21:46.60,Default,,0,0,0,,{\b1}as well as for a double word exchange of PC and BB.{\b}
Dialogue: 0,0:21:46.60,0:21:48.40,Default,,0,0,0,,{\b1}Now we've seen all eight registers.{\b}
Dialogue: 0,0:21:48.40,0:21:52.00,Default,,0,0,0,,{\b1}There's eight more special locations in memory above the registers, the shadow area,{\b}
Dialogue: 0,0:21:52.00,0:21:53.00,Default,,0,0,0,,{\b1}which we'll talk about later.{\b}
Dialogue: 0,0:21:53.00,0:21:55.84,Default,,0,0,0,,{\b1}And above those, there are four so-called editing registers,{\b}
Dialogue: 0,0:21:55.84,0:21:58.76,Default,,0,0,0,,{\b1}which make up for the missing shift and rotate instructions.{\b}
Dialogue: 0,0:21:58.76,0:22:03.00,Default,,0,0,0,,{\b1}When writing a 15 bit value into the ROR editing register,{\b}
Dialogue: 0,0:22:03.00,0:22:07.32,Default,,0,0,0,,{\b1}it will be moved to the right by one bit, and the lowest bit will be cycled to the top.{\b}
Dialogue: 0,0:22:07.32,0:22:09.68,Default,,0,0,0,,{\b1}The result can then be read back.{\b}
Dialogue: 0,0:22:09.68,0:22:12.08,Default,,0,0,0,,{\b1}ROL rotates left,{\b}
Dialogue: 0,0:22:12.08,0:22:15.32,Default,,0,0,0,,{\b1}SHR shifts to the right duplicating the top bit,{\b}
Dialogue: 0,0:22:15.32,0:22:20.08,Default,,0,0,0,,{\b1}and SHR7 shifts to the right by 7 bits, filling the top with zeros.{\b}
Dialogue: 0,0:22:20.08,0:22:24.08,Default,,0,0,0,,{\b1}This is needed for the interpreter system software component that we'll learn about later.{\b}
Dialogue: 0,0:22:25.04,0:22:28.52,Default,,0,0,0,,{\b1}We have seen that the CPU is connected to RAM and ROM over the memory bus,{\b}
Dialogue: 0,0:22:28.52,0:22:32.76,Default,,0,0,0,,{\b1}but computers also talk to peripheral devices that is the I/O bus.{\b}
Dialogue: 0,0:22:32.76,0:22:35.16,Default,,0,0,0,,{\b1}We've already seen the address space for memory;{\b}
Dialogue: 0,0:22:35.16,0:22:37.76,Default,,0,0,0,,{\b1}there is a second address space to talk to devices.{\b}
Dialogue: 0,0:22:37.76,0:22:42.00,Default,,0,0,0,,{\b1}There are 512 I/O channels numbered 000 through FFF.{\b}
Dialogue: 0,0:22:42.00,0:22:43.88,Default,,0,0,0,,{\b1}Each channel is 15 bits,{\b}
Dialogue: 0,0:22:43.88,0:22:48.36,Default,,0,0,0,,{\b1}and the in and out instructions can read words from -, and write words to I/O channels.{\b}
Dialogue: 0,0:22:48.36,0:22:53.00,Default,,0,0,0,,{\b1}For many devices, a channel contains 15 individual control bits.{\b}
Dialogue: 0,0:22:53.00,0:22:55.72,Default,,0,0,0,,{\b1}A control bit can for example toggle a lamp on a display.{\b}
Dialogue: 0,0:22:55.72,0:22:58.44,Default,,0,0,0,,{\b1}The 'out OR' instruction sets individual bits,{\b}
Dialogue: 0,0:22:58.44,0:23:01.88,Default,,0,0,0,,{\b1}and 'out AND' clears individual bits.{\b}
Dialogue: 0,0:23:01.88,0:23:05.68,Default,,0,0,0,,{\b1}So I/O instructions can work on the whole word or do boolean operations on them:{\b}
Dialogue: 0,0:23:05.68,0:23:09.76,Default,,0,0,0,,{\b1}AND, OR and XOR.{\b}
Dialogue: 0,0:23:09.76,0:23:12.64,Default,,0,0,0,,{\b1}To make boolean operations also usable between registers,{\b}
Dialogue: 0,0:23:12.64,0:23:18.00,Default,,0,0,0,,{\b1}channels 1 and 2 are actually aliases of the B and LR registers,{\b}
Dialogue: 0,0:23:18.00,0:23:20.48,Default,,0,0,0,,{\b1}which allows for these instructions.{\b}
Dialogue: 0,0:23:20.48,0:23:25.20,Default,,0,0,0,,{\b1}For AND there's also a dedicated instruction that works on A and memory.{\b}
Dialogue: 0,0:23:25.20,0:23:29.44,Default,,0,0,0,,{\b1}After the registers, the shadow area, and the editing registers,{\b}
Dialogue: 0,0:23:29.44,0:23:31.68,Default,,0,0,0,,{\b1}there's another special area: the counters.{\b}
Dialogue: 0,0:23:31.68,0:23:34.24,Default,,0,0,0,,{\b1}Like I/O channels, they connect to external devices{\b}
Dialogue: 0,0:23:34.24,0:23:36.96,Default,,0,0,0,,{\b1}but they don't send bits or hold words back and forth,{\b}
Dialogue: 0,0:23:36.96,0:23:41.16,Default,,0,0,0,,{\b1}instead they are controlled by hardware pulses, or cause hardware pulses.{\b}
Dialogue: 0,0:23:41.16,0:23:44.16,Default,,0,0,0,,{\b1}On every pulse, TIME1 gets incremented for example,{\b}
Dialogue: 0,0:23:44.16,0:23:51.20,Default,,0,0,0,,{\b1}while other counters take the number stored into them by code and count down, generating pulses.{\b}
Dialogue: 0,0:23:51.20,0:23:55.20,Default,,0,0,0,,{\b1}When I/O devices need to signal the CPU, thay can interrupt normal execution.{\b}
Dialogue: 0,0:23:55.20,0:23:58.00,Default,,0,0,0,,{\b1}Next to the program counter, which points to the next instruction,{\b}
Dialogue: 0,0:23:58.00,0:24:01.08,Default,,0,0,0,,{\b1}there's the instruction register which holds the current opcode.{\b}
Dialogue: 0,0:24:01.08,0:24:06.32,Default,,0,0,0,,{\b1}When an interrupt happens, the CPU copies PC into a special memory location PC'{\b}
Dialogue: 0,0:24:06.32,0:24:10.88,Default,,0,0,0,,{\b1}and IR into IR' and then jumps to a magic location depending on the type of interrupt,{\b}
Dialogue: 0,0:24:10.88,0:24:12.72,Default,,0,0,0,,{\b1}in this example 814.{\b}
Dialogue: 0,0:24:12.72,0:24:15.04,Default,,0,0,0,,{\b1}When the interrupt handlers finished servicing the device{\b}
Dialogue: 0,0:24:15.04,0:24:18.60,Default,,0,0,0,,{\b1}the iret instruction will copy PC' and IR' back into PC and IR,{\b}
Dialogue: 0,0:24:18.60,0:24:22.04,Default,,0,0,0,,{\b1}so execution will continue at the original location.{\b}
Dialogue: 0,0:24:22.04,0:24:26.68,Default,,0,0,0,,{\b1}Memory locations eight through hex F are shadows of the eight registers.{\b}
Dialogue: 0,0:24:26.68,0:24:29.36,Default,,0,0,0,,{\b1}PC and IR are automatically saved by interrupts{\b}
Dialogue: 0,0:24:29.36,0:24:32.68,Default,,0,0,0,,{\b1}and the remaining registers need to be saved by software if necessary.{\b}
Dialogue: 0,0:24:32.68,0:24:37.00,Default,,0,0,0,,{\b1}The overflow condition flag cannot be saved or restored,{\b}
Dialogue: 0,0:24:37.00,0:24:38.76,Default,,0,0,0,,{\b1}so while there's an overflow condition{\b}
Dialogue: 0,0:24:38.76,0:24:44.52,Default,,0,0,0,,{\b1}until the next store instruction, which resolves the overload, interrupts will be disabled.{\b}
Dialogue: 0,0:24:44.52,0:24:50.28,Default,,0,0,0,,{\b1}The 11 interrupt handlers have to reside in fixed ROM starting at 8 0 0.{\b}
Dialogue: 0,0:24:50.28,0:24:54.60,Default,,0,0,0,,{\b1}There are 4 words for each entry. Typical interrupt entry code saves A and B,{\b}
Dialogue: 0,0:24:54.60,0:25:00.32,Default,,0,0,0,,{\b1}loads A and B with a bank and PC of the actual handler and jumps there.{\b}
Dialogue: 0,0:25:00.32,0:25:05.44,Default,,0,0,0,,{\b1}Interrupt 0 is special: it's the entry point on reset.{\b}
Dialogue: 0,0:25:05.44,0:25:07.40,Default,,0,0,0,,{\b1}Next to the interrupt return instruction,{\b}
Dialogue: 0,0:25:07.40,0:25:09.84,Default,,0,0,0,,{\b1}there's an instruction to cause an interrupt in software,{\b}
Dialogue: 0,0:25:09.84,0:25:12.76,Default,,0,0,0,,{\b1}and instructions to enable and disable interrupts globally.{\b}
Dialogue: 0,0:25:12.76,0:25:16.80,Default,,0,0,0,,{\b1}There is one more special memory location at hex 37, the watchdog.{\b}
Dialogue: 0,0:25:16.80,0:25:22.32,Default,,0,0,0,,{\b1}This location needs to be read from or - read from or written to - at least every 0.64 seconds{\b}
Dialogue: 0,0:25:22.32,0:25:27.12,Default,,0,0,0,,{\b1}otherwise the hardware will decide the system software is unresponsive and cause a reset.{\b}
Dialogue: 0,0:25:27.12,0:25:29.52,Default,,0,0,0,,{\b1}Now we've seen an instruction set{\b}
Dialogue: 0,0:25:29.52,0:25:33.04,Default,,0,0,0,,{\b1}and in the examples we've seen the codes that represent instructions in memory.{\b}
Dialogue: 0,0:25:33.04,0:25:34.92,Default,,0,0,0,,{\b1}Let's look at how the encoding works.{\b}
Dialogue: 0,0:25:34.92,0:25:38.64,Default,,0,0,0,,{\b1}For the load instruction, the upper three bits are the opcode representing the load a{\b}
Dialogue: 0,0:25:38.64,0:25:42.28,Default,,0,0,0,,{\b1}and the remaining 12 bits encode the address.{\b}
Dialogue: 0,0:25:42.28,0:25:44.12,Default,,0,0,0,,{\b1}This allows for a total of eight instructions{\b}
Dialogue: 0,0:25:44.12,0:25:46.28,Default,,0,0,0,,{\b1}but there are more than eight instructions.{\b}
Dialogue: 0,0:25:46.28,0:25:51.88,Default,,0,0,0,,{\b1}RAM addresses always start with zero zero and ROM adresses start with anything but zero zero.{\b}
Dialogue: 0,0:25:51.88,0:25:55.08,Default,,0,0,0,,{\b1}So the store instruction, which only makes sense on RAM,{\b}
Dialogue: 0,0:25:55.08,0:25:59.48,Default,,0,0,0,,{\b1}only needs to encode 10 address bits instead of 12,{\b}
Dialogue: 0,0:25:59.48,0:26:02.60,Default,,0,0,0,,{\b1}making room for another three RAM-only instructions.{\b}
Dialogue: 0,0:26:02.60,0:26:06.80,Default,,0,0,0,,{\b1}The same is true for the increment instruction, which makes room for three more,{\b}
Dialogue: 0,0:26:06.80,0:26:12.64,Default,,0,0,0,,{\b1}as well as CCS which shares an opcode with jump, which only works on ROM addresses.{\b}
Dialogue: 0,0:26:12.64,0:26:15.64,Default,,0,0,0,,{\b1}Since jumps to the bank register don't make much sense{\b}
Dialogue: 0,0:26:15.64,0:26:20.28,Default,,0,0,0,,{\b1}these codes are used to encode STI, CLI and extend.{\b}
Dialogue: 0,0:26:20.28,0:26:25.76,Default,,0,0,0,,{\b1}Extend is a prefix. It changes the meaning of the opcode of the next instruction ...{\b}
Dialogue: 0,0:26:25.76,0:26:28.72,Default,,0,0,0,,{\b1}*laughter* ... allowing for a second set of two-word instructions.{\b}
Dialogue: 0,0:26:28.72,0:26:34.24,Default,,0,0,0,,{\b1}There's one more special call instruction 'call 2' which is 'call LR',{\b}
Dialogue: 0,0:26:34.24,0:26:35.68,Default,,0,0,0,,{\b1}which is the return instruction.{\b}
Dialogue: 0,0:26:35.68,0:26:37.52,Default,,0,0,0,,{\b1}But the CPU doesn't special case this one.{\b}
Dialogue: 0,0:26:37.52,0:26:40.28,Default,,0,0,0,,{\b1}Return is a side-effect of calling memory at location 2.{\b}
Dialogue: 0,0:26:40.28,0:26:44.24,Default,,0,0,0,,{\b1}It executes the instruction encoded in the LR register, the 12 bit address{\b}
Dialogue: 0,0:26:44.24,0:26:47.48,Default,,0,0,0,,{\b1}with the leading zeros decodes into another call instruction{\b}
Dialogue: 0,0:26:47.48,0:26:52.20,Default,,0,0,0,,{\b1}which transfers control to the return address.{\b}
Dialogue: 0,0:26:52.20,0:26:55.48,Default,,0,0,0,,{\b1}Indexed addressing is achieved by using the index prefix.{\b}
Dialogue: 0,0:26:55.48,0:26:59.84,Default,,0,0,0,,{\b1}An indexed instruction consists of two instruction words, index and the base instruction.{\b}
Dialogue: 0,0:26:59.84,0:27:02.36,Default,,0,0,0,,{\b1}The addressing code in the base instruction is the base address{\b}
Dialogue: 0,0:27:02.36,0:27:05.80,Default,,0,0,0,,{\b1}and the index instruction encodes the address of the index.{\b}
Dialogue: 0,0:27:05.80,0:27:07.56,Default,,0,0,0,,{\b1}Index is an actual instruction.{\b}
Dialogue: 0,0:27:07.56,0:27:11.24,Default,,0,0,0,,{\b1}The CPU reads from the given address, 0 8 0 in the example,{\b}
Dialogue: 0,0:27:11.24,0:27:17.44,Default,,0,0,0,,{\b1}then adds its value, 3, to the instruction code of the following instruction 3 7 0 0{\b}
Dialogue: 0,0:27:17.44,0:27:19.52,Default,,0,0,0,,{\b1}which is stored in the internal IR register.{\b}
Dialogue: 0,0:27:19.52,0:27:23.84,Default,,0,0,0,,{\b1}Then it uses the resulting instruction code 3 7 0 3 for the next instruction,{\b}
Dialogue: 0,0:27:23.84,0:27:28.16,Default,,0,0,0,,{\b1}which is a load from 703, the effective address.{\b}
Dialogue: 0,0:27:28.16,0:27:31.60,Default,,0,0,0,,{\b1}If an interrupt occurs after in the index instruction, that is no problem{\b}
Dialogue: 0,0:27:31.60,0:27:35.64,Default,,0,0,0,,{\b1}because IR contains the effective instruction code which will be saved into IR '{\b}
Dialogue: 0,0:27:35.64,0:27:38.40,Default,,0,0,0,,{\b1}and restored at the end of the interrupt handler.{\b}
Dialogue: 0,0:27:38.40,0:27:40.48,Default,,0,0,0,,{\b1}Finally there's one index encoding with a special meaning.{\b}
Dialogue: 0,0:27:40.48,0:27:43.36,Default,,0,0,0,,{\b1}When the address looks like it's referencing the shadow instruction register{\b}
Dialogue: 0,0:27:43.36,0:27:46.16,Default,,0,0,0,,{\b1}it's an interrupt return instruction.{\b}
Dialogue: 0,0:27:46.16,0:27:48.28,Default,,0,0,0,,{\b1}Looking at the instruction set architecture as a whole,{\b}
Dialogue: 0,0:27:48.28,0:27:51.72,Default,,0,0,0,,{\b1}there are many quirky and unusual features when compared to modern architectures.{\b}
Dialogue: 0,0:27:51.72,0:27:54.12,Default,,0,0,0,,{\b1}It uses One's Complement instead of Two's Complement;{\b}
Dialogue: 0,0:27:54.12,0:27:55.84,Default,,0,0,0,,{\b1}it has no status register;{\b}
Dialogue: 0,0:27:55.84,0:28:00.52,Default,,0,0,0,,{\b1}the overflow flag can't even be saved so interrupts are disabled until the overflow is resolved;{\b}
Dialogue: 0,0:28:00.52,0:28:04.40,Default,,0,0,0,,{\b1}the store instruction may skip a word under certain circumstances;{\b}
Dialogue: 0,0:28:04.40,0:28:07.72,Default,,0,0,0,,{\b1}the ccs destruction can skip several words and can be outright dangerous{\b}
Dialogue: 0,0:28:07.72,0:28:11.04,Default,,0,0,0,,{\b1}if the instructions following it use prefixes;{\b}
Dialogue: 0,0:28:11.04,0:28:12.92,Default,,0,0,0,,{\b1}there are no shift or rotate instructions{\b}
Dialogue: 0,0:28:12.92,0:28:16.60,Default,,0,0,0,,{\b1}but magic memory locations that shift and rotate when writing into them;{\b}
Dialogue: 0,0:28:16.60,0:28:19.56,Default,,0,0,0,,{\b1}most boolean instructions only work on I/O channels;{\b}
Dialogue: 0,0:28:19.56,0:28:22.84,Default,,0,0,0,,{\b1}indexing is done by hacking the following instruction code,{\b}
Dialogue: 0,0:28:22.84,0:28:28.40,Default,,0,0,0,,{\b1}and the architecture has no concept of a stack, indexing has to be used if one is needed.{\b}
Dialogue: 0,0:28:28.40,0:28:31.32,Default,,0,0,0,,{\b1}This was the architecture of the Apollo guidance computer,{\b}
Dialogue: 0,0:28:31.32,0:28:35.08,Default,,0,0,0,,{\b1}now let's look at how this architecture is implemented in hardware.{\b}
Dialogue: 0,0:28:35.08,0:28:37.60,Default,,0,0,0,,{\b1}The hardware implementation runs at one megahertz, is micro coded{\b}
Dialogue: 0,0:28:37.60,0:28:41.52,Default,,0,0,0,,{\b1}and uses integrated circuits, core memory, and core rope memory.{\b}
Dialogue: 0,0:28:41.52,0:28:44.80,Default,,0,0,0,,{\b1}We'll look at the block diagram and how instructions are implemented in micro code,{\b}
Dialogue: 0,0:28:44.80,0:28:50.28,Default,,0,0,0,,{\b1}and then about how the schematics map to integrated circuits on modules on trays.{\b}
Dialogue: 0,0:28:50.28,0:28:54.00,Default,,0,0,0,,{\b1}This simplified block diagram shows the AGC at the hardware level.{\b}
Dialogue: 0,0:28:54.00,0:28:56.72,Default,,0,0,0,,{\b1}Each box contains on the order of 500 logic gates.{\b}
Dialogue: 0,0:28:56.72,0:28:59.44,Default,,0,0,0,,{\b1}The dotted lines are wires that to move a single bit of information,{\b}
Dialogue: 0,0:28:59.44,0:29:04.20,Default,,0,0,0,,{\b1}the solid lines are 15 wires that move a data word.{\b}
Dialogue: 0,0:29:04.20,0:29:08.36,Default,,0,0,0,,{\b1}These units deal with timing and control, and these are the central units.{\b}
Dialogue: 0,0:29:08.36,0:29:12.52,Default,,0,0,0,,{\b1}The central register unit stores A, B, link registers, and program counter,{\b}
Dialogue: 0,0:29:12.52,0:29:16.04,Default,,0,0,0,,{\b1}and the arithmetic unit can add and subtract numbers.{\b}
Dialogue: 0,0:29:16.04,0:29:20.12,Default,,0,0,0,,{\b1}The memory components deal with RAM and ROM.{\b}
Dialogue: 0,0:29:20.12,0:29:23.52,Default,,0,0,0,,{\b1}The main clock of about one megahertz feeds into the sequence generator{\b}
Dialogue: 0,0:29:23.52,0:29:28.16,Default,,0,0,0,,{\b1}which keeps cycling through twelve stages, which is one memory cycle, MCT.{\b}
Dialogue: 0,0:29:28.16,0:29:32.24,Default,,0,0,0,,{\b1}Instructions usually take as many memory cycles as they need memory accesses,{\b}
Dialogue: 0,0:29:32.24,0:29:35.60,Default,,0,0,0,,{\b1}so load, add, and store take two cycles, and jump takes one.{\b}
Dialogue: 0,0:29:35.60,0:29:40.56,Default,,0,0,0,,{\b1}The sequence generator contains a collection of 12 step micro programs for each MCT,{\b}
Dialogue: 0,0:29:40.56,0:29:43.96,Default,,0,0,0,,{\b1}for each instruction, like this one for the load instruction.{\b}
Dialogue: 0,0:29:43.96,0:29:50.20,Default,,0,0,0,,{\b1}In each step, the entries send control pulses to the other units,{\b}
Dialogue: 0,0:29:50.20,0:29:53.00,Default,,0,0,0,,{\b1}which are connected through the write bus.{\b}
Dialogue: 0,0:29:53.00,0:29:58.28,Default,,0,0,0,,{\b1}The control signal WA for example instructs the register unit to put the contents of A{\b}
Dialogue: 0,0:29:58.28,0:30:03.68,Default,,0,0,0,,{\b1}onto the write bus, and RA makes it read the value on the bus into A.{\b}
Dialogue: 0,0:30:03.68,0:30:05.52,Default,,0,0,0,,{\b1}Memory is also connected to the write bus.{\b}
Dialogue: 0,0:30:05.52,0:30:08.76,Default,,0,0,0,,{\b1}WS will copy the bus contents into the memory address register,{\b}
Dialogue: 0,0:30:08.76,0:30:11.72,Default,,0,0,0,,{\b1}and RG and WG will read and write the G register,{\b}
Dialogue: 0,0:30:11.72,0:30:15.32,Default,,0,0,0,,{\b1}which buffers the cells value after read and before a write.{\b}
Dialogue: 0,0:30:15.32,0:30:22.00,Default,,0,0,0,,{\b1}So in stage 7 for example RG puts the memory buffer onto the bus,{\b}
Dialogue: 0,0:30:22.00,0:30:27.76,Default,,0,0,0,,{\b1}and WB writes the bus contents into the temporary G register.{\b}
Dialogue: 0,0:30:27.76,0:30:32.36,Default,,0,0,0,,{\b1}And in T10, B gets put on the bus and it gets read into the A register.{\b}
Dialogue: 0,0:30:32.36,0:30:37.52,Default,,0,0,0,,{\b1}At the beginning of every memory cycle the hardware sends the memory address S,{\b}
Dialogue: 0,0:30:37.52,0:30:41.12,Default,,0,0,0,,{\b1}usually what's encoded instruction, to memory and copies the contents of that address into G.{\b}
Dialogue: 0,0:30:41.12,0:30:45.76,Default,,0,0,0,,{\b1}in the second half of the MCT it stores G back into the same cell.{\b}
Dialogue: 0,0:30:45.76,0:30:48.08,Default,,0,0,0,,{\b1}So if we show memory timing next to the microcode,{\b}
Dialogue: 0,0:30:48.08,0:30:51.28,Default,,0,0,0,,{\b1}as well as the pseudocode version of the load instruction which is easier to read,{\b}
Dialogue: 0,0:30:51.28,0:30:55.36,Default,,0,0,0,,{\b1}we can see it loads the value from memory into G copies it into B{\b}
Dialogue: 0,0:30:55.36,0:30:57.00,Default,,0,0,0,,{\b1}and then copies it into A.{\b}
Dialogue: 0,0:30:57.04,0:30:59.04,Default,,0,0,0,,{\b1}More interesting is the exchange instruction.{\b}
Dialogue: 0,0:30:59.04,0:31:04.88,Default,,0,0,0,,{\b1}It saves A to B, reads memory into G, copies the result into A,{\b}
Dialogue: 0,0:31:04.88,0:31:09.60,Default,,0,0,0,,{\b1}copies the old value into G, and stores that G into memory.{\b}
Dialogue: 0,0:31:09.60,0:31:14.16,Default,,0,0,0,,{\b1}Division for example takes several MCT and it's micro program is way more complex.{\b}
Dialogue: 0,0:31:14.16,0:31:17.52,Default,,0,0,0,,{\b1}But there are more micro programs than the ones for the machine instructions.{\b}
Dialogue: 0,0:31:17.52,0:31:20.32,Default,,0,0,0,,{\b1}Since there is only a single adding unit in the whole computer,{\b}
Dialogue: 0,0:31:20.32,0:31:24.96,Default,,0,0,0,,{\b1}incrementing and decrementing the counters is done by converting the pulses into special instructions{\b}
Dialogue: 0,0:31:24.96,0:31:28.08,Default,,0,0,0,,{\b1}that get injected into the instruction stream.{\b}
Dialogue: 0,0:31:28.08,0:31:32.16,Default,,0,0,0,,{\b1}There are 14 of these so-called unprogrammed sequences with their own micro programs.{\b}
Dialogue: 0,0:31:32.16,0:31:36.08,Default,,0,0,0,,{\b1}Some counter shift, some are for interacting with debugging hardware,{\b}
Dialogue: 0,0:31:36.08,0:31:41.56,Default,,0,0,0,,{\b1}and these two control the interrupt and reset sequences.{\b}
Dialogue: 0,0:31:41.56,0:31:46.52,Default,,0,0,0,,{\b1}The complete schematics are publicly available and fit on just 49 sheets.{\b}
Dialogue: 0,0:31:46.52,0:31:51.28,Default,,0,0,0,,{\b1}The whole implementation only uses a single type of gate, a three input NAND gate.{\b}
Dialogue: 0,0:31:51.28,0:31:54.04,Default,,0,0,0,,{\b1}Two of these are contained in one integrated circuit,{\b}
Dialogue: 0,0:31:54.04,0:31:57.68,Default,,0,0,0,,{\b1}and about a hundred of these ICs form a logic module.{\b}
Dialogue: 0,0:32:00.04,0:32:04.80,Default,,0,0,0,,{\b1}24 logic modules and some interface and power supply modules are connected together in tray A,{\b}
Dialogue: 0,0:32:04.80,0:32:07.28,Default,,0,0,0,,{\b1}which also contains the I/O and debug connectors.{\b}
Dialogue: 0,0:32:07.28,0:32:11.80,Default,,0,0,0,,{\b1}Tray B contains various driver and amplifier modules, as well as RAM and ROM.{\b}
Dialogue: 0,0:32:11.80,0:32:16.08,Default,,0,0,0,,{\b1}RAM is implemented as magnetic core memory, which stores bits in magnetized toroids.{\b}
Dialogue: 0,0:32:16.08,0:32:18.80,Default,,0,0,0,,{\b1}Reading a bit clears it, so the memory sequencer makes sure{\b}
Dialogue: 0,0:32:18.80,0:32:22.28,Default,,0,0,0,,{\b1}to always write the value again after reading it.{\b}
Dialogue: 0,0:32:22.28,0:32:26.64,Default,,0,0,0,,{\b1}Without mass storage, like tape, the AGC has an unusually high amount of ROM.{\b}
Dialogue: 0,0:32:26.64,0:32:33.04,Default,,0,0,0,,{\b1}Core Rope Memory encodes bits by wires that either go through- or past a ferrite core.{\b}
Dialogue: 0,0:32:33.04,0:32:37.04,Default,,0,0,0,,{\b1}The 500,000 bits per computer were woven completely by hand.{\b}
Dialogue: 0,0:32:37.04,0:32:41.08,Default,,0,0,0,,{\b1}Trays A and B are put together like this and hermetically sealed,{\b}
Dialogue: 0,0:32:41.08,0:32:43.72,Default,,0,0,0,,{\b1}making for a rather compact computer.{\b}
Dialogue: 0,0:32:43.72,0:32:47.52,Default,,0,0,0,,{\b1}This is its orientation when installed on the spacecraft,{\b}
Dialogue: 0,0:32:47.52,0:32:52.48,Default,,0,0,0,,{\b1}with the six ROM modules accessible so they could in theory be replaced during the mission.{\b}
Dialogue: 0,0:32:52.48,0:32:54.52,Default,,0,0,0,,{\b1}And that was the hardware part.{\b}
Dialogue: 0,0:32:54.52,0:33:00.68,Default,,0,0,0,,{\b1}*applause* C: Next let's look at the devices.{\b}
Dialogue: 0,0:33:00.68,0:33:04.60,Default,,0,0,0,,{\b1}*applause*{\b}
Dialogue: 0,0:33:04.60,0:33:08.08,Default,,0,0,0,,{\b1}Let's look at the devices connected to the computer.{\b}
Dialogue: 0,0:33:08.08,0:33:12.28,Default,,0,0,0,,{\b1}We will look at the core devices that allow the Apollo guidance computer to maintain the state vector,{\b}
Dialogue: 0,0:33:12.28,0:33:15.00,Default,,0,0,0,,{\b1}some quite special devices you don't see on many other computers,{\b}
Dialogue: 0,0:33:15.00,0:33:18.84,Default,,0,0,0,,{\b1}and the peripherals used for communication with astronauts and Mission Control.{\b}
Dialogue: 0,0:33:18.84,0:33:22.96,Default,,0,0,0,,{\b1}The gyroscope is the core peripheral that the Apollo guidance computer was originally built around.{\b}
Dialogue: 0,0:33:22.96,0:33:27.52,Default,,0,0,0,,{\b1}The Apollo Guidance Computer rotates it into a certain base position with the CDU command counters,{\b}
Dialogue: 0,0:33:27.52,0:33:30.64,Default,,0,0,0,,{\b1}and then the gyro detects rotation around the three axes of the spacecraft{\b}
Dialogue: 0,0:33:30.64,0:33:32.56,Default,,0,0,0,,{\b1}that can be read from the CDU counters.{\b}
Dialogue: 0,0:33:32.56,0:33:37.84,Default,,0,0,0,,{\b1}Using the gyroscope, the spacecraft always knows it's attitude, that is its orientation in space.{\b}
Dialogue: 0,0:33:37.84,0:33:40.84,Default,,0,0,0,,{\b1}The accelerometer adjust acceleration forces on the three axis.{\b}
Dialogue: 0,0:33:40.84,0:33:44.52,Default,,0,0,0,,{\b1}The three values can be read from the PIPA counters.{\b}
Dialogue: 0,0:33:44.52,0:33:49.24,Default,,0,0,0,,{\b1}The optics on the command module are used to measure the relative position to the celestial bodies.{\b}
Dialogue: 0,0:33:49.24,0:33:52.20,Default,,0,0,0,,{\b1}The computer uses the OPT command counters to move the optics{\b}
Dialogue: 0,0:33:52.20,0:33:55.44,Default,,0,0,0,,{\b1}to point towards the general direction of a star, and will read in{\b}
Dialogue: 0,0:33:55.44,0:33:58.08,Default,,0,0,0,,{\b1}the astronauts fine-tuning through the OPT counters.{\b}
Dialogue: 0,0:33:58.08,0:34:00.64,Default,,0,0,0,,{\b1}The landing radar sits at the bottom of the lunar module and{\b}
Dialogue: 0,0:34:00.64,0:34:02.16,Default,,0,0,0,,{\b1}measures the distance to the ground.{\b}
Dialogue: 0,0:34:02.16,0:34:05.20,Default,,0,0,0,,{\b1}The RADARUPT interrupt will be triggered whenever a new measurement is available,{\b}
Dialogue: 0,0:34:05.20,0:34:08.12,Default,,0,0,0,,{\b1}and the RNRAD counter contains the new value.{\b}
Dialogue: 0,0:34:08.12,0:34:13.00,Default,,0,0,0,,{\b1}Lunar module's rendezvous radar measures the distance of the command and service module during rendezvous.{\b}
Dialogue: 0,0:34:13.00,0:34:18.20,Default,,0,0,0,,{\b1}After setting the two angles and the CDUT and CDUS counters to point it towards the two other spacecraft,{\b}
Dialogue: 0,0:34:18.20,0:34:21.92,Default,,0,0,0,,{\b1}it will automatically track it and cause RADARUPT interrupts when new data is available,{\b}
Dialogue: 0,0:34:21.92,0:34:24.60,Default,,0,0,0,,{\b1}which can be read from the RNRAD counters.{\b}
Dialogue: 0,0:34:24.60,0:34:28.88,Default,,0,0,0,,{\b1}The command module, the service module, and the lunar module all contain reaction control system,{\b}
Dialogue: 0,0:34:28.88,0:34:33.04,Default,,0,0,0,,{\b1}RCS, jets that emit small bursts for holding or charging the attitude.{\b}
Dialogue: 0,0:34:33.04,0:34:35.68,Default,,0,0,0,,{\b1}On lunar module, there's one bit for each of the sixteen jets.{\b}
Dialogue: 0,0:34:35.68,0:34:37.72,Default,,0,0,0,,{\b1}Setting a bit to one will make the jet fire.{\b}
Dialogue: 0,0:34:37.72,0:34:44.20,Default,,0,0,0,,{\b1}The system software uses a dedicated timer, TIME6, and it's interrupt T6RUPT for timing the pulses.{\b}
Dialogue: 0,0:34:44.20,0:34:46.44,Default,,0,0,0,,{\b1}The user interface is provided by the so called DSKY{\b}
Dialogue: 0,0:34:46.44,0:34:48.36,Default,,0,0,0,,{\b1}which stands for display and keyboard.{\b}
Dialogue: 0,0:34:48.36,0:34:51.88,Default,,0,0,0,,{\b1}It has 19 keys, 15 lamps, and several numeric output lines.{\b}
Dialogue: 0,0:34:51.88,0:34:56.40,Default,,0,0,0,,{\b1}Keys generate the KEYRUPT interrupts and the key number can be read from the KEYIN I/O channel.{\b}
Dialogue: 0,0:34:56.40,0:34:59.64,Default,,0,0,0,,{\b1}The numeric display is driven by the OUT O channel.{\b}
Dialogue: 0,0:34:59.64,0:35:04.08,Default,,0,0,0,,{\b1}There is bidirectional digital radio communication and S-band between Mission Control and each spacecraft{\b}
Dialogue: 0,0:35:04.08,0:35:07.44,Default,,0,0,0,,{\b1}at a selectable speed of 1.9 or 51 kbit/s{\b}
Dialogue: 0,0:35:07.44,0:35:11.88,Default,,0,0,0,,{\b1}Data words from Mission Control show up in the INLINK counter and trigger interrupt UPRUPT.{\b}
Dialogue: 0,0:35:11.88,0:35:15.20,Default,,0,0,0,,{\b1}Data words to be sent are stored in the I/O channel DNTM1{\b}
Dialogue: 0,0:35:15.20,0:35:17.32,Default,,0,0,0,,{\b1}and the DOWNRUPT interrupt will signal the program{\b}
Dialogue: 0,0:35:17.32,0:35:20.16,Default,,0,0,0,,{\b1}when it can load the register with the next word.{\b}
Dialogue: 0,0:35:20.16,0:35:23.56,Default,,0,0,0,,{\b1}These were some of the interesting peripherals.{\b}
Dialogue: 0,0:35:25.08,0:35:29.20,Default,,0,0,0,,{\b1}M: The AGC system, the AGC system software{\b}
Dialogue: 0,0:35:29.20,0:35:32.24,Default,,0,0,0,,{\b1}makes it a priority based cooperative - but also pre-emptive -{\b}
Dialogue: 0,0:35:32.24,0:35:36.12,Default,,0,0,0,,{\b1}real-time interactive fault tolerant computer with virtual machine support.{\b}
Dialogue: 0,0:35:36.12,0:35:40.40,Default,,0,0,0,,{\b1}The topics we'll talk about are multitasking, the interpreter, device drivers,{\b}
Dialogue: 0,0:35:40.40,0:35:44.84,Default,,0,0,0,,{\b1}and the waitlist, as well as the user interface, and mechanisms for fault recovery.{\b}
Dialogue: 0,0:35:44.84,0:35:46.96,Default,,0,0,0,,{\b1}The AGC has many things to do.{\b}
Dialogue: 0,0:35:46.96,0:35:50.08,Default,,0,0,0,,{\b1}It does mathematical calculations that can take several seconds,{\b}
Dialogue: 0,0:35:50.08,0:35:51.72,Default,,0,0,0,,{\b1}and it does I/O with its devices;{\b}
Dialogue: 0,0:35:51.72,0:35:56.00,Default,,0,0,0,,{\b1}it services interrupts when a device wants the computers attention, for example a key press.{\b}
Dialogue: 0,0:35:56.00,0:35:59.92,Default,,0,0,0,,{\b1}It does regular servicing of devices, like updating the display,{\b}
Dialogue: 0,0:35:59.92,0:36:05.84,Default,,0,0,0,,{\b1}and it supports real-time control, like flashing a lamp or firing boosters at exactly the right time.{\b}
Dialogue: 0,0:36:05.84,0:36:09.52,Default,,0,0,0,,{\b1}There's only a single CPU, so it must switch between the different tasks.{\b}
Dialogue: 0,0:36:09.52,0:36:14.40,Default,,0,0,0,,{\b1}Batch processing multitasking computers work on long-running jobs one after the other,{\b}
Dialogue: 0,0:36:14.40,0:36:16.44,Default,,0,0,0,,{\b1}but if some jobs have higher priorities{\b}
Dialogue: 0,0:36:16.44,0:36:19.44,Default,,0,0,0,,{\b1}it makes more sense to run a job for only - say 20 milliseconds -{\b}
Dialogue: 0,0:36:19.44,0:36:23.12,Default,,0,0,0,,{\b1}then check the job queues and keep running the highest priority job in the queue{\b}
Dialogue: 0,0:36:23.12,0:36:26.60,Default,,0,0,0,,{\b1}until it terminates and is removed from the queue,{\b}
Dialogue: 0,0:36:26.60,0:36:29.32,Default,,0,0,0,,{\b1}then keep picking the highest priority job.{\b}
Dialogue: 0,0:36:29.32,0:36:32.28,Default,,0,0,0,,{\b1}Jobs have to manually check at least every 20 milliseconds{\b}
Dialogue: 0,0:36:32.28,0:36:36.68,Default,,0,0,0,,{\b1}whether there's a higher priority job in the queue by doing doing a so-called 'yield',{\b}
Dialogue: 0,0:36:36.68,0:36:41.64,Default,,0,0,0,,{\b1}which makes the AGC a priority scheduled cooperative multitasking computer.{\b}
Dialogue: 0,0:36:41.64,0:36:44.48,Default,,0,0,0,,{\b1}A job is described by 12 word data structure in memory,{\b}
Dialogue: 0,0:36:44.48,0:36:46.88,Default,,0,0,0,,{\b1}that contains the PC and both bank's register{\b}
Dialogue: 0,0:36:46.88,0:36:49.64,Default,,0,0,0,,{\b1}that point to where the job will start or continue running,{\b}
Dialogue: 0,0:36:49.64,0:36:55.80,Default,,0,0,0,,{\b1}as well as a word with a disabled flag in the sign bit and a 5 bit priority.{\b}
Dialogue: 0,0:36:55.80,0:36:58.04,Default,,0,0,0,,{\b1}The core set consists of seven job entries.{\b}
Dialogue: 0,0:36:58.04,0:37:00.80,Default,,0,0,0,,{\b1}Minus zero in the priority word means that the entry is empty.{\b}
Dialogue: 0,0:37:00.80,0:37:03.12,Default,,0,0,0,,{\b1}Job zero is always the currently running one.{\b}
Dialogue: 0,0:37:03.12,0:37:05.92,Default,,0,0,0,,{\b1}When a new job gets created with a higher priority,{\b}
Dialogue: 0,0:37:05.92,0:37:10.32,Default,,0,0,0,,{\b1}the yield operation will exchange the 12 words so that new job is job zero.{\b}
Dialogue: 0,0:37:10.32,0:37:14.20,Default,,0,0,0,,{\b1}Negating the priority will put a job to sleep, so yield won't switch to it again.{\b}
Dialogue: 0,0:37:14.20,0:37:16.52,Default,,0,0,0,,{\b1}Negating it again will wake it up.{\b}
Dialogue: 0,0:37:16.52,0:37:20.52,Default,,0,0,0,,{\b1}The first eight words in the job entry can be used for local storage for the job.{\b}
Dialogue: 0,0:37:20.52,0:37:22.36,Default,,0,0,0,,{\b1}Since it's always job zero that is running,{\b}
Dialogue: 0,0:37:22.36,0:37:26.52,Default,,0,0,0,,{\b1}these words are always conveniently located at the same addresses in memory.{\b}
Dialogue: 0,0:37:26.52,0:37:31.56,Default,,0,0,0,,{\b1}The executive has a set of subroutines that control the job data structures.{\b}
Dialogue: 0,0:37:31.56,0:37:36.64,Default,,0,0,0,,{\b1}You can create a new job pointed to by a pair of PC and BB registers of a given priority,{\b}
Dialogue: 0,0:37:36.64,0:37:41.44,Default,,0,0,0,,{\b1}change the priority of the current job, put the current job to sleep, wake up a given job,{\b}
Dialogue: 0,0:37:41.44,0:37:43.64,Default,,0,0,0,,{\b1}and terminate the current job.{\b}
Dialogue: 0,0:37:43.64,0:37:49.16,Default,,0,0,0,,{\b1}Yield is not an executive function, but a two instruction sequence that checks the new job variable{\b}
Dialogue: 0,0:37:49.16,0:37:52.52,Default,,0,0,0,,{\b1}in which the executive always holds the idea of the highest priority job.{\b}
Dialogue: 0,0:37:52.52,0:37:55.44,Default,,0,0,0,,{\b1}If job zero is the highest priority job there's nothing to do.{\b}
Dialogue: 0,0:37:55.44,0:38:00.64,Default,,0,0,0,,{\b1}If there is a higher priority job, it calls the change job subroutine which switches to that job.{\b}
Dialogue: 0,0:38:00.64,0:38:04.40,Default,,0,0,0,,{\b1}NEWJOB isn't just a variable in memory, but also the watchdog word.{\b}
Dialogue: 0,0:38:04.40,0:38:07.72,Default,,0,0,0,,{\b1}If it isn't accessed regularly, that is cooperative multitasking is stuck,{\b}
Dialogue: 0,0:38:07.72,0:38:10.76,Default,,0,0,0,,{\b1}the hardware will automatically reset itself.{\b}
Dialogue: 0,0:38:10.76,0:38:13.84,Default,,0,0,0,,{\b1}A lot of the code in the AGC does scientific calculations,{\b}
Dialogue: 0,0:38:13.84,0:38:17.80,Default,,0,0,0,,{\b1}calculating for example just the sum of two products of a scalar and a vector{\b}
Dialogue: 0,0:38:17.80,0:38:20.68,Default,,0,0,0,,{\b1}would require hundreds of instructions in AGC machine code.{\b}
Dialogue: 0,0:38:20.68,0:38:23.32,Default,,0,0,0,,{\b1}There is library code that provides all kinds of operations{\b}
Dialogue: 0,0:38:23.32,0:38:28.48,Default,,0,0,0,,{\b1}on single, double, or triple precision fixed point values, vectors, and matrices.{\b}
Dialogue: 0,0:38:28.48,0:38:31.92,Default,,0,0,0,,{\b1}It also provides a software multi- purpose accumulator, MPAC,{\b}
Dialogue: 0,0:38:31.92,0:38:34.96,Default,,0,0,0,,{\b1}which can hold a double, triple, or a vector, depending on the mode flag.{\b}
Dialogue: 0,0:38:34.96,0:38:40.20,Default,,0,0,0,,{\b1}In C-like pseudo code we would load the vector into the MPAC, multiply it with a scalar, save it,{\b}
Dialogue: 0,0:38:40.20,0:38:44.52,Default,,0,0,0,,{\b1}do the other multiplication, and add the result to the saved value.{\b}
Dialogue: 0,0:38:44.52,0:38:50.48,Default,,0,0,0,,{\b1}Formulas like this one need to store intermediate results, so a thirty-eight word stack is provided.{\b}
Dialogue: 0,0:38:50.48,0:38:53.92,Default,,0,0,0,,{\b1}If a job uses math code, the MPAC, the MODE field, and the stack pointer{\b}
Dialogue: 0,0:38:53.92,0:38:56.68,Default,,0,0,0,,{\b1}will be stored in the remaining fields of the Core Set Entry.{\b}
Dialogue: 0,0:38:56.68,0:38:59.84,Default,,0,0,0,,{\b1}The stack will be part of a data tructure called VAC,{\b}
Dialogue: 0,0:38:59.84,0:39:02.12,Default,,0,0,0,,{\b1}which will be pointed to by the Core Set Entry.{\b}
Dialogue: 0,0:39:02.12,0:39:07.84,Default,,0,0,0,,{\b1}A job can be created with, or without a VAC, depending on which subroutine it is created with.{\b}
Dialogue: 0,0:39:07.84,0:39:11.84,Default,,0,0,0,,{\b1}The machine code version of the example code would still be very verbose,{\b}
Dialogue: 0,0:39:11.84,0:39:13.84,Default,,0,0,0,,{\b1}with many function calls passing pointers.{\b}
Dialogue: 0,0:39:13.84,0:39:17.08,Default,,0,0,0,,{\b1}The designers of the AGC software decided to create a new and compact language{\b}
Dialogue: 0,0:39:17.08,0:39:20.44,Default,,0,0,0,,{\b1}that will be interpreted at runtime, a virtual machine.{\b}
Dialogue: 0,0:39:20.44,0:39:25.56,Default,,0,0,0,,{\b1}The interpretive language is turing-complete and in addition to the MPAC it has two index registers,{\b}
Dialogue: 0,0:39:25.56,0:39:28.32,Default,,0,0,0,,{\b1}two step registers, and its own link register.{\b}
Dialogue: 0,0:39:28.32,0:39:31.48,Default,,0,0,0,,{\b1}The encoding manages to fit two seven bit op codes in one word,{\b}
Dialogue: 0,0:39:31.48,0:39:37.48,Default,,0,0,0,,{\b1}which allows for 128 op codes and explains why there is a 'shift right by seven' function in the CPU.{\b}
Dialogue: 0,0:39:37.48,0:39:42.00,Default,,0,0,0,,{\b1}The two operands are stored in the following two words, allowing 14 bit addresses.{\b}
Dialogue: 0,0:39:42.00,0:39:47.28,Default,,0,0,0,,{\b1}14 bit addresses means interpretive code doesn't have to work this complicated memory layout anymore.{\b}
Dialogue: 0,0:39:47.28,0:39:50.40,Default,,0,0,0,,{\b1}It allows addressing about half of the ROM at the same time.{\b}
Dialogue: 0,0:39:50.40,0:39:53.08,Default,,0,0,0,,{\b1}At the lowest kiloword of each half, RAM is visible,{\b}
Dialogue: 0,0:39:53.08,0:39:57.12,Default,,0,0,0,,{\b1}so interpretive code can pick between one of these two memory layouts.{\b}
Dialogue: 0,0:39:57.12,0:40:01.00,Default,,0,0,0,,{\b1}This is the complete instruction set, regular machine code, interpretive code{\b}
Dialogue: 0,0:40:01.00,0:40:02.40,Default,,0,0,0,,{\b1}can be mixed and matched inside the job.{\b}
Dialogue: 0,0:40:02.40,0:40:06.44,Default,,0,0,0,,{\b1}The exit instruction will continue executing regular machine code at the next address,{\b}
Dialogue: 0,0:40:06.44,0:40:10.24,Default,,0,0,0,,{\b1}and CALL INTPRET will similarly switch to interpreter mode.{\b}
Dialogue: 0,0:40:10.24,0:40:15.00,Default,,0,0,0,,{\b1}In addition to long- running math tasks, the system software also supports device drivers.{\b}
Dialogue: 0,0:40:15.00,0:40:18.84,Default,,0,0,0,,{\b1}When a device needs the computers attention, for example in case of a DSKY key press,{\b}
Dialogue: 0,0:40:18.84,0:40:20.36,Default,,0,0,0,,{\b1}it causes an interrupt.{\b}
Dialogue: 0,0:40:20.36,0:40:22.04,Default,,0,0,0,,{\b1}The current job will be interrupted,{\b}
Dialogue: 0,0:40:22.04,0:40:25.08,Default,,0,0,0,,{\b1}and the interrupt handler will read the device data and return as quickly as possible.{\b}
Dialogue: 0,0:40:25.08,0:40:28.84,Default,,0,0,0,,{\b1}If there's more to do, it can schedule a job for later.{\b}
Dialogue: 0,0:40:28.84,0:40:31.40,Default,,0,0,0,,{\b1}Some devices need to be serviced regularly.{\b}
Dialogue: 0,0:40:31.40,0:40:39.48,Default,,0,0,0,,{\b1}A 120 microsecond timer causes interrupts that read data from and write data to certain devices.{\b}
Dialogue: 0,0:40:39.48,0:40:43.36,Default,,0,0,0,,{\b1}The numeric display of the DSKY for example only allows updating a few digits at a time,{\b}
Dialogue: 0,0:40:43.36,0:40:47.92,Default,,0,0,0,,{\b1}so its driver is triggered by the 120 microsecond timer.{\b}
Dialogue: 0,0:40:47.92,0:40:50.44,Default,,0,0,0,,{\b1}The timer interrupt cycles through eight phases,{\b}
Dialogue: 0,0:40:50.44,0:40:56.56,Default,,0,0,0,,{\b1}which distributes the device drivers across time to minimize the duration of one interrupt handler.{\b}
Dialogue: 0,0:40:56.56,0:40:59.04,Default,,0,0,0,,{\b1}Some devices need to be driven at exact times.{\b}
Dialogue: 0,0:40:59.04,0:41:02.20,Default,,0,0,0,,{\b1}If for example a job decides that it needs to flash a lamp twice,{\b}
Dialogue: 0,0:41:02.20,0:41:05.96,Default,,0,0,0,,{\b1}it would turn it on immediately and schedule three waitlist tasks{\b}
Dialogue: 0,0:41:05.96,0:41:08.40,Default,,0,0,0,,{\b1}in the future at specific times.{\b}
Dialogue: 0,0:41:08.40,0:41:12.24,Default,,0,0,0,,{\b1}The first one will turn the lamp off, the second one will turn it on again{\b}
Dialogue: 0,0:41:12.24,0:41:15.64,Default,,0,0,0,,{\b1}and the third one will turn it off again.{\b}
Dialogue: 0,0:41:15.64,0:41:20.60,Default,,0,0,0,,{\b1}The sorted time deltas of the waitlist tasks are stored in the data structure LST1,{\b}
Dialogue: 0,0:41:20.60,0:41:24.36,Default,,0,0,0,,{\b1}with the first entry always currently counting down in a timer register,{\b}
Dialogue: 0,0:41:24.36,0:41:28.32,Default,,0,0,0,,{\b1}and LST2 contains a pair of PC and BB for each task.{\b}
Dialogue: 0,0:41:28.32,0:41:32.68,Default,,0,0,0,,{\b1}There are subroutines to create a new task and end the current task.{\b}
Dialogue: 0,0:41:32.68,0:41:36.56,Default,,0,0,0,,{\b1}The timer that controls the wait list has a granularity of 10 milliseconds.{\b}
Dialogue: 0,0:41:36.56,0:41:40.04,Default,,0,0,0,,{\b1}Other timers can fire at the same rate, but are offset,{\b}
Dialogue: 0,0:41:40.04,0:41:42.60,Default,,0,0,0,,{\b1}and the work triggered by them is designed to be short enough{\b}
Dialogue: 0,0:41:42.60,0:41:45.72,Default,,0,0,0,,{\b1}to never overlap with the next potential timer triggered work.{\b}
Dialogue: 0,0:41:45.72,0:41:49.44,Default,,0,0,0,,{\b1}This is complicated by device interrupts, which can come in at any time.{\b}
Dialogue: 0,0:41:49.44,0:41:51.60,Default,,0,0,0,,{\b1}The duration of an interrupt handler causes latency{\b}
Dialogue: 0,0:41:51.60,0:41:56.76,Default,,0,0,0,,{\b1}and the maximum duration will reduce the allowed time for the timer handlers.{\b}
Dialogue: 0,0:41:56.76,0:41:59.44,Default,,0,0,0,,{\b1}The core system software makes no guarantees about the timing,{\b}
Dialogue: 0,0:41:59.44,0:42:04.12,Default,,0,0,0,,{\b1}it's all up to components to... it's up to all the components to cooperate{\b}
Dialogue: 0,0:42:04.12,0:42:07.72,Default,,0,0,0,,{\b1}so the real time goal can be met.{\b}
Dialogue: 0,0:42:07.72,0:42:10.48,Default,,0,0,0,,{\b1}The PINBALL program is the shell of the AGC.{\b}
Dialogue: 0,0:42:10.48,0:42:14.00,Default,,0,0,0,,{\b1}Key press interrupts schedule a job, that collects the digits for the command{\b}
Dialogue: 0,0:42:14.00,0:42:17.52,Default,,0,0,0,,{\b1}and updates an in-memory representation of what should be on the display.{\b}
Dialogue: 0,0:42:17.52,0:42:21.92,Default,,0,0,0,,{\b1}The 120 millisecond timer triggers the display update code.{\b}
Dialogue: 0,0:42:21.92,0:42:25.80,Default,,0,0,0,,{\b1}When the command is complete PINBALL schedules a new job.{\b}
Dialogue: 0,0:42:25.80,0:42:31.64,Default,,0,0,0,,{\b1}Mission Control has a remote shell in form of a DSKY connected through the s-band radio.{\b}
Dialogue: 0,0:42:31.64,0:42:36.04,Default,,0,0,0,,{\b1}System software that supports human life has to be able to communicate malfunctions{\b}
Dialogue: 0,0:42:36.04,0:42:38.04,Default,,0,0,0,,{\b1}and be able to recover from them.{\b}
Dialogue: 0,0:42:38.04,0:42:41.04,Default,,0,0,0,,{\b1}The alarm subroutine takes the following word from the instruction stream,{\b}
Dialogue: 0,0:42:41.04,0:42:43.40,Default,,0,0,0,,{\b1}displays it, and illuminates the prog light.{\b}
Dialogue: 0,0:42:43.40,0:42:46.56,Default,,0,0,0,,{\b1}This should be interpreted as a warning or an error message.{\b}
Dialogue: 0,0:42:46.56,0:42:51.32,Default,,0,0,0,,{\b1}The AGC software is full of validity and plausibility checks that help to find bugs during development{\b}
Dialogue: 0,0:42:51.32,0:42:54.68,Default,,0,0,0,,{\b1}and help better understanding potential issues during the mission.{\b}
Dialogue: 0,0:42:54.68,0:42:58.56,Default,,0,0,0,,{\b1}Some kinds of failures triggered by various hardware watchdogs or by code{\b}
Dialogue: 0,0:42:58.56,0:43:01.16,Default,,0,0,0,,{\b1}make it impossible for normal operations to continue.{\b}
Dialogue: 0,0:43:01.16,0:43:04.48,Default,,0,0,0,,{\b1}In addition to showing the error code, they also cause a hardware reset{\b}
Dialogue: 0,0:43:04.48,0:43:07.76,Default,,0,0,0,,{\b1}but the system software also offers recovery services.{\b}
Dialogue: 0,0:43:07.76,0:43:10.96,Default,,0,0,0,,{\b1}A job can have recovery code for its different phases.{\b}
Dialogue: 0,0:43:10.96,0:43:13.80,Default,,0,0,0,,{\b1}During execution it sets the respective phase{\b}
Dialogue: 0,0:43:13.80,0:43:19.76,Default,,0,0,0,,{\b1}and if an abort happens in any job or task, the currently set up recovery routine gets executed{\b}
Dialogue: 0,0:43:19.76,0:43:24.76,Default,,0,0,0,,{\b1}which could for example clean up and try the work again, or skip to a different phase,{\b}
Dialogue: 0,0:43:24.76,0:43:27.12,Default,,0,0,0,,{\b1}or cancel the job altogether.{\b}
Dialogue: 0,0:43:27.12,0:43:31.24,Default,,0,0,0,,{\b1}The phase change call sets the current phase for a job in the recovery table,{\b}
Dialogue: 0,0:43:31.24,0:43:33.56,Default,,0,0,0,,{\b1}for example phase 5 for job 4.{\b}
Dialogue: 0,0:43:33.56,0:43:39.24,Default,,0,0,0,,{\b1}Each phase is associated with a descriptor of a task or a job with or without a VAC.{\b}
Dialogue: 0,0:43:39.24,0:43:42.80,Default,,0,0,0,,{\b1}So during normal execution with several jobs and tasks scheduled,{\b}
Dialogue: 0,0:43:42.80,0:43:46.04,Default,,0,0,0,,{\b1}if an abort happens, the core set and wait list are cleared,{\b}
Dialogue: 0,0:43:46.04,0:43:48.32,Default,,0,0,0,,{\b1}the contents of the recovery table are activated,{\b}
Dialogue: 0,0:43:48.32,0:43:52.20,Default,,0,0,0,,{\b1}scheduling tasks and jobs for all jobs that set up recovery code.{\b}
Dialogue: 0,0:43:52.20,0:43:56.24,Default,,0,0,0,,{\b1}Sometimes a failure though, like corrupted memory, are not recoverable.{\b}
Dialogue: 0,0:43:56.24,0:44:02.08,Default,,0,0,0,,{\b1}They cause a fresh start, meaning a full initialization of the system without running any recovery code.{\b}
Dialogue: 0,0:44:02.08,0:44:05.04,Default,,0,0,0,,{\b1}And that was the AGC system software.{\b}
Dialogue: 0,0:44:07.64,0:44:12.00,Default,,0,0,0,,{\b1}C: As we now have a good overview on architecture, hardware, peripherals, and system software{\b}
Dialogue: 0,0:44:12.00,0:44:16.72,Default,,0,0,0,,{\b1}of the Apollo Guidance Computer, it's time briefly view on it's practical use on a mission to the moon.{\b}
Dialogue: 0,0:44:16.72,0:44:22.28,Default,,0,0,0,,{\b1}We will look at the user interface, the launch sequence, and, once in orbit, the attitude in orbit determination.{\b}
Dialogue: 0,0:44:22.28,0:44:24.76,Default,,0,0,0,,{\b1}Further we will understand how the digital autopilot works,{\b}
Dialogue: 0,0:44:24.76,0:44:27.36,Default,,0,0,0,,{\b1}and how powered flight is being performed.{\b}
Dialogue: 0,0:44:27.36,0:44:31.76,Default,,0,0,0,,{\b1}As soon as we've reached the moon, we look at the lunar landing and the lunar rendezvous after liftoff{\b}
Dialogue: 0,0:44:31.76,0:44:34.36,Default,,0,0,0,,{\b1}and finally re-entry into Earth's atmosphere.{\b}
Dialogue: 0,0:44:34.36,0:44:38.00,Default,,0,0,0,,{\b1}Last but not least contingencies, or as we like to call them, "fun issues".{\b}
Dialogue: 0,0:44:38.00,0:44:40.00,Default,,0,0,0,,{\b1}Let's start with the user interface.{\b}
Dialogue: 0,0:44:40.00,0:44:43.68,Default,,0,0,0,,{\b1}It is like any command-line interface but since there are only numbers and no letters,{\b}
Dialogue: 0,0:44:43.68,0:44:45.28,Default,,0,0,0,,{\b1}key words have to be encoded.{\b}
Dialogue: 0,0:44:45.28,0:44:48.68,Default,,0,0,0,,{\b1}On a normal system you might say 'display memory', 'enter'.{\b}
Dialogue: 0,0:44:48.68,0:44:50.88,Default,,0,0,0,,{\b1}Display is the verb, memory is the noun.{\b}
Dialogue: 0,0:44:50.88,0:44:55.08,Default,,0,0,0,,{\b1}On the Apollo guidance computer you say verb '0 1', which means 'display',{\b}
Dialogue: 0,0:44:55.08,0:44:57.60,Default,,0,0,0,,{\b1}noun '0 2' - 'memory' - 'enter'.{\b}
Dialogue: 0,0:44:57.60,0:44:59.56,Default,,0,0,0,,{\b1}Subroutine asks for an argument.{\b}
Dialogue: 0,0:44:59.56,0:45:02.88,Default,,0,0,0,,{\b1}On a normal system it might display a prompt, you enter the number, press 'enter'.{\b}
Dialogue: 0,0:45:02.88,0:45:07.76,Default,,0,0,0,,{\b1}On the Apollo Guidance Computer, flashing 'verb' and 'noun' indicate that is waiting for input.{\b}
Dialogue: 0,0:45:07.76,0:45:12.60,Default,,0,0,0,,{\b1}So you type '2 5', 'enter'; an octal address, and the Apollo Guidance Computer displays the result.{\b}
Dialogue: 0,0:45:12.60,0:45:15.56,Default,,0,0,0,,{\b1}The memory contents at the address octal '2 5'.{\b}
Dialogue: 0,0:45:15.56,0:45:20.32,Default,,0,0,0,,{\b1}The Apollo Guidance Computer uses the same concept of verb and noun when it proactively asks for input.{\b}
Dialogue: 0,0:45:20.32,0:45:23.60,Default,,0,0,0,,{\b1}Verb '6', noun '11' asks for the CSI ignition time.{\b}
Dialogue: 0,0:45:23.60,0:45:27.16,Default,,0,0,0,,{\b1}CSI meaning Coelliptic Sequence Initiation, we will come to that later.{\b}
Dialogue: 0,0:45:27.16,0:45:30.28,Default,,0,0,0,,{\b1}Special case is when the Apollo Guidance Computer asks a yes-or-no question.{\b}
Dialogue: 0,0:45:30.28,0:45:35.00,Default,,0,0,0,,{\b1}Verb 99 has the astronaut confirm engine ignition with a proceed key.{\b}
Dialogue: 0,0:45:35.00,0:45:38.00,Default,,0,0,0,,{\b1}The astronauts have a complete reference of all verbs and nouns on paper,{\b}
Dialogue: 0,0:45:38.00,0:45:41.16,Default,,0,0,0,,{\b1}as well as cue cards were the most important information.{\b}
Dialogue: 0,0:45:41.16,0:45:45.88,Default,,0,0,0,,{\b1}Let's now go through each of the phases of the mission, starting with a liftoff.{\b}
Dialogue: 0,0:45:45.88,0:45:51.00,Default,,0,0,0,,{\b1}So, we are on our way. The Apollo Guidance Computer is in passive monitoring mode.{\b}
Dialogue: 0,0:45:51.00,0:45:55.72,Default,,0,0,0,,{\b1}With the cutting of the umbilical cables, which you see right about ... now,{\b}
Dialogue: 0,0:45:55.72,0:45:57.16,Default,,0,0,0,,{\b1}it has started the mission clock.{\b}
Dialogue: 0,0:45:57.16,0:46:01.64,Default,,0,0,0,,{\b1}In case this trigger fails, one DSKY is always prepared with verb 75 and just waiting for 'enter'{\b}
Dialogue: 0,0:46:01.64,0:46:03.12,Default,,0,0,0,,{\b1}to manually start the mission timer.{\b}
Dialogue: 0,0:46:03.12,0:46:08.20,Default,,0,0,0,,{\b1}We can display the mission elapsed time at any time with verb 16, noun 65.{\b}
Dialogue: 0,0:46:08.20,0:46:13.08,Default,,0,0,0,,{\b1}During the flight with the SaturnV, the Apollo Guidance Computer is only performing passive monitoring of the flight.{\b}
Dialogue: 0,0:46:13.08,0:46:17.72,Default,,0,0,0,,{\b1}Control of the SaturnV is with its own launch vehicle digital computer, and the instrument unit ring.{\b}
Dialogue: 0,0:46:17.72,0:46:22.28,Default,,0,0,0,,{\b1}The DSKY automatically shows verb 16, noun 62, which is velocity in feet per second.{\b}
Dialogue: 0,0:46:22.28,0:46:26.20,Default,,0,0,0,,{\b1}Altitude change rate in feet per second, and altitude above pad and nautical miles.{\b}
Dialogue: 0,0:46:26.20,0:46:29.52,Default,,0,0,0,,{\b1}Note that the units and the position of the decimal point are implicit,{\b}
Dialogue: 0,0:46:29.52,0:46:32.20,Default,,0,0,0,,{\b1}and yes the whole system was working in metric internally{\b}
Dialogue: 0,0:46:32.20,0:46:39.32,Default,,0,0,0,,{\b1}but for the benefit of the American astronauts the display procedures converted everything to imperial units.{\b}
Dialogue: 0,0:46:39.32,0:46:42.40,Default,,0,0,0,,{\b1}*laughter and applause*{\b}
Dialogue: 0,0:46:42.40,0:46:44.72,Default,,0,0,0,,{\b1}In case of problems with the Saturn computer,{\b}
Dialogue: 0,0:46:44.72,0:46:47.56,Default,,0,0,0,,{\b1}the Apollo Guidance Computer can take over full control of the launch vehicle,{\b}
Dialogue: 0,0:46:47.56,0:46:52.48,Default,,0,0,0,,{\b1}in extreme cases astronauts could even steer the whole stack into orbit themselves with the hand controller.{\b}
Dialogue: 0,0:46:52.48,0:46:55.92,Default,,0,0,0,,{\b1}In case you ever wanted to fly... to manually control a 110 meter tall rocket{\b}
Dialogue: 0,0:46:55.92,0:46:59.24,Default,,0,0,0,,{\b1}with more than 30 million Newton of thrust, this is your chance.{\b}
Dialogue: 0,0:46:59.24,0:47:01.56,Default,,0,0,0,,{\b1}*laughter* In less than 12 minutes we've gone through{\b}
Dialogue: 0,0:47:01.56,0:47:04.56,Default,,0,0,0,,{\b1}the first and second stage and are using a small burn from the third stage{\b}
Dialogue: 0,0:47:04.56,0:47:09.20,Default,,0,0,0,,{\b1}to get us into a 185 kilometer orbit which circles the earth every 88 minutes.{\b}
Dialogue: 0,0:47:11.04,0:47:13.88,Default,,0,0,0,,{\b1}But how do we know where ... we are in the right orbit?{\b}
Dialogue: 0,0:47:13.88,0:47:17.88,Default,,0,0,0,,{\b1}Well the Apollo guidance computer, as well as Mission Control, are monitoring position and velocity,{\b}
Dialogue: 0,0:47:17.88,0:47:21.56,Default,,0,0,0,,{\b1}because to get where we want to be, we first need to know where we are.{\b}
Dialogue: 0,0:47:21.56,0:47:25.52,Default,,0,0,0,,{\b1}To be able to navigate in space, we need to maintain our three-dimensional position,{\b}
Dialogue: 0,0:47:25.52,0:47:28.40,Default,,0,0,0,,{\b1}and our three-dimensional velocity, the so-called state vector.{\b}
Dialogue: 0,0:47:28.40,0:47:30.36,Default,,0,0,0,,{\b1}Let's start with the determination of the position.{\b}
Dialogue: 0,0:47:30.36,0:47:33.04,Default,,0,0,0,,{\b1}For this we need a telescope and a space sextant.{\b}
Dialogue: 0,0:47:33.04,0:47:36.44,Default,,0,0,0,,{\b1}The space sextant is very similar to an 18th century nautical sextant.{\b}
Dialogue: 0,0:47:36.44,0:47:40.28,Default,,0,0,0,,{\b1}Position is determined by measuring the angle between the horizon and a celestial body.{\b}
Dialogue: 0,0:47:40.28,0:47:43.04,Default,,0,0,0,,{\b1}As an horizon we can either take that of Earth or Moon{\b}
Dialogue: 0,0:47:43.04,0:47:47.48,Default,,0,0,0,,{\b1}and celestial bodies - well we are in orbit, we are surrounded by them. So let's just pick one.{\b}
Dialogue: 0,0:47:47.48,0:47:50.88,Default,,0,0,0,,{\b1}Luckily the Apollo guidance computer already knows the position of 45 of them.{\b}
Dialogue: 0,0:47:50.88,0:47:54.32,Default,,0,0,0,,{\b1}The whole optics hardware and the command and service module can be moved{\b}
Dialogue: 0,0:47:54.32,0:47:56.08,Default,,0,0,0,,{\b1}to point in the general direction of Earth and moon.{\b}
Dialogue: 0,0:47:56.08,0:48:00.12,Default,,0,0,0,,{\b1}With the launch of program 52, we command the Apollo guidance computer to rotate the spacecraft{\b}
Dialogue: 0,0:48:00.12,0:48:05.08,Default,,0,0,0,,{\b1}to point one axis of the sextant, the so-called landmark line- of-sight, LLOS, to the nearest body,{\b}
Dialogue: 0,0:48:05.08,0:48:06.28,Default,,0,0,0,,{\b1}which is earth or moon.{\b}
Dialogue: 0,0:48:06.28,0:48:10.68,Default,,0,0,0,,{\b1}The astronaut then used the optics systems to exactly align the horizon to the LLOS.{\b}
Dialogue: 0,0:48:10.68,0:48:13.36,Default,,0,0,0,,{\b1}With the telescope the astronaut looks for one of the known stars,{\b}
Dialogue: 0,0:48:13.36,0:48:17.04,Default,,0,0,0,,{\b1}points the star line to it and lets the Apollo guidance computer read the trunnion and shaft angle.{\b}
Dialogue: 0,0:48:17.04,0:48:22.20,Default,,0,0,0,,{\b1}Repeating this one or more times in a different plane gives a three-dimensional position of the vehicle in space.{\b}
Dialogue: 0,0:48:22.20,0:48:26.00,Default,,0,0,0,,{\b1}In the lunar module on the other hand, the optics hardware was trimmed down for weight reduction.{\b}
Dialogue: 0,0:48:26.00,0:48:28.36,Default,,0,0,0,,{\b1}Any alignment requires rotation of the lunar module.{\b}
Dialogue: 0,0:48:28.36,0:48:32.24,Default,,0,0,0,,{\b1}This is mostly used to determine the landing site and support the rendezvous maneuvre.{\b}
Dialogue: 0,0:48:32.24,0:48:36.12,Default,,0,0,0,,{\b1}It even lacks the software to perform positioning in translunar space.{\b}
Dialogue: 0,0:48:36.12,0:48:38.60,Default,,0,0,0,,{\b1}As we are moving, our position changes all the time.{\b}
Dialogue: 0,0:48:38.60,0:48:41.20,Default,,0,0,0,,{\b1}But after 2 location fixes, as long as we're coasting,{\b}
Dialogue: 0,0:48:41.20,0:48:45.48,Default,,0,0,0,,{\b1}we are able to establish our speed and can determine future positions by dead reckoning.{\b}
Dialogue: 0,0:48:45.48,0:48:48.72,Default,,0,0,0,,{\b1}As position and velocity are known, future positions can be extrapolated.{\b}
Dialogue: 0,0:48:48.72,0:48:51.56,Default,,0,0,0,,{\b1}Unfortunately the near extrapolation doesn't work in space{\b}
Dialogue: 0,0:48:51.56,0:48:54.00,Default,,0,0,0,,{\b1}as we have gravitational forces which bend our path.{\b}
Dialogue: 0,0:48:54.00,0:48:57.48,Default,,0,0,0,,{\b1}Thankfully there are two mathematical models implemented in the Apollo Guidance Computer:{\b}
Dialogue: 0,0:48:57.48,0:49:00.36,Default,,0,0,0,,{\b1}Conic integration based on the Keplerian orbit model on the left,{\b}
Dialogue: 0,0:49:00.36,0:49:04.48,Default,,0,0,0,,{\b1}which assumes one perfectly round gravitational body influencing our flight path,{\b}
Dialogue: 0,0:49:04.48,0:49:10.16,Default,,0,0,0,,{\b1}and Encke's integrating method for perturbation considering multiple bodies with gravitational imbalances.{\b}
Dialogue: 0,0:49:10.16,0:49:12.76,Default,,0,0,0,,{\b1}I think this helps to understand why we need a computer on board{\b}
Dialogue: 0,0:49:12.76,0:49:15.16,Default,,0,0,0,,{\b1}and can't just fly to the moon with a hand controller.{\b}
Dialogue: 0,0:49:15.16,0:49:18.36,Default,,0,0,0,,{\b1}As we see, the Apollo spacecraft was perfectly capable to fly on its own,{\b}
Dialogue: 0,0:49:18.36,0:49:21.44,Default,,0,0,0,,{\b1}but in the end NASA decided that the primary source for state vector updates{\b}
Dialogue: 0,0:49:21.44,0:49:24.52,Default,,0,0,0,,{\b1}shall be Mission Control in Houston, measured with three ground stations.{\b}
Dialogue: 0,0:49:24.52,0:49:28.60,Default,,0,0,0,,{\b1}Remote programming is done with the Apollo guidance Computer in idle, and running program 27.{\b}
Dialogue: 0,0:49:28.60,0:49:31.88,Default,,0,0,0,,{\b1}Mission Control can use its link via s-band to update the state vector.{\b}
Dialogue: 0,0:49:31.88,0:49:35.88,Default,,0,0,0,,{\b1}But there's one thing Mission Control doesn't know better than us, and that's attitude.{\b}
Dialogue: 0,0:49:35.88,0:49:39.00,Default,,0,0,0,,{\b1}Attitude is the orientation of the spacecraft in its three axis.{\b}
Dialogue: 0,0:49:39.00,0:49:44.04,Default,,0,0,0,,{\b1}Starting from a known attitude, we have to ensure that we can measure any rotation on any axis.{\b}
Dialogue: 0,0:49:44.04,0:49:45.84,Default,,0,0,0,,{\b1}That's what gyros are for.{\b}
Dialogue: 0,0:49:45.84,0:49:49.36,Default,,0,0,0,,{\b1}They are one of the major component of the IMU, the inertial measurement unit.{\b}
Dialogue: 0,0:49:49.36,0:49:54.28,Default,,0,0,0,,{\b1}Three gyroscopes, one per axis measure any rotation and provide their data to the Apollo Guidance Computer{\b}
Dialogue: 0,0:49:54.28,0:49:56.56,Default,,0,0,0,,{\b1}to keep track of the attitude of the spacecraft.{\b}
Dialogue: 0,0:49:56.56,0:50:00.52,Default,,0,0,0,,{\b1}Before we leave Earth orbit, let's quickly discuss the digital autopilot.{\b}
Dialogue: 0,0:50:00.52,0:50:02.96,Default,,0,0,0,,{\b1}It is the single biggest program in the Apollo Guidance Computer,{\b}
Dialogue: 0,0:50:02.96,0:50:07.52,Default,,0,0,0,,{\b1}with about 10% of all the source code both in the command and service module as well as the lunar module.{\b}
Dialogue: 0,0:50:07.52,0:50:10.28,Default,,0,0,0,,{\b1}The implementations for each vehicle are significantly different though,{\b}
Dialogue: 0,0:50:10.28,0:50:13.96,Default,,0,0,0,,{\b1}due to different flight modes, thruster sets, and symmetry of vehicle.{\b}
Dialogue: 0,0:50:13.96,0:50:18.80,Default,,0,0,0,,{\b1}As there's no friction in space, the tiniest event would constantly make the spacecraft rotate.{\b}
Dialogue: 0,0:50:18.80,0:50:21.92,Default,,0,0,0,,{\b1}The digital autopilot of the Apollo Guidance Computer uses the jets{\b}
Dialogue: 0,0:50:21.92,0:50:26.12,Default,,0,0,0,,{\b1}to maintain the attitude within certain thresholds, so-called dead bands.{\b}
Dialogue: 0,0:50:26.12,0:50:30.04,Default,,0,0,0,,{\b1}The autopilot is also used in case the astronauts ever need to use the hand controllers for thrusters.{\b}
Dialogue: 0,0:50:30.04,0:50:34.28,Default,,0,0,0,,{\b1}Basically both the command service module and the lunar module have fly-by-wire control.{\b}
Dialogue: 0,0:50:34.28,0:50:37.92,Default,,0,0,0,,{\b1}As any thruster could break at any time, the autopilot is capable of calculating{\b}
Dialogue: 0,0:50:37.92,0:50:40.52,Default,,0,0,0,,{\b1}the ideal burn mode even with a reduced number of thrusters.{\b}
Dialogue: 0,0:50:40.52,0:50:44.32,Default,,0,0,0,,{\b1}It has some simple algorithms for center of gravity and weight distribution as well,{\b}
Dialogue: 0,0:50:44.32,0:50:47.88,Default,,0,0,0,,{\b1}which are taken into account when calculating thruster maneuvers.{\b}
Dialogue: 0,0:50:47.88,0:50:49.44,Default,,0,0,0,,{\b1}It can do more than that, though.{\b}
Dialogue: 0,0:50:49.44,0:50:54.52,Default,,0,0,0,,{\b1}Give it a new attitude and it will calculate the most efficient transfer vector to reach the new attitude.{\b}
Dialogue: 0,0:50:54.52,0:50:57.72,Default,,0,0,0,,{\b1}In certain flight modes it might be required to have a stable rotation,{\b}
Dialogue: 0,0:50:57.72,0:51:01.00,Default,,0,0,0,,{\b1}be it for temperature control, monitoring of the landing site, or other reasons.{\b}
Dialogue: 0,0:51:01.00,0:51:05.52,Default,,0,0,0,,{\b1}The autopilot supports stable constant rolling, which can be directly activated.{\b}
Dialogue: 0,0:51:05.52,0:51:10.00,Default,,0,0,0,,{\b1}The autopilot does not only control attitude, it also supports the crew in performing powered flight maneuvers.{\b}
Dialogue: 0,0:51:10.00,0:51:14.24,Default,,0,0,0,,{\b1}It calculates a potential solution, which obviously can be overwritten by ground as usual,{\b}
Dialogue: 0,0:51:14.24,0:51:17.52,Default,,0,0,0,,{\b1}but still, after confirmation the autopilot automatically fires the engines{\b}
Dialogue: 0,0:51:17.52,0:51:19.52,Default,,0,0,0,,{\b1}and keeps a timer for the correct length of time.{\b}
Dialogue: 0,0:51:19.52,0:51:22.64,Default,,0,0,0,,{\b1}It does not measure the results of the burn though.{\b}
Dialogue: 0,0:51:22.64,0:51:26.04,Default,,0,0,0,,{\b1}For powered flight obviously dead reckoning isn't correct anymore,{\b}
Dialogue: 0,0:51:26.04,0:51:29.16,Default,,0,0,0,,{\b1}so the Apollo Guidance Computer contains a subroutine called average G,{\b}
Dialogue: 0,0:51:29.16,0:51:32.36,Default,,0,0,0,,{\b1}which takes the input from the IMU, meaning gyro and accelerometer,{\b}
Dialogue: 0,0:51:32.36,0:51:35.08,Default,,0,0,0,,{\b1}to compute the change to the state vector.{\b}
Dialogue: 0,0:51:35.08,0:51:38.08,Default,,0,0,0,,{\b1}Now that we know how to orient ourselves, and how to control the spaceship,{\b}
Dialogue: 0,0:51:38.08,0:51:39.72,Default,,0,0,0,,{\b1}it's time we fly to the moon.{\b}
Dialogue: 0,0:51:39.72,0:51:43.48,Default,,0,0,0,,{\b1}Usually the translunar injection happens in the middle of the second orbit around the earth,{\b}
Dialogue: 0,0:51:43.48,0:51:45.64,Default,,0,0,0,,{\b1}so around 2 hours 45 minutes into the flight.{\b}
Dialogue: 0,0:51:45.64,0:51:48.40,Default,,0,0,0,,{\b1}This is still performed by the third stage of the SaturnV{\b}
Dialogue: 0,0:51:48.40,0:51:51.28,Default,,0,0,0,,{\b1}so the Apollo Guidance Computer once again should only have a passive role here{\b}
Dialogue: 0,0:51:51.28,0:51:54.72,Default,,0,0,0,,{\b1}by monitoring the translunar injection with the dedicated program P 15.{\b}
Dialogue: 0,0:51:54.72,0:51:57.52,Default,,0,0,0,,{\b1}After separation from the S-IV-B we are on our way.{\b}
Dialogue: 0,0:51:57.52,0:52:01.88,Default,,0,0,0,,{\b1}Since the next interesting phase is the lunar landing, let's skip to that one.{\b}
Dialogue: 0,0:52:01.88,0:52:05.64,Default,,0,0,0,,{\b1}Once in lunar orbit, separation between the command and service module and lunar module{\b}
Dialogue: 0,0:52:05.64,0:52:08.36,Default,,0,0,0,,{\b1}happens four hours and 45 minutes before landing.{\b}
Dialogue: 0,0:52:08.36,0:52:13.36,Default,,0,0,0,,{\b1}On the lunar module, directly afterwards, rendezvous equipment like radar, strobe and VHF are tested,{\b}
Dialogue: 0,0:52:13.36,0:52:15.16,Default,,0,0,0,,{\b1}as well as the IMU, which is realigned.{\b}
Dialogue: 0,0:52:15.16,0:52:18.08,Default,,0,0,0,,{\b1}Additionally there's lots of preparation work on the lunar module.{\b}
Dialogue: 0,0:52:18.08,0:52:21.52,Default,,0,0,0,,{\b1}One of the main tasks is to prepare the abort guidance system, AGS,{\b}
Dialogue: 0,0:52:21.52,0:52:23.32,Default,,0,0,0,,{\b1}which is another, more simpler computer,{\b}
Dialogue: 0,0:52:23.32,0:52:25.72,Default,,0,0,0,,{\b1}that is able to get the lunar module with the astronauts back into orbit{\b}
Dialogue: 0,0:52:25.72,0:52:28.56,Default,,0,0,0,,{\b1}and safely docked with the CSM in case of an emergency.{\b}
Dialogue: 0,0:52:28.56,0:52:30.40,Default,,0,0,0,,{\b1}Let's get back to powered descent.{\b}
Dialogue: 0,0:52:30.40,0:52:34.72,Default,,0,0,0,,{\b1}The lunar module AGC has a special program for that one, P 63, braking phase.{\b}
Dialogue: 0,0:52:34.72,0:52:37.44,Default,,0,0,0,,{\b1}The landing radar has switched on and updates the state vector.{\b}
Dialogue: 0,0:52:37.44,0:52:41.04,Default,,0,0,0,,{\b1}The Apollo Guidance Computer controls the burn to reach the correct corridor towards the surface{\b}
Dialogue: 0,0:52:41.04,0:52:42.52,Default,,0,0,0,,{\b1}with a minimal amount of fuel.{\b}
Dialogue: 0,0:52:42.52,0:52:45.84,Default,,0,0,0,,{\b1}This is fully automatic, the astronauts just sit along for the ride.{\b}
Dialogue: 0,0:52:45.84,0:52:51.16,Default,,0,0,0,,{\b1}The lunar module is oriented with its descent engine towards the moon, visibility for the astronauts is close to zero.{\b}
Dialogue: 0,0:52:51.16,0:52:54.80,Default,,0,0,0,,{\b1}The second program, P 64, starts automatically at around 8,000 feet.{\b}
Dialogue: 0,0:52:54.80,0:52:57.84,Default,,0,0,0,,{\b1}Lunar module is pitched so that the astronauts can actually see the ground{\b}
Dialogue: 0,0:52:57.84,0:53:02.28,Default,,0,0,0,,{\b1}and the lunar module commander is getting a better understanding of the landing site and can search for a suitable spot.{\b}
Dialogue: 0,0:53:02.28,0:53:07.16,Default,,0,0,0,,{\b1}The third program, P 68, keeps the lunar module in a stable attitude above the surface{\b}
Dialogue: 0,0:53:07.16,0:53:11.12,Default,,0,0,0,,{\b1}and the commander manually adjusts the height in one feet per second increments,{\b}
Dialogue: 0,0:53:11.12,0:53:12.68,Default,,0,0,0,,{\b1}to slowly descend to the surface.{\b}
Dialogue: 0,0:53:12.68,0:53:16.24,Default,,0,0,0,,{\b1}Ideally at that point, the horizontal movement of the lunar module should be zero.{\b}
Dialogue: 0,0:53:16.24,0:53:19.64,Default,,0,0,0,,{\b1}After touchdown the crew manually activates program 68,{\b}
Dialogue: 0,0:53:19.64,0:53:22.88,Default,,0,0,0,,{\b1}which confirms to the Apollo guidance computer that yes, we have indeed landed,{\b}
Dialogue: 0,0:53:22.88,0:53:25.80,Default,,0,0,0,,{\b1}and ensures that the engine is switched off, terminates the average G routine,{\b}
Dialogue: 0,0:53:25.80,0:53:28.36,Default,,0,0,0,,{\b1}and sets the autopilot in a very forgiving setting,{\b}
Dialogue: 0,0:53:28.36,0:53:31.64,Default,,0,0,0,,{\b1}to avoid any corrections when it measures the rotation of the moon.{\b}
Dialogue: 0,0:53:31.64,0:53:34.04,Default,,0,0,0,,{\b1}The autopilot is not completely switched off though,{\b}
Dialogue: 0,0:53:34.04,0:53:37.12,Default,,0,0,0,,{\b1}as the astronaut might need it in case of an emergency ascent.{\b}
Dialogue: 0,0:53:37.12,0:53:38.48,Default,,0,0,0,,{\b1}Well we are on the moon, we do the usual stuff,{\b}
Dialogue: 0,0:53:38.48,0:53:42.92,Default,,0,0,0,,{\b1}small step for man, jump around plant the flag, and we then skip directly to the interesting bits{\b}
Dialogue: 0,0:53:42.92,0:53:44.60,Default,,0,0,0,,{\b1}which is liftoff and rendezvous.{\b}
Dialogue: 0,0:53:44.60,0:53:47.84,Default,,0,0,0,,{\b1}The rendezvous technique was developed in the Gemini project.{\b}
Dialogue: 0,0:53:47.84,0:53:50.52,Default,,0,0,0,,{\b1}Here you can see the Agena rendezvous target in Earth orbit.{\b}
Dialogue: 0,0:53:50.52,0:53:53.84,Default,,0,0,0,,{\b1}It follows the principle of an active vehicle, in this case the lunar module,{\b}
Dialogue: 0,0:53:53.84,0:53:58.32,Default,,0,0,0,,{\b1}which follows the command and service module and approaches it from below at slightly faster orbit.{\b}
Dialogue: 0,0:53:58.32,0:54:00.56,Default,,0,0,0,,{\b1}There were actually two different ways for rendezvous.{\b}
Dialogue: 0,0:54:00.56,0:54:03.16,Default,,0,0,0,,{\b1}A more conservative method called Coelliptic rendezvous{\b}
Dialogue: 0,0:54:03.16,0:54:06.80,Default,,0,0,0,,{\b1}which required one and a half orbits for the lunar module to reach the command and service module,{\b}
Dialogue: 0,0:54:06.80,0:54:11.32,Default,,0,0,0,,{\b1}but gave ample opportunity for monitoring progress, mid- course corrections, and orbit scenarios.{\b}
Dialogue: 0,0:54:11.32,0:54:13.40,Default,,0,0,0,,{\b1}And a more risky direct rendezvous method{\b}
Dialogue: 0,0:54:13.40,0:54:16.00,Default,,0,0,0,,{\b1}which directly aimed the lunar module towards the command and service module,{\b}
Dialogue: 0,0:54:16.00,0:54:18.80,Default,,0,0,0,,{\b1}taking less than one orbit until docking.{\b}
Dialogue: 0,0:54:18.80,0:54:21.44,Default,,0,0,0,,{\b1}This one was used starting from the Apollo 14 mission,{\b}
Dialogue: 0,0:54:21.44,0:54:26.72,Default,,0,0,0,,{\b1}as Mission Control had more experience and aimed for the shorter, less fuel intensive method.{\b}
Dialogue: 0,0:54:26.72,0:54:29.76,Default,,0,0,0,,{\b1}Preparation had to start two hours before liftoff.{\b}
Dialogue: 0,0:54:29.76,0:54:35.08,Default,,0,0,0,,{\b1}We have to align the IMU and we visually monitor the orbit of the CSM and calculate the rendezvous data.{\b}
Dialogue: 0,0:54:35.08,0:54:38.68,Default,,0,0,0,,{\b1}The Apollo Guidance Computer has program 22, CSM tracking, for this purpose.{\b}
Dialogue: 0,0:54:38.68,0:54:42.44,Default,,0,0,0,,{\b1}At liftoff minus one hour, we start program 12, powered ascent,{\b}
Dialogue: 0,0:54:42.44,0:54:46.56,Default,,0,0,0,,{\b1}and feed it with the necessary data, liftoff time and velocity target.{\b}
Dialogue: 0,0:54:46.56,0:54:49.40,Default,,0,0,0,,{\b1}The Apollo Guidance Computer performs the countdown, and ask for confirmation,{\b}
Dialogue: 0,0:54:49.40,0:54:51.80,Default,,0,0,0,,{\b1}we proceed and we have liftoff.{\b}
Dialogue: 0,0:54:51.80,0:54:54.24,Default,,0,0,0,,{\b1}The trip into orbit takes only seven and a half minutes{\b}
Dialogue: 0,0:54:54.24,0:54:56.84,Default,,0,0,0,,{\b1}but depending on which method for reaching the target orbit was used,{\b}
Dialogue: 0,0:54:56.84,0:55:00.92,Default,,0,0,0,,{\b1}it takes us either one and a half, or three and a half hours to come up behind the command and service module.{\b}
Dialogue: 0,0:55:00.92,0:55:05.16,Default,,0,0,0,,{\b1}During that time, program 20 is running all the time, measuring the state vector of the other vehicle,{\b}
Dialogue: 0,0:55:05.16,0:55:08.80,Default,,0,0,0,,{\b1}the command and service module, via various peripherals like rendezvous radar,{\b}
Dialogue: 0,0:55:08.80,0:55:11.56,Default,,0,0,0,,{\b1}VHF antenna, and the optic system for visual alignment.{\b}
Dialogue: 0,0:55:11.56,0:55:14.76,Default,,0,0,0,,{\b1}It calculates the necessary corridor and respective maneuvers required{\b}
Dialogue: 0,0:55:14.76,0:55:16.56,Default,,0,0,0,,{\b1}to get the lunar module into an interception course.{\b}
Dialogue: 0,0:55:16.56,0:55:21.32,Default,,0,0,0,,{\b1}Multiple other programs run in parallel to perform the necessary mid-course burn maneuvers.{\b}
Dialogue: 0,0:55:21.32,0:55:25.52,Default,,0,0,0,,{\b1}On the commander of service module, the pilot is actively tracking the lunar module the whole way up to orbit.{\b}
Dialogue: 0,0:55:25.52,0:55:29.12,Default,,0,0,0,,{\b1}The command and service module's computer is calculating the state vector of the lunar module,{\b}
Dialogue: 0,0:55:29.12,0:55:32.32,Default,,0,0,0,,{\b1}to take over the role of the active vehicle, in case anything goes wrong.{\b}
Dialogue: 0,0:55:32.32,0:55:34.72,Default,,0,0,0,,{\b1}The approach of the lunar module stops at 50 meter distance,{\b}
Dialogue: 0,0:55:34.72,0:55:39.68,Default,,0,0,0,,{\b1}at which point it rotates to point its docking target on top towards the command and service module.{\b}
Dialogue: 0,0:55:39.68,0:55:42.68,Default,,0,0,0,,{\b1}At that point in time the command service module takes over the active role{\b}
Dialogue: 0,0:55:42.68,0:55:45.24,Default,,0,0,0,,{\b1}and activates program 79, final rendezvous,{\b}
Dialogue: 0,0:55:45.24,0:55:49.04,Default,,0,0,0,,{\b1}which slows down the command and service module to close the distance until docking.{\b}
Dialogue: 0,0:55:49.04,0:55:52.52,Default,,0,0,0,,{\b1}Seconds before contact, the autopilot on both spacecraft is switched off{\b}
Dialogue: 0,0:55:52.52,0:55:56.28,Default,,0,0,0,,{\b1}to avoid both trying to correct the attitude of the combined spacecraft.{\b}
Dialogue: 0,0:55:56.28,0:56:00.36,Default,,0,0,0,,{\b1}So far so good, time to go home with the trans-earth injection.{\b}
Dialogue: 0,0:56:00.36,0:56:02.96,Default,,0,0,0,,{\b1}We feed the Apollo guidance computer with Earth orbit parameters{\b}
Dialogue: 0,0:56:02.96,0:56:05.92,Default,,0,0,0,,{\b1}and let it calculate the burn which is then activated and controlled.{\b}
Dialogue: 0,0:56:05.92,0:56:09.84,Default,,0,0,0,,{\b1}Any kind of potential mid-course corrections are performed the exact same way.{\b}
Dialogue: 0,0:56:09.84,0:56:13.96,Default,,0,0,0,,{\b1}Once in orbit around Earth, re-entry parameters are calculated on ground{\b}
Dialogue: 0,0:56:13.96,0:56:16.72,Default,,0,0,0,,{\b1}and transferred to the Apollo guidance computer via a S-band uplink.{\b}
Dialogue: 0,0:56:16.72,0:56:21.32,Default,,0,0,0,,{\b1}The first entry program, P 61, entry preparation, starts at entry minus 25 minutes.{\b}
Dialogue: 0,0:56:21.32,0:56:25.08,Default,,0,0,0,,{\b1}Various landing parameters are requested, like latitude and longitude of the splash zone,{\b}
Dialogue: 0,0:56:25.08,0:56:27.60,Default,,0,0,0,,{\b1}as well as the velocity and angles to enter the atmosphere.{\b}
Dialogue: 0,0:56:27.60,0:56:31.40,Default,,0,0,0,,{\b1}Entering and confirming these values completes program 61, and starts program 62,{\b}
Dialogue: 0,0:56:31.40,0:56:34.12,Default,,0,0,0,,{\b1}which basically asks the astronaut to perform a checklist{\b}
Dialogue: 0,0:56:34.12,0:56:36.56,Default,,0,0,0,,{\b1}for manual command module - service module - separation,{\b}
Dialogue: 0,0:56:36.56,0:56:38.88,Default,,0,0,0,,{\b1}which is not controlled by the Apollo guidance computer.{\b}
Dialogue: 0,0:56:38.88,0:56:44.92,Default,,0,0,0,,{\b1}After that has been performed it switches automatically to program 63, entry initialization.{\b}
Dialogue: 0,0:56:44.92,0:56:47.88,Default,,0,0,0,,{\b1}At that point, the autopilot is taking care of thruster control{\b}
Dialogue: 0,0:56:47.88,0:56:51.00,Default,,0,0,0,,{\b1}to break the command module out of its orbit into Earth's atmosphere.{\b}
Dialogue: 0,0:56:51.00,0:56:56.32,Default,,0,0,0,,{\b1}The main program for re-entry is program 64, entry, which starts automatically.{\b}
Dialogue: 0,0:56:56.32,0:56:59.48,Default,,0,0,0,,{\b1}Program 64 monitors the trajectory, and splashdown location,{\b}
Dialogue: 0,0:56:59.48,0:57:03.88,Default,,0,0,0,,{\b1}and determines the best entry solution and potential velocity reduction by invoking two specific programs,{\b}
Dialogue: 0,0:57:03.88,0:57:09.04,Default,,0,0,0,,{\b1}either P 65, entry up control, which basically makes the command module surf on the atmosphere{\b}
Dialogue: 0,0:57:09.04,0:57:10.80,Default,,0,0,0,,{\b1}to reduce speed and extend the range,{\b}
Dialogue: 0,0:57:10.80,0:57:15.32,Default,,0,0,0,,{\b1}or program 66, entry ballistic, throwing us through the atmosphere like a cannonball.{\b}
Dialogue: 0,0:57:15.32,0:57:18.76,Default,,0,0,0,,{\b1}The right mixture of the two is decided by program 64.{\b}
Dialogue: 0,0:57:18.76,0:57:23.88,Default,,0,0,0,,{\b1}The last program, program 67, final phase, performs the final maneuvers to the splash down.{\b}
Dialogue: 0,0:57:23.88,0:57:27.88,Default,,0,0,0,,{\b1}The following steps, like parachute deployment and so on, are not done by the Apollo guidance computer{\b}
Dialogue: 0,0:57:27.88,0:57:30.60,Default,,0,0,0,,{\b1}but by the ELSC, the Earth Landing Sequence Controller.{\b}
Dialogue: 0,0:57:30.60,0:57:34.20,Default,,0,0,0,,{\b1}The job of the Apollo guidance computer is done before deploying the parachutes.{\b}
Dialogue: 0,0:57:34.20,0:57:38.08,Default,,0,0,0,,{\b1}So this was a beautiful nominal mission, what can go wrong?{\b}
Dialogue: 0,0:57:38.08,0:57:43.20,Default,,0,0,0,,{\b1}Well let's start with Apollo 11, which had a 12 02 program alarm during powered descent.{\b}
Dialogue: 0,0:57:43.20,0:57:47.64,Default,,0,0,0,,{\b1}Normally programs during powered descent use about 85% of the processing power of the computer,{\b}
Dialogue: 0,0:57:47.64,0:57:49.88,Default,,0,0,0,,{\b1}but due to an incorrect power supply design,{\b}
Dialogue: 0,0:57:49.88,0:57:55.28,Default,,0,0,0,,{\b1}the rendezvous radar generated an additional twelve thousand eight hundred involuntary instructions per seconds,{\b}
Dialogue: 0,0:57:55.28,0:57:58.72,Default,,0,0,0,,{\b1}ironically amounting to the exact additional 15 percent load.{\b}
Dialogue: 0,0:57:58.72,0:58:02.20,Default,,0,0,0,,{\b1}Due to the co-operative multitasking, a queue of jobs build up,{\b}
Dialogue: 0,0:58:02.20,0:58:07.68,Default,,0,0,0,,{\b1}which resulted in executive overflow and the 12 02 alarm.{\b}
Dialogue: 0,0:58:07.68,0:58:12.36,Default,,0,0,0,,{\b1}The operating system automatically performed a program abort, all jobs were cancelled and restarted.{\b}
Dialogue: 0,0:58:12.36,0:58:15.76,Default,,0,0,0,,{\b1}All of this took just a few seconds, and landing could commence.{\b}
Dialogue: 0,0:58:15.76,0:58:22.96,Default,,0,0,0,,{\b1}Next, Apollo 13. They had an explosion of the oxygen tank in the service module at 55 hours 54 minutes 53 seconds{\b}
Dialogue: 0,0:58:22.96,0:58:27.16,Default,,0,0,0,,{\b1}and it will ... yep, correct, 320,000 kilometers from Earth.{\b}
Dialogue: 0,0:58:27.16,0:58:31.24,Default,,0,0,0,,{\b1}Fortunately they could make use of the free return trajectory to get the astronauts back to earth{\b}
Dialogue: 0,0:58:31.24,0:58:35.04,Default,,0,0,0,,{\b1}but they had to move to the lunar module to survive, as the command and service module was completely shut down,{\b}
Dialogue: 0,0:58:35.04,0:58:37.20,Default,,0,0,0,,{\b1}including its Apollo Guidance Computer.{\b}
Dialogue: 0,0:58:37.20,0:58:40.44,Default,,0,0,0,,{\b1}The IMU settings needed to be transferred to the lunar module system first,{\b}
Dialogue: 0,0:58:40.44,0:58:43.12,Default,,0,0,0,,{\b1}adapted to the different orientations of the spacecraft.{\b}
Dialogue: 0,0:58:43.12,0:58:47.60,Default,,0,0,0,,{\b1}The manual burns and the mid-course corrections were actually done with the abort guidance system on the lunar module,{\b}
Dialogue: 0,0:58:47.60,0:58:49.76,Default,,0,0,0,,{\b1}due to power constraints with the Apollo Guidance Computer.{\b}
Dialogue: 0,0:58:49.76,0:58:55.08,Default,,0,0,0,,{\b1}Successful reboot of the command and service module computer was luckily done hours before re- entry.{\b}
Dialogue: 0,0:58:55.08,0:58:59.64,Default,,0,0,0,,{\b1}And last but not least, Apollo 14, which had a floating solder ball in the abort button,{\b}
Dialogue: 0,0:58:59.64,0:59:03.76,Default,,0,0,0,,{\b1}which might lead to an unwanted activation of abort, therefore putting the lunar module back into orbit.{\b}
Dialogue: 0,0:59:03.76,0:59:06.76,Default,,0,0,0,,{\b1}This was solved within hours, by reprogramming the Apollo Guidance Computer,{\b}
Dialogue: 0,0:59:06.76,0:59:12.08,Default,,0,0,0,,{\b1}to spoof the execution of a different program, which was not listening to the abort button during the powered descend.{\b}
Dialogue: 0,0:59:12.08,0:59:16.40,Default,,0,0,0,,{\b1}Real abort activation though would have to be manually activated via the DSKY.{\b}
Dialogue: 0,0:59:16.40,0:59:23.28,Default,,0,0,0,,{\b1}So this was an overview and how the mission software was used on a flight to the moon and back.{\b}
Dialogue: 0,0:59:23.28,0:59:32.76,Default,,0,0,0,,{\b1}*applause*{\b}
Dialogue: 0,0:59:32.76,0:59:36.64,Default,,0,0,0,,{\b1}M: Now you probably want to run your own code on a real Apollo Guidance Computer,{\b}
Dialogue: 0,0:59:36.64,0:59:38.88,Default,,0,0,0,,{\b1}so you need to know where to find one.{\b}
Dialogue: 0,0:59:38.88,0:59:44.52,Default,,0,0,0,,{\b1}42 computers were built total. Seven lunar module computers crashed onto the moon.{\b}
Dialogue: 0,0:59:44.52,0:59:48.44,Default,,0,0,0,,{\b1}Three lunar module AGC's burned up in the Earth's atmosphere,{\b}
Dialogue: 0,0:59:48.44,0:59:50.48,Default,,0,0,0,,{\b1}11 command module computers returned.{\b}
Dialogue: 0,0:59:50.48,0:59:53.48,Default,,0,0,0,,{\b1}They're all presumably parts of museum exhibits.{\b}
Dialogue: 0,0:59:53.48,0:59:57.12,Default,,0,0,0,,{\b1}And 21 machines were not flown. Little is known about those.{\b}
Dialogue: 0,0:59:57.12,1:00:02.60,Default,,0,0,0,,{\b1}One is on display at the Computer History Museum in Mountain View, California, but it is missing some components.{\b}
Dialogue: 0,1:00:02.60,1:00:07.84,Default,,0,0,0,,{\b1}Luckily several emulation solutions are publicly available, as well as a tool chain.{\b}
Dialogue: 0,1:00:07.84,1:00:17.08,Default,,0,0,0,,{\b1}And the complete mission source, originally the size of a medium-sized suitcase, is available on github. *laughter*{\b}
Dialogue: 0,1:00:17.08,1:00:26.08,Default,,0,0,0,,{\b1}*applause*{\b}
Dialogue: 0,1:00:26.08,1:00:28.08,Default,,0,0,0,,{\b1}It takes a village to create a presentation.{\b}
Dialogue: 0,1:00:28.08,1:00:30.88,Default,,0,0,0,,{\b1}We would like to thank everyone who helped and supported us.{\b}
Dialogue: 0,1:00:30.88,1:00:33.48,Default,,0,0,0,,{\b1}This includes the indirect contributors, who wrote the books,{\b}
Dialogue: 0,1:00:33.48,1:00:36.56,Default,,0,0,0,,{\b1}the original documentation, the websites, and the software.{\b}
Dialogue: 0,1:00:36.56,1:00:39.60,Default,,0,0,0,,{\b1}Thank you very much for your attention. C: Thank you.{\b}
Dialogue: 0,1:00:39.60,1:00:53.04,Default,,0,0,0,,{\b1}*applause and cheering*{\b}
Dialogue: 0,1:00:53.04,1:00:58.08,Default,,0,0,0,,{\b1}Herald: Wow that was a densely packed talk. *laughter*{\b}
Dialogue: 0,1:00:58.08,1:01:06.28,Default,,0,0,0,,{\b1}Thanks Michael, and thanks Christian, for this amazing information overload.{\b}
Dialogue: 0,1:01:06.28,1:01:11.40,Default,,0,0,0,,{\b1}Please give a warm hand of applause, because we can't have a Q&A, unfortunately.{\b}
Dialogue: 0,1:01:11.40,1:01:20.12,Default,,0,0,0,,{\b1}*applause*{\b}
Dialogue: 0,1:01:20.12,1:01:35.44,Default,,0,0,0,,{\b1}*postroll music*{\b}
Dialogue: 0,1:01:35.44,1:01:41.32,Default,,0,0,0,,{\b1}*subtitles created by c3subtitles.de in the year 2018*{\b}
Dialogue: 0,0:00:00.00,0:00:14.60,Default - CN,,0,0,0,,
Dialogue: 0,0:00:03.34,0:00:14.60,Top Comments,,0,0,0,,34C3 Ultimate Talk：关于阿波罗导航计算机的一切\N主讲：Michael Steil，Christian Hessmann
Dialogue: 0,0:00:14.60,0:00:22.68,Default - CN,,0,0,0,,下面这场讲座是关于人类科技史上一个重要的技术遗产
Dialogue: 0,0:00:22.68,0:00:27.70,Default - CN,,0,0,0,,首个降落到月球上的计算机
Dialogue: 0,0:00:27.70,0:00:30.56,Default - CN,,0,0,0,,并且此后还成为了性能计数单位
Dialogue: 0,0:00:30.56,0:00:40.08,Default - CN,,0,0,0,,大家都开始用“它的多少倍处理速度”来衡量其他的计算机和架构
Dialogue: 0,0:00:40.08,0:00:44.48,Default - CN,,0,0,0,,它是“火箭科学”，但是更坏的消息是，它还是“火箭计算机科学”
Dialogue: 0,0:00:44.48,0:00:48.90,Default - CN,,0,0,0,,所以我们很荣幸请到Christian Hessmann来到今天的讲座
Dialogue: 0,0:00:48.90,0:00:50.92,Default - CN,,0,0,0,,他自己就是一名“火箭科学家”
Dialogue: 0,0:00:50.92,0:00:55.68,Default - CN,,0,0,0,,至于计算机的部分，我们的主讲是Michael Steil
Dialogue: 0,0:00:55.68,0:01:01.40,Default - CN,,0,0,0,,他是Xbox Linux项目、本项目和其他众多项目的创始人
Dialogue: 0,0:01:01.40,0:01:05.40,Default - CN,,0,0,0,,他具有各种计算机架构的丰富经验
Dialogue: 0,0:01:05.40,0:01:09.56,Default - CN,,0,0,0,,让我们掌声欢迎二位为我们带来《阿波罗导航计算机的一切》讲座
Dialogue: 0,0:01:09.56,0:01:18.04,Default - CN,,0,0,0,,
Dialogue: 0,0:01:18.04,0:01:22.64,Default - CN,,0,0,0,,Michael Steil：大家好啊！这个开了吗？能听到我说话吗？好的
Dialogue: 0,0:01:22.64,0:01:25.92,Default - CN,,0,0,0,,欢迎各位来到今天的讲座《阿波罗导航计算机的一切》
Dialogue: 0,0:01:25.92,0:01:29.68,Default - CN,,0,0,0,,或者叫“计算机架构综合入门教程”
Dialogue: 0,0:01:29.68,0:01:31.24,Default - CN,,0,0,0,,或者叫“计算机架构综合、操作系统入门教程”
Dialogue: 0,0:01:31.24,0:01:34.20,Default - CN,,0,0,0,,或者叫“计算机架构、操作系统、太空航行综合入门教程”
Dialogue: 0,0:01:34.20,0:01:35.40,Default - CN,,0,0,0,,我是Michael Steil
Dialogue: 0,0:01:35.40,0:01:36.68,Default - CN,,0,0,0,,我是Christian Hessmann
Dialogue: 0,0:01:37.80,0:01:40.72,Default - CN,,0,0,0,,这场讲座是数位讲者带来的一系列计算机讲座中的第六部
Dialogue: 0,0:01:40.72,0:01:45.56,Default - CN,,0,0,0,,主旨是在60分钟内尽可能多地介绍一种经典的计算机架构
Dialogue: 0,0:01:45.56,0:01:50.24,Default - CN,,0,0,0,,阿波罗导航计算机，AGC，是一种数字计算机
Dialogue: 0,0:01:50.24,0:01:52.84,Default - CN,,0,0,0,,专为搭载在阿波罗登月飞船上设计
Dialogue: 0,0:01:53.16,0:01:57.36,Default - CN,,0,0,0,,它支撑着1969到1972年间的若干次阿波罗登月行动
Dialogue: 0,0:01:57.36,0:02:00.40,Default - CN,,0,0,0,,它由MIT在1961到1966年间研制
Dialogue: 0,0:02:00.40,0:02:04.68,Default - CN,,0,0,0,,总共生产了42台AGC，每台价值当年的$200,000
Dialogue: 0,0:02:04.68,0:02:08.48,Default - CN,,0,0,0,,基础频率大约为1MHz，所有的数据都是15位宽
Dialogue: 0,0:02:08.48,0:02:12.48,Default - CN,,0,0,0,,可以搭载2Ki字的RAM和36Ki字的ROM
Dialogue: 0,0:02:12.48,0:02:18.20,Default - CN,,0,0,0,,外形体积相当于一个大行李箱，重达32公斤，耗电约55瓦
Dialogue: 0,0:02:18.20,0:02:22.12,Default - CN,,0,0,0,,用户界面是一个数字段码屏和一个键盘
Dialogue: 0,0:02:22.12,0:02:27.08,Default - CN,,0,0,0,,在20世纪60年代的时代背景下
Dialogue: 0,0:02:27.08,0:02:29.60,Default - CN,,0,0,0,,你不能随便买一台计算机然后把它塞到飞船上
Dialogue: 0,0:02:29.60,0:02:31.76,Default - CN,,0,0,0,,早期的“小型机”能有一台小冰箱那么大
Dialogue: 0,0:02:31.76,0:02:36.92,Default - CN,,0,0,0,,这些计算机又重又耗电，做实时科学运算也太慢
Dialogue: 0,0:02:36.92,0:02:40.04,Default - CN,,0,0,0,,即使计算机产业在过去十年已经取得了一些发展也是这样
Dialogue: 0,0:02:40.04,0:02:43.84,Default - CN,,0,0,0,,当然再过十年之后，大规模集成电路应用到微型计算机中
Dialogue: 0,0:02:43.84,0:02:46.84,Default - CN,,0,0,0,,很多微型机的运算能力就已经开始在很多方面超过AGC了
Dialogue: 0,0:02:46.84,0:02:49.96,Default - CN,,0,0,0,,AGC本身有很多引人注目的特点
Dialogue: 0,0:02:51.40,0:02:55.64,Default - CN,,0,0,0,,整体架构和今天的计算机大相径庭，非常有60年代味儿
Dialogue: 0,0:02:55.64,0:02:58.04,Default - CN,,0,0,0,,硬件放在当时来讲非常有创新性
Dialogue: 0,0:02:58.04,0:03:01.56,Default - CN,,0,0,0,,配备了一些非常有趣而且“不常见”的外设
Dialogue: 0,0:03:01.56,0:03:04.76,Default - CN,,0,0,0,,操作系统在当时有革命性意义
Dialogue: 0,0:03:04.76,0:03:06.74,Default - CN,,0,0,0,,如果把它接上适合的“硬件”
Dialogue: 0,0:03:06.74,0:03:07.88,Default - CN,,0,0,0,,那么它的任务软件还能把你送上月球
Dialogue: 0,0:03:07.88,0:03:09.40,Default - CN,,0,0,0,,那么它的任务软件还能把你送上月球
Dialogue: 0,0:03:10.72,0:03:11.92,Default - CN,,0,0,0,,在阿波罗计划中
Dialogue: 0,0:03:11.92,0:03:14.96,Default - CN,,0,0,0,,阿波罗导航计算机承担了两次无人测试任务
Dialogue: 0,0:03:14.96,0:03:16.68,Default - CN,,0,0,0,,这些都是从地面遥控的
Dialogue: 0,0:03:16.68,0:03:21.04,Default - CN,,0,0,0,,三次载人测试任务，七次载人着陆任务
Dialogue: 0,0:03:21.04,0:03:24.52,Default - CN,,0,0,0,,宇航员们对于“把控制权交给一台电脑”颇有微词
Dialogue: 0,0:03:24.52,0:03:26.04,Default - CN,,0,0,0,,因为他们想要自己来掌握一切
Dialogue: 0,0:03:26.04,0:03:29.16,Default - CN,,0,0,0,,虽然大部分任务也都可以用人力备份完成飞行
Dialogue: 0,0:03:29.16,0:03:30.92,Default - CN,,0,0,0,,宇航员们最终也没有如愿
Dialogue: 0,0:03:30.92,0:03:34.08,Default - CN,,0,0,0,,为了理解阿波罗导航计算机存在的目的和它担当的责任
Dialogue: 0,0:03:34.08,0:03:36.08,Default - CN,,0,0,0,,我们需要先了解阿波罗计划是什么样的
Dialogue: 0,0:03:36.08,0:03:38.20,Default - CN,,0,0,0,,阿波罗计划的核心策略是
Dialogue: 0,0:03:38.20,0:03:40.72,Default - CN,,0,0,0,,既然把整个飞船降落在月球上需要极其巨型的火箭
Dialogue: 0,0:03:40.72,0:03:43.44,Default - CN,,0,0,0,,那么我们可以换个思路
Dialogue: 0,0:03:43.44,0:03:45.24,Default - CN,,0,0,0,,只降落一个小的着陆舱
Dialogue: 0,0:03:45.24,0:03:48.76,Default - CN,,0,0,0,,搭载返程燃料的轨道舱仍然停留在绕月轨道中
Dialogue: 0,0:03:48.76,0:03:51.88,Default - CN,,0,0,0,,阿波罗飞船可以分为登月舱、指令舱和服务舱
Dialogue: 0,0:03:51.88,0:03:54.12,Default - CN,,0,0,0,,阿波罗飞船可以分为登月舱、指令舱和服务舱
Dialogue: 0,0:03:54.12,0:03:57.06,Default - CN,,0,0,0,,土星五号火箭从肯尼迪角发射
Dialogue: 0,0:03:57.06,0:03:59.12,Default - CN,,0,0,0,,带着阿波罗飞船和三名宇航员进入地球轨道
Dialogue: 0,0:03:59.12,0:04:02.96,Default - CN,,0,0,0,,在合适的时机加速，就可从地月转移轨道进入自由返回轨道
Dialogue: 0,0:04:02.96,0:04:05.68,Default - CN,,0,0,0,,在合适的时机加速，就可从地月转移轨道进入自由返回轨道
Dialogue: 0,0:04:05.68,0:04:09.04,Default - CN,,0,0,0,,但是只是在这上面浪的话，会绕过月球、直接返回地球
Dialogue: 0,0:04:09.04,0:04:10.96,Default - CN,,0,0,0,,在这次为期三天的登月之旅刚开始的时候
Dialogue: 0,0:04:10.96,0:04:13.50,Default - CN,,0,0,0,,指令与服务舱和登月舱脱离
Dialogue: 0,0:04:13.50,0:04:15.20,Default - CN,,0,0,0,,然后和它倒着对接
Dialogue: 0,0:04:15.20,0:04:19.04,Default - CN,,0,0,0,,然后飞船在月球背面减速机动，进入月球轨道
Dialogue: 0,0:04:19.04,0:04:23.00,Default - CN,,0,0,0,,随后两名宇航员爬进登月舱
Dialogue: 0,0:04:23.00,0:04:25.80,Default - CN,,0,0,0,,登月舱会解除对接，然后刹车减速
Dialogue: 0,0:04:25.80,0:04:31.20,Default - CN,,0,0,0,,这是动力下降段
Dialogue: 0,0:04:31.20,0:04:32.84,Default - CN,,0,0,0,,然后就着陆了
Dialogue: 0,0:04:32.84,0:04:36.24,Default - CN,,0,0,0,,
Dialogue: 0,0:04:36.24,0:04:40.24,Default - CN,,0,0,0,,登月舱再次起飞后，和指令与服务舱对接
Dialogue: 0,0:04:40.24,0:04:43.24,Default - CN,,0,0,0,,两个宇航员再爬回指令舱
Dialogue: 0,0:04:43.24,0:04:45.56,Default - CN,,0,0,0,,登月舱最后就丢弃掉了
Dialogue: 0,0:04:45.56,0:04:48.72,Default - CN,,0,0,0,,剩下的指令与服务舱再在月球背面加速
Dialogue: 0,0:04:48.72,0:04:50.52,Default - CN,,0,0,0,,然后进入返回地球的轨道
Dialogue: 0,0:04:50.52,0:04:52.92,Default - CN,,0,0,0,,再入大气层时，就只剩指令舱会回来了
Dialogue: 0,0:04:52.92,0:04:55.16,Default - CN,,0,0,0,,顺便，这些精美的可视化动画
Dialogue: 0,0:04:55.16,0:04:58.16,Default - CN,,0,0,0,,来自Jared Owen的《How the Apollo spacecraft works》系列视频
Dialogue: 0,0:04:58.16,0:05:00.96,Default - CN,,0,0,0,,我们也向大家强力推荐
Dialogue: 0,0:05:00.96,0:05:05.08,Default - CN,,0,0,0,,指令与服务舱、登月舱各搭载一台AGC
Dialogue: 0,0:05:05.08,0:05:08.32,Default - CN,,0,0,0,,硬件是一样的，但是连接的IO设备不同
Dialogue: 0,0:05:08.32,0:05:11.04,Default - CN,,0,0,0,,软件也是为不同的特定飞船适配过的
Dialogue: 0,0:05:11.04,0:05:14.96,Default - CN,,0,0,0,,屏幕和键盘埋在成百上千个开关中间
Dialogue: 0,0:05:14.96,0:05:18.88,Default - CN,,0,0,0,,宇航员用它和计算机进行交互
Dialogue: 0,0:05:18.88,0:05:23.80,Default - CN,,0,0,0,,在任务中，这台计算机的任务主要是跟踪飞船方位和速度
Dialogue: 0,0:05:23.80,0:05:26.20,Default - CN,,0,0,0,,也就是所谓的状态向量
Dialogue: 0,0:05:26.20,0:05:30.04,Default - CN,,0,0,0,,然后要维持飞船的姿态，计算引擎应该如何点火
Dialogue: 0,0:05:30.04,0:05:34.72,Default - CN,,0,0,0,,还要在发射时监视和控制土星五号
Dialogue: 0,0:05:36.80,0:05:40.28,Default - CN,,0,0,0,,要了解阿波罗登月计算机是如何做到这些的
Dialogue: 0,0:05:40.28,0:05:43.52,Default - CN,,0,0,0,,我们就来看看它的架构和硬件实现
Dialogue: 0,0:05:43.52,0:05:46.52,Default - CN,,0,0,0,,它的一些有趣的外设、操作系统是怎样的
Dialogue: 0,0:05:46.52,0:05:50.32,Default - CN,,0,0,0,,最后还有登月任务的控制软件
Dialogue: 0,0:05:51.88,0:05:56.20,Default - CN,,0,0,0,,AGC的架构简而言之是一台冯·诺依曼结构的累加器机
Dialogue: 0,0:05:56.20,0:05:59.36,Default - CN,,0,0,0,,使用15位、反码法整数、大端序的算术
Dialogue: 0,0:05:59.36,0:06:00.96,Default - CN,,0,0,0,,先从指令集入手
Dialogue: 0,0:06:00.96,0:06:04.32,Default - CN,,0,0,0,,然后是算术模型、指令编码、内存模型
Dialogue: 0,0:06:04.32,0:06:07.48,Default - CN,,0,0,0,,I/O操作、计数器，最后是中断模型
Dialogue: 0,0:06:08.36,0:06:10.76,Default - CN,,0,0,0,,世界上有着各种各样的指令集
Dialogue: 0,0:06:10.76,0:06:12.40,Default - CN,,0,0,0,,以现代ARM处理器的指令集为例
Dialogue: 0,0:06:12.40,0:06:16.24,Default - CN,,0,0,0,,它主要针对大约400条最常用指令的执行效率进行优化
Dialogue: 0,0:06:16.24,0:06:18.72,Default - CN,,0,0,0,,如果想更进一步减少指令个数
Dialogue: 0,0:06:18.72,0:06:20.04,Default - CN,,0,0,0,,学界的SUBLEQ语言展现了只用一种指令也能像其他图灵完整机器一样解决问题
Dialogue: 0,0:06:20.04,0:06:24.00,Default - CN,,0,0,0,,学界的SUBLEQ语言展现了只用一种指令也能像其他图灵完整机器一样解决问题
Dialogue: 0,0:06:24.00,0:06:27.56,Default - CN,,0,0,0,,如果把指令数做多，处理器做得更复杂
Dialogue: 0,0:06:27.56,0:06:29.56,Default - CN,,0,0,0,,代码密度和性能就都可以提高
Dialogue: 0,0:06:29.56,0:06:33.24,Default - CN,,0,0,0,,但这样通常意味着CPU复杂度会大幅提升
Dialogue: 0,0:06:33.24,0:06:37.48,Default - CN,,0,0,0,,20世纪60年代的计算机一般只有数千个晶体管
Dialogue: 0,0:06:37.48,0:06:38.88,Default - CN,,0,0,0,,和今天的上亿不可同日而语
Dialogue: 0,0:06:38.88,0:06:41.76,Default - CN,,0,0,0,,所以AGC选择了这个复杂度与性能平衡的甜点（36条指令）
Dialogue: 0,0:06:41.76,0:06:46.04,Default - CN,,0,0,0,,36条指令的复杂度和性能对于任务来说恰到好处
Dialogue: 0,0:06:46.04,0:06:49.44,Default - CN,,0,0,0,,这36条指令中，有一些load/store指令
Dialogue: 0,0:06:49.44,0:06:52.24,Default - CN,,0,0,0,,算术、逻辑、控制流指令
Dialogue: 0,0:06:52.24,0:06:56.12,Default - CN,,0,0,0,,I/O指令，还有一些处理中断的指令
Dialogue: 0,0:06:56.12,0:06:59.04,Default - CN,,0,0,0,,我们先来看看内存模型，这是一个指令集的基础
Dialogue: 0,0:06:59.04,0:07:04.56,Default - CN,,0,0,0,,内存空间有4096个地址，从低到高从000到FFF
Dialogue: 0,0:07:04.56,0:07:09.28,Default - CN,,0,0,0,,每个地址能装一个15比特宽的字，范围是从0到7FFF
Dialogue: 0,0:07:09.28,0:07:13.64,Default - CN,,0,0,0,,几乎所有访存操作都要经过一个15位宽的累加器
Dialogue: 0,0:07:13.64,0:07:14.96,Default - CN,,0,0,0,,我这里也把它叫做A寄存器
Dialogue: 0,0:07:14.96,0:07:17.92,Default - CN,,0,0,0,,程序可以在累加器和内存单元之间复制数据
Dialogue: 0,0:07:17.92,0:07:22.04,Default - CN,,0,0,0,,也可以在复制的同时做加减乘除四则运算
Dialogue: 0,0:07:22.04,0:07:25.44,Default - CN,,0,0,0,,内存中的数据根据解码方式不同可以有不同的含义
Dialogue: 0,0:07:25.44,0:07:27.28,Default - CN,,0,0,0,,这边的这些数值可以代表整数
Dialogue: 0,0:07:27.28,0:07:30.36,Default - CN,,0,0,0,,这边的这三个字则应当解码为机器码指令
Dialogue: 0,0:07:30.36,0:07:34.56,Default - CN,,0,0,0,,数据与代码存在于同一个地址空间里，可见AGC采用的是冯·诺依曼架构
Dialogue: 0,0:07:34.56,0:07:39.48,Default - CN,,0,0,0,,CPU的程序计数器，PC寄存器，它的值总是下一条指令的地址
Dialogue: 0,0:07:39.48,0:07:44.12,Default - CN,,0,0,0,,举例来看，load指令把一个内存单元的内容复制到累加器
Dialogue: 0,0:07:44.12,0:07:46.20,Default - CN,,0,0,0,,然后PC指向下一条指令
Dialogue: 0,0:07:46.20,0:07:49.92,Default - CN,,0,0,0,,add指令把一个内存单元中的数据加到累加器上
Dialogue: 0,0:07:49.92,0:07:54.64,Default - CN,,0,0,0,,然后store指令把累加器的值写入到一个内存地址中
Dialogue: 0,0:07:54.64,0:07:57.20,Default - CN,,0,0,0,,我们可以把刚刚看到的这些指令中指定的地址代换成“K”
Dialogue: 0,0:07:57.20,0:08:00.64,Default - CN,,0,0,0,,用K代表内存地址参数
Dialogue: 0,0:08:00.64,0:08:04.84,Default - CN,,0,0,0,,后面我们会用这种“参考卡片”展示指令的相关信息
Dialogue: 0,0:08:04.84,0:08:07.56,Default - CN,,0,0,0,,上面有这条指令的通用语法
Dialogue: 0,0:08:07.56,0:08:10.52,Default - CN,,0,0,0,,一个短的注释，和用伪代码表示的这条指令执行的操作
Dialogue: 0,0:08:10.52,0:08:14.12,Default - CN,,0,0,0,,比如这条就是从内存地址K取一个数，并加到累加器A之中
Dialogue: 0,0:08:14.12,0:08:18.04,Default - CN,,0,0,0,,还有这条指令在内存中的编码方式，和它执行需要的时钟周期
Dialogue: 0,0:08:18.04,0:08:21.40,Default - CN,,0,0,0,,右上角的“原始语法”是设计它的前辈们设计的
Dialogue: 0,0:08:21.40,0:08:25.16,Default - CN,,0,0,0,,因为原始的汇编语法比较晦涩
Dialogue: 0,0:08:25.16,0:08:28.60,Default - CN,,0,0,0,,我选用了右侧这种更加现代的写法
Dialogue: 0,0:08:28.60,0:08:31.84,Default - CN,,0,0,0,,这样对熟悉和不熟悉AGC编程的人都更友好
Dialogue: 0,0:08:31.84,0:08:34.16,Default - CN,,0,0,0,,让我们仔细研究一下它的指令集
Dialogue: 0,0:08:34.16,0:08:35.92,Default - CN,,0,0,0,,这个例子是一条load指令
Dialogue: 0,0:08:35.92,0:08:38.16,Default - CN,,0,0,0,,load a，逗号，间接寻址 200
Dialogue: 0,0:08:38.16,0:08:41.32,Default - CN,,0,0,0,,我们把AGC的寄存器都放在左边展示
Dialogue: 0,0:08:41.32,0:08:43.16,Default - CN,,0,0,0,,大多数的操作都要用到累加器
Dialogue: 0,0:08:43.16,0:08:45.40,Default - CN,,0,0,0,,所以我们先忽略其他的寄存器
Dialogue: 0,0:08:45.40,0:08:49.56,Default - CN,,0,0,0,,执行这条指令的时候CPU首先去内存地址200
Dialogue: 0,0:08:49.56,0:08:52.16,Default - CN,,0,0,0,,把200地址的内容读出来，然后再写到累加器里
Dialogue: 0,0:08:52.16,0:08:54.62,Default - CN,,0,0,0,,这条是一个store指令
Dialogue: 0,0:08:54.62,0:08:57.08,Default - CN,,0,0,0,,load，间接寻址 200，逗号，a
Dialogue: 0,0:08:57.08,0:09:00.24,Default - CN,,0,0,0,,和其他指令一样，第一个参数是目的地，在这里就是内存中
Dialogue: 0,0:09:00.24,0:09:02.24,Default - CN,,0,0,0,,第二个参数是源地址，在这里是累加器
Dialogue: 0,0:09:02.24,0:09:04.44,Default - CN,,0,0,0,,CPU会去到内存地址200
Dialogue: 0,0:09:04.44,0:09:07.76,Default - CN,,0,0,0,,然后把累加器的内容写到那个内存单元里
Dialogue: 0,0:09:07.76,0:09:09.80,Default - CN,,0,0,0,,还有一个交换指令，可以原子地交换一个内存地址和累加器中的数据
Dialogue: 0,0:09:09.80,0:09:13.12,Default - CN,,0,0,0,,还有一个交换指令，可以原子地交换一个内存地址和累加器中的数据
Dialogue: 0,0:09:13.12,0:09:16.40,Default - CN,,0,0,0,,add指令会先去拿一个内存地址里的内容
Dialogue: 0,0:09:16.40,0:09:18.32,Default - CN,,0,0,0,,然后把它和累加器的数据相加
Dialogue: 0,0:09:18.32,0:09:21.84,Default - CN,,0,0,0,,加完之后再写回累加器
Dialogue: 0,0:09:21.84,0:09:23.56,Default - CN,,0,0,0,,有加指令就有减指令
Dialogue: 0,0:09:23.56,0:09:25.24,Default - CN,,0,0,0,,减指令是取一个内存地址中的数据
Dialogue: 0,0:09:25.24,0:09:28.60,Default - CN,,0,0,0,,然后用累加器的数据减去内存中的数据
Dialogue: 0,0:09:28.60,0:09:30.72,Default - CN,,0,0,0,,减完的结果再写回累加器
Dialogue: 0,0:09:30.72,0:09:33.00,Default - CN,,0,0,0,,相减的结果可以是负数
Dialogue: 0,0:09:33.00,0:09:37.44,Default - CN,,0,0,0,,所以下面来讲讲AGC中负数是如何表示的
Dialogue: 0,0:09:37.44,0:09:39.28,Default - CN,,0,0,0,,为了简便起见，我们研究4比特整数
Dialogue: 0,0:09:39.28,0:09:43.56,Default - CN,,0,0,0,,4位无符号整数可以表示从0到15的数字
Dialogue: 0,0:09:43.56,0:09:46.88,Default - CN,,0,0,0,,如果用我们取最高位表示正负号
Dialogue: 0,0:09:46.88,0:09:49.40,Default - CN,,0,0,0,,剩下的3位表示数据的绝对值
Dialogue: 0,0:09:49.40,0:09:52.64,Default - CN,,0,0,0,,这种表示负数的方法就会产生+0和-0
Dialogue: 0,0:09:52.64,0:09:56.56,Default - CN,,0,0,0,,并且这种编码方式也很难实际运用，因为运算一旦要跨过零点就要特殊处理
Dialogue: 0,0:09:56.56,0:09:59.80,Default - CN,,0,0,0,,反码法就是在此基础上把负数的顺序反转过来
Dialogue: 0,0:09:59.80,0:10:03.32,Default - CN,,0,0,0,,这样做之后，过零点的处理会简单些，但依然有+0和-0
Dialogue: 0,0:10:03.32,0:10:06.96,Default - CN,,0,0,0,,我们现代使用的补码表示法只有一种0的编码
Dialogue: 0,0:10:06.96,0:10:10.88,Default - CN,,0,0,0,,并且能完美兼容用于无符号数的加减逻辑
Dialogue: 0,0:10:10.88,0:10:15.44,Default - CN,,0,0,0,,但在20世纪60年代，科学运算的计算机通常采用的都是反码法
Dialogue: 0,0:10:15.44,0:10:18.20,Default - CN,,0,0,0,,所以AGC自然也不例外
Dialogue: 0,0:10:18.20,0:10:21.04,Default - CN,,0,0,0,,前面说过，4位无符号数可以表示0到15的整数
Dialogue: 0,0:10:21.04,0:10:23.16,Default - CN,,0,0,0,,在反码表示法中，0到7这部分和无符号数是完全一样的
Dialogue: 0,0:10:23.16,0:10:25.36,Default - CN,,0,0,0,,在反码表示法中，0到7这部分和无符号数是完全一样的
Dialogue: 0,0:10:25.36,0:10:28.68,Default - CN,,0,0,0,,负数的部分则是这样的
Dialogue: 0,0:10:28.68,0:10:31.96,Default - CN,,0,0,0,,和补码法不同，使用反码法时，正负两边是完全对称的
Dialogue: 0,0:10:31.96,0:10:35.60,Default - CN,,0,0,0,,所以取一个数的倒数非常简单
Dialogue: 0,0:10:35.60,0:10:37.84,Default - CN,,0,0,0,,直接把所有比特都反转就可以
Dialogue: 0,0:10:37.84,0:10:41.48,Default - CN,,0,0,0,,所以二进制全为0时表示+0
Dialogue: 0,0:10:41.48,0:10:44.80,Default - CN,,0,0,0,,二进制全为1时表示-0
Dialogue: 0,0:10:44.80,0:10:48.16,Default - CN,,0,0,0,,在正数这半圈里，加法和无符号数是完全一样的
Dialogue: 0,0:10:48.16,0:10:50.36,Default - CN,,0,0,0,,如果运算的范围仅在负数这半边的话
Dialogue: 0,0:10:50.36,0:10:53.28,Default - CN,,0,0,0,,负数这半边当作无符号数去做加法，性质也是和无符号数完全一样
Dialogue: 0,0:10:53.28,0:10:55.60,Default - CN,,0,0,0,,如果运算要经过0点，就会变得有意思起来
Dialogue: 0,0:10:55.60,0:11:01.24,Default - CN,,0,0,0,,有符号数6-4就是6+负4，计算时等同于算无符号数的6+11
Dialogue: 0,0:11:01.24,0:11:05.96,Default - CN,,0,0,0,,这个结果模16会得到1，进位了
Dialogue: 0,0:11:05.96,0:11:08.76,Default - CN,,0,0,0,,在反码法中，如果产生了进位，进的1还要加到刚刚算出来的结果上
Dialogue: 0,0:11:08.76,0:11:10.32,Default - CN,,0,0,0,,这样我们就算出来了2，答案正确
Dialogue: 0,0:11:10.32,0:11:14.12,Default - CN,,0,0,0,,这样跳过两个重复的0的进位方式叫做“循环进位”
Dialogue: 0,0:11:14.12,0:11:16.32,Default - CN,,0,0,0,,在跨越零点的循环时要这样处理
Dialogue: 0,0:11:16.32,0:11:20.04,Default - CN,,0,0,0,,溢出则是指计算的结果在整数表示范围以外
Dialogue: 0,0:11:20.04,0:11:24.28,Default - CN,,0,0,0,,4位有符号数7+1，结果得到了-7，这显然是错误的
Dialogue: 0,0:11:24.28,0:11:26.20,Default - CN,,0,0,0,,负数域中超出数字的表示范围也有相同的后果
Dialogue: 0,0:11:26.20,0:11:30.56,Default - CN,,0,0,0,,-7-1转换成8+14，加上循环进位之后得到了7，答案是错误的
Dialogue: 0,0:11:30.56,0:11:32.88,Default - CN,,0,0,0,,CPU可以检测到这种情况，会给结果附加一个标志位
Dialogue: 0,0:11:32.88,0:11:35.00,Default - CN,,0,0,0,,累加器具有一个单独的标志位储存溢出标志“V”
Dialogue: 0,0:11:35.00,0:11:37.44,Default - CN,,0,0,0,,累加器具有一个单独的标志位储存溢出标志“V”
Dialogue: 0,0:11:38.48,0:11:43.48,Default - CN,,0,0,0,,所以，如果我们有一段代码从内存中读出来了7FFF
Dialogue: 0,0:11:43.48,0:11:46.64,Default - CN,,0,0,0,,然后又对A加了1，结果为0，CPU就会检测到溢出
Dialogue: 0,0:11:46.64,0:11:48.52,Default - CN,,0,0,0,,于是累加器的V标志就被置位
Dialogue: 0,0:11:48.52,0:11:51.44,Default - CN,,0,0,0,,如果累加器的V标志置位了
Dialogue: 0,0:11:51.44,0:11:53.48,Default - CN,,0,0,0,,store指令在把累加器内容写到内存时还会额外做一个动作
Dialogue: 0,0:11:53.48,0:11:58.52,Default - CN,,0,0,0,,它会清除掉溢出状态位，然后根据是上溢还是下溢
Dialogue: 0,0:11:58.52,0:12:00.80,Default - CN,,0,0,0,,向A中写入+1或者-1
Dialogue: 0,0:12:00.80,0:12:03.08,Default - CN,,0,0,0,,然后还会跳过下一条指令
Dialogue: 0,0:12:03.08,0:12:04.68,Default - CN,,0,0,0,,程序就能根据是否跳过一条指令，检测到是否发生了溢出事件
Dialogue: 0,0:12:04.68,0:12:09.40,Default - CN,,0,0,0,,然后再用A里面写进去的+1或者-1向数字的更高位进/借位
Dialogue: 0,0:12:09.40,0:12:13.44,Default - CN,,0,0,0,,此时我们把A寄存器写到内存中，就得到了一个占据两个字宽度的结果
Dialogue: 0,0:12:13.44,0:12:17.28,Default - CN,,0,0,0,,使用反码法时，取倒数就等于翻转字的每一位
Dialogue: 0,0:12:17.28,0:12:19.80,Default - CN,,0,0,0,,有一个专门的指令用来读出一个值然后取倒数
Dialogue: 0,0:12:19.80,0:12:22.56,Default - CN,,0,0,0,,ldc，全称是“取补数”，先从内存中读出一个字
Dialogue: 0,0:12:22.56,0:12:27.60,Default - CN,,0,0,0,,翻转所有位取倒数，然后把它写入累加器
Dialogue: 0,0:12:27.60,0:12:30.96,Default - CN,,0,0,0,,对一个字加1的递增操作，因为太常用了
Dialogue: 0,0:12:30.96,0:12:34.64,Default - CN,,0,0,0,,所以AGC也有一条专门的递增指令，对指定内存地址的值加1
Dialogue: 0,0:12:34.64,0:12:37.24,Default - CN,,0,0,0,,不过没有与之对应的递减指令
Dialogue: 0,0:12:37.24,0:12:40.52,Default - CN,,0,0,0,,但是有两个相似的指令代替这个功能：绝对值加、绝对值减
Dialogue: 0,0:12:40.52,0:12:43.36,Default - CN,,0,0,0,,递增指令是给原始值加1
Dialogue: 0,0:12:43.36,0:12:46.40,Default - CN,,0,0,0,,绝对值加指令会给所有正数加1
Dialogue: 0,0:12:46.40,0:12:48.04,Default - CN,,0,0,0,,对所有负数减1
Dialogue: 0,0:12:48.04,0:12:52.16,Default - CN,,0,0,0,,就是在保留符号的情况下递增绝对值
Dialogue: 0,0:12:52.16,0:12:57.08,Default - CN,,0,0,0,,绝对值减指令就是给所有正数减1、负数加1
Dialogue: 0,0:12:57.08,0:13:02.32,Default - CN,,0,0,0,,CPU为科学运算优化，搭载了乘法器电路
Dialogue: 0,0:13:02.32,0:13:06.24,Default - CN,,0,0,0,,mul指令从内存中读一个字并将其和累加器相乘
Dialogue: 0,0:13:06.24,0:13:08.76,Default - CN,,0,0,0,,当两个15位字相乘时
Dialogue: 0,0:13:08.76,0:13:12.16,Default - CN,,0,0,0,,最多要用到29位来储存结果，也就是要2个字的空间
Dialogue: 0,0:13:12.16,0:13:14.40,Default - CN,,0,0,0,,所以完整的结果要写到两个寄存器里
Dialogue: 0,0:13:14.40,0:13:17.16,Default - CN,,0,0,0,,高半截存在A中，低半截存在B中
Dialogue: 0,0:13:17.16,0:13:21.40,Default - CN,,0,0,0,,B寄存器是一个15位的寄存器，通常和累加器结合起来使用
Dialogue: 0,0:13:21.40,0:13:24.56,Default - CN,,0,0,0,,用来处理30位宽的数据
Dialogue: 0,0:13:24.56,0:13:27.72,Default - CN,,0,0,0,,对于双字宽的数据，高半截储存在A中，而在内存中则储存在低地址
Dialogue: 0,0:13:27.72,0:13:29.24,Default - CN,,0,0,0,,对于双字宽的数据，高半截储存在A中，而在内存中则储存在低地址
Dialogue: 0,0:13:29.24,0:13:31.92,Default - CN,,0,0,0,,低半截储存在B中，而在内存中则储存在高地址
Dialogue: 0,0:13:31.92,0:13:33.76,Default - CN,,0,0,0,,可见AGC是一台大端序的计算机
Dialogue: 0,0:13:33.76,0:13:36.04,Default - CN,,0,0,0,,考虑A、B中储存的都是符号位相同的规格化数
Dialogue: 0,0:13:36.04,0:13:42.28,Default - CN,,0,0,0,,那么它们合起来表示的有效值就是首尾拼接起来的2x14位宽的数值
Dialogue: 0,0:13:42.28,0:13:44.88,Default - CN,,0,0,0,,除法也要用到双字宽数据
Dialogue: 0,0:13:44.88,0:13:47.92,Default - CN,,0,0,0,,A与B寄存器结合形成的数值作为被除数
Dialogue: 0,0:13:47.92,0:13:49.76,Default - CN,,0,0,0,,内存中读出的值作为除数
Dialogue: 0,0:13:49.76,0:13:52.36,Default - CN,,0,0,0,,除法也会产生两个结果：商和余数
Dialogue: 0,0:13:52.36,0:13:55.84,Default - CN,,0,0,0,,商写入A寄存器，余数写入到B寄存器
Dialogue: 0,0:13:55.84,0:13:59.60,Default - CN,,0,0,0,,还有一些其他指令可以把A和B结合成双字宽寄存器使用
Dialogue: 0,0:13:59.60,0:14:03.44,Default - CN,,0,0,0,,这条指令“load ab，逗号，间接寻址 200”会先去内存地址200
Dialogue: 0,0:14:03.44,0:14:06.44,Default - CN,,0,0,0,,然后把这个内存单元的值读到A中、下个单元读到B中
Dialogue: 0,0:14:06.44,0:14:09.88,Default - CN,,0,0,0,,它也有一个“读补数”变体，会额外反转所有的位
Dialogue: 0,0:14:09.88,0:14:13.00,Default - CN,,0,0,0,,能一次把A和B写入内存的store指令并不存在
Dialogue: 0,0:14:13.00,0:14:15.24,Default - CN,,0,0,0,,但是有一个双字交换指令
Dialogue: 0,0:14:15.24,0:14:19.12,Default - CN,,0,0,0,,最后，有一个能进行双字相加的指令
Dialogue: 0,0:14:19.12,0:14:24.20,Default - CN,,0,0,0,,还有一个能用来单独读写B寄存器的交换指令
Dialogue: 0,0:14:24.20,0:14:27.92,Default - CN,,0,0,0,,如果需要查表，那么可以用变址寻址模式
Dialogue: 0,0:14:27.92,0:14:31.32,Default - CN,,0,0,0,,所有能传一个地址当参数的指令都可以用这个寻址模式
Dialogue: 0,0:14:31.32,0:14:35.60,Default - CN,,0,0,0,,这个例子是“load a，逗号，间接寻址：700加上间接寻址80”
Dialogue: 0,0:14:35.60,0:14:42.24,Default - CN,,0,0,0,,这条指令先去读内存地址080，把这里的数据与700相加，得到702
Dialogue: 0,0:14:42.24,0:14:46.00,Default - CN,,0,0,0,,然后从这个地址读数据，再写入到A中
Dialogue: 0,0:14:46.00,0:14:49.24,Default - CN,,0,0,0,,这样操作的意思是，基地址700处有一个表
Dialogue: 0,0:14:49.24,0:14:51.16,Default - CN,,0,0,0,,我们这里是一个3的倍数的表
Dialogue: 0,0:14:51.16,0:14:56.32,Default - CN,,0,0,0,,地址080处储存的是要查的表项的索引，例中是2
Dialogue: 0,0:14:56.32,0:15:01.16,Default - CN,,0,0,0,,所以我们读出了表中的第2项，结果为6
Dialogue: 0,0:15:01.16,0:15:03.80,Default - CN,,0,0,0,,当然也可以不提供基地址，指令语法就会变成这样
Dialogue: 0,0:15:03.80,0:15:05.92,Default - CN,,0,0,0,,load a，逗号，两重间接寻址 80
Dialogue: 0,0:15:05.92,0:15:08.32,Default - CN,,0,0,0,,这里基地址就是0了
Dialogue: 0,0:15:08.32,0:15:13.48,Default - CN,,0,0,0,,CPU会读内存地址080处的值，与基地址0相加
Dialogue: 0,0:15:13.48,0:15:17.00,Default - CN,,0,0,0,,这样值依然没变；然后再读这个地址
Dialogue: 0,0:15:17.00,0:15:22.60,Default - CN,,0,0,0,,这样，我们在080地址储存的东西，就相当于C语言中的指针
Dialogue: 0,0:15:22.60,0:15:25.20,Default - CN,,0,0,0,,3A0就是指针指向的那个不同的地址
Dialogue: 0,0:15:25.20,0:15:28.80,Default - CN,,0,0,0,,指令就（通过指针）进行了间接的读取
Dialogue: 0,0:15:29.60,0:15:32.60,Default - CN,,0,0,0,,一般情况下，指令执行都是顺序进行的
Dialogue: 0,0:15:32.60,0:15:35.60,Default - CN,,0,0,0,,程序计数器PC随着执行过程递增
Dialogue: 0,0:15:35.60,0:15:37.60,Default - CN,,0,0,0,,并且总是指向下一条指令
Dialogue: 0,0:15:37.60,0:15:41.76,Default - CN,,0,0,0,,而控制流指令，跳转/条件跳转就能改变它
Dialogue: 0,0:15:41.76,0:15:45.60,Default - CN,,0,0,0,,当CPU遇到跳转指令时，它会将地址参数载入PC寄存器
Dialogue: 0,0:15:45.60,0:15:49.08,Default - CN,,0,0,0,,这意味着CPU就会从那个地址继续执行代码
Dialogue: 0,0:15:49.08,0:15:54.16,Default - CN,,0,0,0,,jz，为0则跳转，只会在A等于0时跳转，否则会执行下一条指令
Dialogue: 0,0:15:54.16,0:15:58.68,Default - CN,,0,0,0,,类似地，jlez只在A小于或者等于0时跳转
Dialogue: 0,0:15:58.68,0:16:03.44,Default - CN,,0,0,0,,CCS，计数、比较、跳转指令是个有意思的指令，它有4条执行分支
Dialogue: 0,0:16:03.44,0:16:06.84,Default - CN,,0,0,0,,它会跳转到紧接着的4条指令之一
Dialogue: 0,0:16:06.84,0:16:11.80,Default - CN,,0,0,0,,取决于A中的值是正数、负数、+0还是-0
Dialogue: 0,0:16:11.80,0:16:13.68,Default - CN,,0,0,0,,如果你确信此时A的值只会为0或者为正
Dialogue: 0,0:16:13.68,0:16:16.76,Default - CN,,0,0,0,,你也可以忽略剩下的两个分支，只在前两个分支写好处理代码
Dialogue: 0,0:16:16.76,0:16:20.64,Default - CN,,0,0,0,,同样，如果数值只可能是负数，你也可以跳过前两个指令槽
Dialogue: 0,0:16:20.64,0:16:21.68,Default - CN,,0,0,0,,这些情况下，CPU永远都不应到达那些指令槽
Dialogue: 0,0:16:21.68,0:16:25.68,Default - CN,,0,0,0,,但更好的习惯是让这些分支跳转到错误处理代码
Dialogue: 0,0:16:25.68,0:16:30.40,Default - CN,,0,0,0,,由于CCS指令还会把某内存地址的值绝对值减1之后放入A
Dialogue: 0,0:16:30.40,0:16:33.28,Default - CN,,0,0,0,,所以在特殊情形中可以用它来递减A
Dialogue: 0,0:16:33.28,0:16:36.80,Default - CN,,0,0,0,,用CCS来实现向下计数的循环结构
Dialogue: 0,0:16:36.80,0:16:40.20,Default - CN,,0,0,0,,然后是call指令，用来调用子程序，调用函数
Dialogue: 0,0:16:40.20,0:16:42.52,Default - CN,,0,0,0,,它就是一个会保存调用来源的跳转指令
Dialogue: 0,0:16:42.52,0:16:44.32,Default - CN,,0,0,0,,这样被调方就可以返回回去
Dialogue: 0,0:16:44.32,0:16:46.76,Default - CN,,0,0,0,,执行call指令时，PC会先递增1，然后写到链接寄存器LR中
Dialogue: 0,0:16:46.76,0:16:49.24,Default - CN,,0,0,0,,执行call指令时，PC会先递增1，然后写到链接寄存器LR中
Dialogue: 0,0:16:49.24,0:16:52.44,Default - CN,,0,0,0,,最后，call指令的参数被复制到PC中
Dialogue: 0,0:16:52.44,0:16:54.16,Default - CN,,0,0,0,,处理器会从那个地址继续执行
Dialogue: 0,0:16:54.16,0:16:57.80,Default - CN,,0,0,0,,此时，链接寄存器LR中储存中返回地址
Dialogue: 0,0:16:57.80,0:16:58.92,Default - CN,,0,0,0,,在子程序的末尾
Dialogue: 0,0:16:58.92,0:17:03.00,Default - CN,,0,0,0,,ret（返回）指令基本上就是把LR寄存器复制到PC中
Dialogue: 0,0:17:03.00,0:17:07.48,Default - CN,,0,0,0,,然后处理器就可以从call执行之后的地方继续执行了
Dialogue: 0,0:17:07.48,0:17:09.40,Default - CN,,0,0,0,,如果子程序自己也想调用子程序
Dialogue: 0,0:17:09.40,0:17:11.28,Default - CN,,0,0,0,,那么程序必须自己先保存LR的值再调用
Dialogue: 0,0:17:11.28,0:17:15.08,Default - CN,,0,0,0,,调用完之后也要一并恢复LR的值，保存LR的操作也有一个专门的交换指令
Dialogue: 0,0:17:15.08,0:17:20.96,Default - CN,,0,0,0,,要实现更深的调用层级，就需要程序自行用变址寻址方式构造一个栈了
Dialogue: 0,0:17:20.96,0:17:22.88,Default - CN,,0,0,0,,目前我们已经学到了这些寄存器
Dialogue: 0,0:17:22.88,0:17:26.12,Default - CN,,0,0,0,,A寄存器，用来做访存操作和所有的算术操作
Dialogue: 0,0:17:26.12,0:17:28.80,Default - CN,,0,0,0,,它可以和B寄存器结合来实现双字宽算术
Dialogue: 0,0:17:28.80,0:17:31.20,Default - CN,,0,0,0,,程序计数器，记录着执行的地址
Dialogue: 0,0:17:31.20,0:17:34.12,Default - CN,,0,0,0,,还有链接寄存器，记录着调用子程序时的返回地址
Dialogue: 0,0:17:34.12,0:17:35.76,Default - CN,,0,0,0,,我们暂时没说的，有零寄存器
Dialogue: 0,0:17:35.76,0:17:38.52,Default - CN,,0,0,0,,读取它时，读到的值总是0
Dialogue: 0,0:17:38.52,0:17:41.04,Default - CN,,0,0,0,,写入它时，写入的值会被丢弃
Dialogue: 0,0:17:41.04,0:17:43.92,Default - CN,,0,0,0,,后面我们会讲到剩下的三个寄存器
Dialogue: 0,0:17:43.92,0:17:48.40,Default - CN,,0,0,0,,这八个寄存器还被映射到内存空间中
Dialogue: 0,0:17:48.40,0:17:52.16,Default - CN,,0,0,0,,内存空间的前8个字是由这些寄存器占据的
Dialogue: 0,0:17:52.16,0:17:56.64,Default - CN,,0,0,0,,这些映射到内存中的寄存器也可以用任何访存指令访问到
Dialogue: 0,0:17:56.64,0:17:59.24,Default - CN,,0,0,0,,这样，整个指令集就有了更大的自由度
Dialogue: 0,0:17:59.24,0:18:01.56,Default - CN,,0,0,0,,我们把内存地址1中的数据读到A里
Dialogue: 0,0:18:01.56,0:18:04.24,Default - CN,,0,0,0,,就可以实现把B寄存器的值载入到A寄存器中
Dialogue: 0,0:18:04.24,0:18:07.88,Default - CN,,0,0,0,,读零寄存器就是读内存地址7
Dialogue: 0,0:18:07.88,0:18:09.68,Default - CN,,0,0,0,,地址7就是零寄存器映射到的地址
Dialogue: 0,0:18:09.68,0:18:13.12,Default - CN,,0,0,0,,递增地址0就是递增寄存器A
Dialogue: 0,0:18:13.12,0:18:17.80,Default - CN,,0,0,0,,读的时候用两重间接寻址1，就可以拿B寄存器当作指针使用
Dialogue: 0,0:18:17.80,0:18:21.28,Default - CN,,0,0,0,,我们再细看一下内存空间
Dialogue: 0,0:18:21.28,0:18:25.56,Default - CN,,0,0,0,,内存有4096个字，地址从000到FFF
Dialogue: 0,0:18:25.56,0:18:27.88,Default - CN,,0,0,0,,寄存器位于内存的最低地址
Dialogue: 0,0:18:27.88,0:18:32.32,Default - CN,,0,0,0,,加上它们，有1024字的随机访问存储器RAM
Dialogue: 0,0:18:32.32,0:18:35.08,Default - CN,,0,0,0,,然后有3Ki字的只读储存器ROM
Dialogue: 0,0:18:35.08,0:18:38.80,Default - CN,,0,0,0,,AGC的原始设计中就只有这么多RAM和ROM可用
Dialogue: 0,0:18:38.80,0:18:42.20,Default - CN,,0,0,0,,但实际上可以用更多，先来看RAM区域
Dialogue: 0,0:18:42.20,0:18:43.48,Default - CN,,0,0,0,,RAM区域的高1/4是可以切换bank的
Dialogue: 0,0:18:43.48,0:18:47.28,Default - CN,,0,0,0,,这片区域可以选择映射为8个bank中的一个
Dialogue: 0,0:18:47.28,0:18:49.16,Default - CN,,0,0,0,,每个bank大小为256字
Dialogue: 0,0:18:47.28,0:18:49.16,Top Comments,,0,0,0,,译注：讲者口误
Dialogue: 0,0:18:49.16,0:18:53.16,Default - CN,,0,0,0,,可擦除内存bank寄存器，EB，控制这块区域的映射
Dialogue: 0,0:18:53.16,0:18:55.92,Default - CN,,0,0,0,,如果EB为0，分bank区域就映射为bank 0
Dialogue: 0,0:18:55.92,0:18:59.92,Default - CN,,0,0,0,,如果EB为5，分bank区域就映射为bank 5
Dialogue: 0,0:18:59.92,0:19:03.04,Default - CN,,0,0,0,,而固定的那片内存区域总是表示相同的RAM单元
Dialogue: 0,0:19:03.04,0:19:06.24,Default - CN,,0,0,0,,但它们不是独立的RAM单元，而是永远映射到bank 0、1、2
Dialogue: 0,0:19:06.24,0:19:12.72,Default - CN,,0,0,0,,这意味着总共有8x256字的RAM，总计2Ki字
Dialogue: 0,0:19:12.72,0:19:15.68,Default - CN,,0,0,0,,ROM的组织形式也类似：底部的1Ki字是分bank的
Dialogue: 0,0:19:15.68,0:19:20.76,Default - CN,,0,0,0,,固定内存bank寄存器，FB，用来选择映射到32个bank中的哪一个
Dialogue: 0,0:19:20.76,0:19:24.20,Default - CN,,0,0,0,,支持32个以上ROM bank的功能是最后紧急堆上去的
Dialogue: 0,0:19:24.20,0:19:28.12,Default - CN,,0,0,0,,“SUPERBNK”位可以把最高的8个ROM bank切换成另一组bank
Dialogue: 0,0:19:28.12,0:19:32.88,Default - CN,,0,0,0,,所以这套架构最多支持40Ki字的ROM
Dialogue: 0,0:19:32.88,0:19:36.64,Default - CN,,0,0,0,,固定映射的ROM区域也总是映射到两个ROM bank
Dialogue: 0,0:19:36.64,0:19:41.32,Default - CN,,0,0,0,,设计者选择让它们映射到bank 2和3以简化地址编码
Dialogue: 0,0:19:41.32,0:19:44.64,Default - CN,,0,0,0,,实际使用中，固定ROM区域包含了随时需要用到的操作系统代码
Dialogue: 0,0:19:44.64,0:19:48.72,Default - CN,,0,0,0,,固定RAM区域包含了随时要用的操作系统变量
Dialogue: 0,0:19:48.72,0:19:53.56,Default - CN,,0,0,0,,所有其余的功能都分散在各个不同的ROM和RAM bank中
Dialogue: 0,0:19:53.56,0:19:57.12,Default - CN,,0,0,0,,写EB寄存器可以切换RAM bank
Dialogue: 0,0:19:57.12,0:20:02.76,Default - CN,,0,0,0,,这个操作没有单独的指令，只是把A寄存器写到内存地址3
Dialogue: 0,0:20:02.76,0:20:08.24,Default - CN,,0,0,0,,如果A是5，把A写到EB中之后会让RAM bank 5出现在地址300处
Dialogue: 0,0:20:08.24,0:20:12.00,Default - CN,,0,0,0,,同样地，可以写入到位于内存地址4的FB寄存器来切换ROM bank
Dialogue: 0,0:20:12.00,0:20:15.88,Default - CN,,0,0,0,,但是这样的切换方式无法解决一个常见的问题
Dialogue: 0,0:20:15.88,0:20:18.72,Default - CN,,0,0,0,,如果一个bank的代码想要调用另一个bank的函数
Dialogue: 0,0:20:18.72,0:20:23.04,Default - CN,,0,0,0,,你要是想先写FB切换ROM bank再调用函数
Dialogue: 0,0:20:23.04,0:20:26.96,Default - CN,,0,0,0,,那刚开始写FB的操作之后，当前运行的代码所处的ROM bank就已经被换出了
Dialogue: 0,0:20:26.96,0:20:29.24,Default - CN,,0,0,0,,所以没法执行到你想执行的call指令
Dialogue: 0,0:20:29.24,0:20:31.64,Default - CN,,0,0,0,,只会在另一个bank相同偏移量的位置继续执行一些完全无关的代码
Dialogue: 0,0:20:31.64,0:20:34.60,Default - CN,,0,0,0,,只会在另一个bank相同偏移量的位置继续执行一些完全无关的代码
Dialogue: 0,0:20:34.60,0:20:38.96,Default - CN,,0,0,0,,如果要调用另一个bank中的代码，就要同时原子地改变FB和PC寄存器
Dialogue: 0,0:20:38.96,0:20:43.24,Default - CN,,0,0,0,,call f是前面已经说过的双字交换指令的别名
Dialogue: 0,0:20:43.24,0:20:48.96,Default - CN,,0,0,0,,代码需要先把bank号和PC加载到A和B寄存器中
Dialogue: 0,0:20:48.96,0:20:54.80,Default - CN,,0,0,0,,然后call f会原子地将A、B和FB、PC进行交换
Dialogue: 0,0:20:54.80,0:20:57.56,Default - CN,,0,0,0,,同样的交换指令也可以用来做一个远调用返回
Dialogue: 0,0:20:57.56,0:21:02.08,Default - CN,,0,0,0,,也就是把FB和PC的原始值再还原回去
Dialogue: 0,0:21:02.08,0:21:06.08,Default - CN,,0,0,0,,两个bank寄存器分别只保存了5位和3位的bank号
Dialogue: 0,0:21:06.08,0:21:10.20,Default - CN,,0,0,0,,剩余的位都是0，然后还有一个BB寄存器，表示“两种bank”
Dialogue: 0,0:21:10.20,0:21:13.32,Default - CN,,0,0,0,,这个寄存器就会把另外两个bank寄存器的信息结合起来
Dialogue: 0,0:21:13.32,0:21:16.92,Default - CN,,0,0,0,,“远调用 两种bank” callfbb指令也是一个双字交换指令
Dialogue: 0,0:21:16.92,0:21:20.04,Default - CN,,0,0,0,,它交换的是PC和BB寄存器，可以同时修改RAM和ROM bank的映射
Dialogue: 0,0:21:20.04,0:21:24.08,Default - CN,,0,0,0,,子程序私有的变量通常都存在一些特定的RAM bank里面
Dialogue: 0,0:21:24.08,0:21:27.44,Default - CN,,0,0,0,,callfbb指令会在把控制权移交给另一个ROM bank中的代码的同时
Dialogue: 0,0:21:27.44,0:21:31.60,Default - CN,,0,0,0,,也切换RAM bank映射，这样被调用方就能立即看到它的私有变量了
Dialogue: 0,0:21:31.60,0:21:36.92,Default - CN,,0,0,0,,“远返回 两种bank” retfbb指令返回调用方的同时也会还原RAM bank映射
Dialogue: 0,0:21:36.92,0:21:39.52,Default - CN,,0,0,0,,寄存器映射的顺序做得这么奇怪
Dialogue: 0,0:21:39.52,0:21:42.08,Default - CN,,0,0,0,,就是为了能一次同时交换紧挨着的FB和PC组合
Dialogue: 0,0:21:42.08,0:21:46.60,Default - CN,,0,0,0,,以及同时交换PC和BB的组合
Dialogue: 0,0:21:46.60,0:21:48.40,Default - CN,,0,0,0,,现在这8个寄存器我们都认识了
Dialogue: 0,0:21:48.40,0:21:52.00,Default - CN,,0,0,0,,但是在它们的地址之上还有8个影子寄存器空间
Dialogue: 0,0:21:52.00,0:21:53.00,Default - CN,,0,0,0,,后面会讲到
Dialogue: 0,0:21:53.00,0:21:55.84,Default - CN,,0,0,0,,在这堆寄存器之上，还有4个所谓的“编辑寄存器”
Dialogue: 0,0:21:55.84,0:21:58.76,Default - CN,,0,0,0,,这是为了补偿那些塞不下了的移位指令
Dialogue: 0,0:21:58.76,0:22:03.00,Default - CN,,0,0,0,,向ROR（向右循环移位）编辑寄存器里写数值时
Dialogue: 0,0:22:03.00,0:22:07.32,Default - CN,,0,0,0,,数值会被向右移一位，最低位会循环回到最高位
Dialogue: 0,0:22:07.32,0:22:09.68,Default - CN,,0,0,0,,然后可以把结果回读
Dialogue: 0,0:22:09.68,0:22:12.08,Default - CN,,0,0,0,,ROL寄存器就是向左循环移位
Dialogue: 0,0:22:12.08,0:22:15.32,Default - CN,,0,0,0,,SHR，向右算术移位，最高位符号扩展
Dialogue: 0,0:22:15.32,0:22:20.08,Default - CN,,0,0,0,,还有一个SHR7， 向右移7位，高位填0
Dialogue: 0,0:22:20.08,0:22:24.08,Default - CN,,0,0,0,,这个是之后我们要讲的解释器系统要用到的机制
Dialogue: 0,0:22:25.04,0:22:28.52,Default - CN,,0,0,0,,我们已经知道CPU通过内存总线连接着ROM和RAM了
Dialogue: 0,0:22:28.52,0:22:32.76,Default - CN,,0,0,0,,但是计算机还要和外设通过I/O总线通讯
Dialogue: 0,0:22:32.76,0:22:35.16,Default - CN,,0,0,0,,我们刚刚讲过了内存的地址空间
Dialogue: 0,0:22:35.16,0:22:37.76,Default - CN,,0,0,0,,而对于与外设通讯，还有另一个地址空间
Dialogue: 0,0:22:37.76,0:22:42.00,Default - CN,,0,0,0,,这里面有512个I/O通道，地址从000到FFF
Dialogue: 0,0:22:42.00,0:22:43.88,Default - CN,,0,0,0,,每个通道有15位宽
Dialogue: 0,0:22:43.88,0:22:48.36,Default - CN,,0,0,0,,in和out指令可以从I/O通道中读写数据
Dialogue: 0,0:22:48.36,0:22:53.00,Default - CN,,0,0,0,,对于很多设备来说一个通道就是15个单独的控制位
Dialogue: 0,0:22:53.00,0:22:55.72,Default - CN,,0,0,0,,一个控制位可以，比方说，点亮屏幕上的一个灯泡
Dialogue: 0,0:22:55.72,0:22:58.44,Default - CN,,0,0,0,,out| 指令可以置位特定位
Dialogue: 0,0:22:58.44,0:23:01.88,Default - CN,,0,0,0,,out& 指令可以清除特定位
Dialogue: 0,0:23:01.88,0:23:05.68,Default - CN,,0,0,0,,所以I/O指令可以操作整个字宽的数据，也可以做三种布尔运算
Dialogue: 0,0:23:05.68,0:23:09.76,Default - CN,,0,0,0,,与、或、异或
Dialogue: 0,0:23:09.76,0:23:12.64,Default - CN,,0,0,0,,为了让寄存器也能用上布尔运算
Dialogue: 0,0:23:12.64,0:23:18.00,Default - CN,,0,0,0,,通道1和2实际上是B和LR寄存器的映射
Dialogue: 0,0:23:18.00,0:23:20.48,Default - CN,,0,0,0,,这样就可以写这些指令（来做布尔运算了）
Dialogue: 0,0:23:20.48,0:23:25.20,Default - CN,,0,0,0,,与运算还有一个单独的指令，对A寄存器和内存中的数值求按位与
Dialogue: 0,0:23:25.20,0:23:29.44,Default - CN,,0,0,0,,说完了寄存器、影子寄存器、编辑寄存器之后
Dialogue: 0,0:23:29.44,0:23:31.68,Default - CN,,0,0,0,,还有一个特殊区域：计数器
Dialogue: 0,0:23:31.68,0:23:34.24,Default - CN,,0,0,0,,它们和I/O通道很像，都连接了外部的设备
Dialogue: 0,0:23:34.24,0:23:36.96,Default - CN,,0,0,0,,但它们不能发送比特流或者存数据
Dialogue: 0,0:23:36.96,0:23:41.16,Default - CN,,0,0,0,,而是要么由硬件脉冲控制，要么控制硬件产生脉冲
Dialogue: 0,0:23:41.16,0:23:44.16,Default - CN,,0,0,0,,例如，每次脉冲到来时，TIME1都会递增
Dialogue: 0,0:23:44.16,0:23:51.20,Default - CN,,0,0,0,,其他的计数器，则把代码存进它们里面的数值减1，并产生脉冲
Dialogue: 0,0:23:51.20,0:23:55.20,Default - CN,,0,0,0,,I/O设备要向CPU发信号时，它们可以打断正常的程序执行
Dialogue: 0,0:23:55.20,0:23:58.00,Default - CN,,0,0,0,,在程序计数器旁边
Dialogue: 0,0:23:58.00,0:24:01.08,Default - CN,,0,0,0,,有一个指令寄存器保存当前的指令码
Dialogue: 0,0:24:01.08,0:24:06.32,Default - CN,,0,0,0,,当中断产生时，CPU把PC复制到一个特殊的地址PC'
Dialogue: 0,0:24:06.32,0:24:10.88,Default - CN,,0,0,0,,IR也复制到IR'，然后根据中断的类型跳转到一个特定的地址
Dialogue: 0,0:24:10.88,0:24:12.72,Default - CN,,0,0,0,,在这里，是跳转到814
Dialogue: 0,0:24:12.72,0:24:15.04,Default - CN,,0,0,0,,当中断处理程序完成中断处理后
Dialogue: 0,0:24:15.04,0:24:18.60,Default - CN,,0,0,0,,iret指令会把PC'和IR'复制回PC和IR
Dialogue: 0,0:24:18.60,0:24:22.04,Default - CN,,0,0,0,,程序就能从原来的地方继续执行了
Dialogue: 0,0:24:22.04,0:24:26.68,Default - CN,,0,0,0,,内存地址8到F是8个CPU寄存器的影子寄存器
Dialogue: 0,0:24:26.68,0:24:29.36,Default - CN,,0,0,0,,PC和IR是由中断自动保存的
Dialogue: 0,0:24:29.36,0:24:32.68,Default - CN,,0,0,0,,其余的寄存器如果需要保存，软件需要自行保存
Dialogue: 0,0:24:32.68,0:24:37.00,Default - CN,,0,0,0,,溢出状态位是无法保存或者恢复的
Dialogue: 0,0:24:37.00,0:24:38.76,Default - CN,,0,0,0,,所以产生溢出情况时
Dialogue: 0,0:24:38.76,0:24:44.52,Default - CN,,0,0,0,,直到下一条store指令解决溢出条件之前，中断都会被禁用
Dialogue: 0,0:24:44.52,0:24:50.28,Default - CN,,0,0,0,,11个中断处理程序必须位于固定ROM的800地址处
Dialogue: 0,0:24:50.28,0:24:54.60,Default - CN,,0,0,0,,每个表项有4个字的空间，一般操作都是保存A和B寄存器
Dialogue: 0,0:24:54.60,0:25:00.32,Default - CN,,0,0,0,,给A和B里加载一个bank和PC值，然后用callfbb远调用跳过去
Dialogue: 0,0:25:00.32,0:25:05.44,Default - CN,,0,0,0,,0号中断比较特殊，是复位向量
Dialogue: 0,0:25:05.44,0:25:07.40,Default - CN,,0,0,0,,除了中断返回指令外
Dialogue: 0,0:25:07.40,0:25:09.84,Default - CN,,0,0,0,,还有一个触发软件中断的指令
Dialogue: 0,0:25:09.84,0:25:12.76,Default - CN,,0,0,0,,以及全局启用和禁用中断的指令
Dialogue: 0,0:25:12.76,0:25:16.80,Default - CN,,0,0,0,,在内存地址37处还有一个特殊地址：看门狗
Dialogue: 0,0:25:16.80,0:25:22.32,Default - CN,,0,0,0,,这个地址每0.64s要至少读写一次
Dialogue: 0,0:25:22.32,0:25:27.12,Default - CN,,0,0,0,,否则硬件会认为软件已经跑死了并且重启
Dialogue: 0,0:25:27.12,0:25:29.52,Default - CN,,0,0,0,,刚刚我们看过了指令集
Dialogue: 0,0:25:29.52,0:25:33.04,Default - CN,,0,0,0,,还有样例里面给出的部分特定指令的编码形式
Dialogue: 0,0:25:33.04,0:25:34.92,Default - CN,,0,0,0,,接下来讲讲指令编码方式
Dialogue: 0,0:25:34.92,0:25:38.64,Default - CN,,0,0,0,,load指令，高3位代表load操作
Dialogue: 0,0:25:38.64,0:25:42.28,Default - CN,,0,0,0,,剩余的12位编码地址
Dialogue: 0,0:25:42.28,0:25:44.12,Default - CN,,0,0,0,,如此就有了8种指令的编码空间
Dialogue: 0,0:25:44.12,0:25:46.28,Default - CN,,0,0,0,,但是AGC的指令远不止8条
Dialogue: 0,0:25:46.28,0:25:51.88,Default - CN,,0,0,0,,已知RAM占据的地址高两位总是00，而对于ROM地址总是非零
Dialogue: 0,0:25:51.88,0:25:55.08,Default - CN,,0,0,0,,所以只能写入到RAM中的store指令
Dialogue: 0,0:25:55.08,0:25:59.48,Default - CN,,0,0,0,,就只需要编码10位的地址
Dialogue: 0,0:25:59.48,0:26:02.60,Default - CN,,0,0,0,,多出来的2位可以再编码3条只能操作RAM的指令
Dialogue: 0,0:26:02.60,0:26:06.80,Default - CN,,0,0,0,,递增指令也是如法炮制，就又能多编码3条指令
Dialogue: 0,0:26:06.80,0:26:12.64,Default - CN,,0,0,0,,CCS则是反过来利用jmp指令只在ROM中跳转的条件，把地址高位为00编码成CCS
Dialogue: 0,0:26:12.64,0:26:15.64,Default - CN,,0,0,0,,因为jmp跳转到bank寄存器的地址也是没有意义的
Dialogue: 0,0:26:15.64,0:26:20.28,Default - CN,,0,0,0,,这些编码分别被编码成了开中断（sti）、关中断（cli）、扩展（extend）
Dialogue: 0,0:26:20.28,0:26:25.76,Default - CN,,0,0,0,,“扩展”实际上不是单独的指令，而是一个前缀，改变下一条指令的操作码的含义
Dialogue: 0,0:26:25.76,0:26:28.72,Default - CN,,0,0,0,,这样就又多了一组占据双字长度的新指令
Dialogue: 0,0:26:28.72,0:26:34.24,Default - CN,,0,0,0,,还有一个特殊指令，call 2，也就是call LR
Dialogue: 0,0:26:34.24,0:26:35.68,Default - CN,,0,0,0,,它的作用是从子程序返回
Dialogue: 0,0:26:35.68,0:26:37.52,Default - CN,,0,0,0,,但是CPU并不会对这条指令作特殊处理
Dialogue: 0,0:26:37.52,0:26:40.28,Default - CN,,0,0,0,,因为“子程序返回”只是“调用内存地址2”的副作用
Dialogue: 0,0:26:40.28,0:26:44.24,Default - CN,,0,0,0,,它会“执行”LR寄存器中的返回地址
Dialogue: 0,0:26:44.24,0:26:47.48,Default - CN,,0,0,0,,因为字长比地址宽3位，高位补的0在解码之后就变成了另一条call指令
Dialogue: 0,0:26:47.48,0:26:52.20,Default - CN,,0,0,0,,最后通过这条call指令的执行，把控制权移交到调用方
Dialogue: 0,0:26:52.20,0:26:55.48,Default - CN,,0,0,0,,变址寻址方式也是通过叫做index的前缀实现的
Dialogue: 0,0:26:55.48,0:26:59.84,Default - CN,,0,0,0,,使用变址寻址方式的指令包含两个指令字：index前缀，和指令本体
Dialogue: 0,0:26:59.84,0:27:02.36,Default - CN,,0,0,0,,指令本体的地址参数是基址
Dialogue: 0,0:27:02.36,0:27:05.80,Default - CN,,0,0,0,,index指令的地址参数指向储存变址偏移量的内存
Dialogue: 0,0:27:05.80,0:27:07.56,Default - CN,,0,0,0,,与extend不同的是，index是一条真实的指令
Dialogue: 0,0:27:07.56,0:27:11.24,Default - CN,,0,0,0,,CPU会先从index指令指定的内存地址读取，这里的地址是080
Dialogue: 0,0:27:11.24,0:27:17.44,Default - CN,,0,0,0,,然后把这个值：3，与下一个指令字：这里是3700，加起来
Dialogue: 0,0:27:17.44,0:27:19.52,Default - CN,,0,0,0,,然后再把它保存到内部的IR寄存器中
Dialogue: 0,0:27:19.52,0:27:23.84,Default - CN,,0,0,0,,然后CPU就会用这个加出来的指令码3703作为下一条指令执行
Dialogue: 0,0:27:23.84,0:27:28.16,Default - CN,,0,0,0,,最后执行出来的操作就是从有效地址703读取
Dialogue: 0,0:27:28.16,0:27:31.60,Default - CN,,0,0,0,,如果在index指令执行后产生了中断，这个情况不会有问题
Dialogue: 0,0:27:31.60,0:27:35.64,Default - CN,,0,0,0,,因为中断时IR会被暂存到IR'寄存器
Dialogue: 0,0:27:35.64,0:27:38.40,Default - CN,,0,0,0,,从中断返回之后会再从IR'还原
Dialogue: 0,0:27:38.40,0:27:40.48,Default - CN,,0,0,0,,最后的最后，有一个特殊的index指令变体也有特殊含义
Dialogue: 0,0:27:40.48,0:27:43.36,Default - CN,,0,0,0,,当它的地址参数指向影子IR'寄存器的地址时
Dialogue: 0,0:27:43.36,0:27:46.16,Default - CN,,0,0,0,,它就是作为“从中断返回”指令使用的
Dialogue: 0,0:27:46.16,0:27:48.28,Default - CN,,0,0,0,,总体来看，AGC的指令集
Dialogue: 0,0:27:48.28,0:27:51.72,Default - CN,,0,0,0,,和现代架构相比具有很多奇异独特的特性
Dialogue: 0,0:27:51.72,0:27:54.12,Default - CN,,0,0,0,,整数表示法使用的是反码而不是补码
Dialogue: 0,0:27:54.12,0:27:55.84,Default - CN,,0,0,0,,没有状态位寄存器
Dialogue: 0,0:27:55.84,0:28:00.52,Default - CN,,0,0,0,,溢出标志位甚至不能在中断时保存，得一直把中断关到溢出情况处理掉
Dialogue: 0,0:28:00.52,0:28:04.40,Default - CN,,0,0,0,,store指令在特定情况下可能跳过一个指令字
Dialogue: 0,0:28:04.40,0:28:07.72,Default - CN,,0,0,0,,CCS指令更是可能跳过好几个指令字
Dialogue: 0,0:28:07.72,0:28:11.04,Default - CN,,0,0,0,,如果它紧接着的指令有用到前缀，那会非常危险
Dialogue: 0,0:28:11.04,0:28:12.92,Default - CN,,0,0,0,,移位指令也不存在
Dialogue: 0,0:28:12.92,0:28:16.60,Default - CN,,0,0,0,,取而代之的是一些写入之后就可以帮你进行移位的妙妙内存地址
Dialogue: 0,0:28:16.60,0:28:19.56,Default - CN,,0,0,0,,大部分的布尔运算都只能在I/O通道上使用
Dialogue: 0,0:28:19.56,0:28:22.84,Default - CN,,0,0,0,,变址寻址是通过调包下一个指令字实现的
Dialogue: 0,0:28:22.84,0:28:28.40,Default - CN,,0,0,0,,架构更是没有任何关于栈的概念，如果要用到栈，就得用变址寻址手搓
Dialogue: 0,0:28:28.40,0:28:31.32,Default - CN,,0,0,0,,这就是阿波罗导航计算机的整体架构
Dialogue: 0,0:28:31.32,0:28:35.08,Default - CN,,0,0,0,,下面我们来看看硬件上是如何实现的这个架构
Dialogue: 0,0:28:35.08,0:28:37.60,Default - CN,,0,0,0,,硬件的时钟频率约为1MHz，用微码驱动执行组件
Dialogue: 0,0:28:37.60,0:28:41.52,Default - CN,,0,0,0,,逻辑使用集成电路搭建而成，使用磁芯储存器
Dialogue: 0,0:28:41.52,0:28:44.80,Default - CN,,0,0,0,,我们从框图开始，然后讲讲指令的微码实现
Dialogue: 0,0:28:44.80,0:28:50.28,Default - CN,,0,0,0,,最后简单谈谈电路图是怎么变成那些机架上的模组里面的集成电路的
Dialogue: 0,0:28:50.28,0:28:54.00,Default - CN,,0,0,0,,这是AGC硬件层面的简化版原理框图
Dialogue: 0,0:28:54.00,0:28:56.72,Default - CN,,0,0,0,,每个框里面有500个左右量级的逻辑门
Dialogue: 0,0:28:56.72,0:28:59.44,Default - CN,,0,0,0,,虚线是1位宽度的信号线
Dialogue: 0,0:28:59.44,0:29:04.20,Default - CN,,0,0,0,,实线是15位、一个字宽度的数据总线
Dialogue: 0,0:29:04.20,0:29:08.36,Default - CN,,0,0,0,,左边这些单元处理时序和控制逻辑，中间这些是CPU的核心单元
Dialogue: 0,0:29:08.36,0:29:12.52,Default - CN,,0,0,0,,中心的寄存器单元包含了A、B、链接（LR）、程序计数器（PC）寄存器
Dialogue: 0,0:29:12.52,0:29:16.04,Default - CN,,0,0,0,,算术单元可以做加减法
Dialogue: 0,0:29:16.04,0:29:20.12,Default - CN,,0,0,0,,右边的内存单元负责和RAM与ROM对接
Dialogue: 0,0:29:20.12,0:29:23.52,Default - CN,,0,0,0,,主频约1MHz的时序信号进入到时序发生器中
Dialogue: 0,0:29:23.52,0:29:28.16,Default - CN,,0,0,0,,这个时序发生器会在固定的12个阶段进行循环，一个循环称作一个内存周期MCT
Dialogue: 0,0:29:28.16,0:29:32.24,Default - CN,,0,0,0,,通常，一条指令需要几次访存操作，它执行所需的时间就等于访存操作所需的内存周期
Dialogue: 0,0:29:32.24,0:29:35.60,Default - CN,,0,0,0,,所以load、add、store要花费2内存周期，跳转要花费1周期
Dialogue: 0,0:29:35.60,0:29:40.56,Default - CN,,0,0,0,,时序发生器中包含了每种指令在每个内存周期要执行的12个微指令
Dialogue: 0,0:29:40.56,0:29:43.96,Default - CN,,0,0,0,,以load指令为例，每个指令的每个1/12步骤
Dialogue: 0,0:29:43.96,0:29:50.20,Default - CN,,0,0,0,,时序发生器中的表项都会向其他单元发送控制脉冲
Dialogue: 0,0:29:50.20,0:29:53.00,Default - CN,,0,0,0,,这些单元通过写总线相互连接
Dialogue: 0,0:29:53.00,0:29:58.28,Default - CN,,0,0,0,,控制信号WA会让寄存器单元将A寄存器的内容放到写总线上
Dialogue: 0,0:29:58.28,0:30:03.68,Default - CN,,0,0,0,,RA会让寄存器单元将写总线上的内容写入到A寄存器中
Dialogue: 0,0:30:03.68,0:30:05.52,Default - CN,,0,0,0,,内存也是通过写总线连接的
Dialogue: 0,0:30:05.52,0:30:08.76,Default - CN,,0,0,0,,WS信号会把写总线上的内容复制到内存地址寄存器中
Dialogue: 0,0:30:08.76,0:30:11.72,Default - CN,,0,0,0,,RG和WG信号分别控制临时寄存器G的读写
Dialogue: 0,0:30:11.72,0:30:15.32,Default - CN,,0,0,0,,用来在读操作后和写操作前缓存内存单元中的数据内容
Dialogue: 0,0:30:15.32,0:30:22.00,Default - CN,,0,0,0,,例如，在load指令的T7阶段，RG信号使读内存的结果被呈现到总线上
Dialogue: 0,0:30:22.00,0:30:27.76,Default - CN,,0,0,0,,随后WB信号把总线上的内容写入到一个缓存寄存器B中
Dialogue: 0,0:30:22.00,0:30:27.76,Top Comments,,0,0,0,,译注：请与CPU的B寄存器区分开：CPU的B寄存器在图中为L
Dialogue: 0,0:30:27.76,0:30:32.36,Default - CN,,0,0,0,,在T10阶段时，缓存寄存器的值被放到总线上，然后读入到A寄存器中
Dialogue: 0,0:30:32.36,0:30:37.52,Default - CN,,0,0,0,,每个内存周期开始时，硬件将指令立即数中编码的地址告诉内存单元
Dialogue: 0,0:30:37.52,0:30:41.12,Default - CN,,0,0,0,,然后再把内存单元中的数值复制到G寄存器中
Dialogue: 0,0:30:41.12,0:30:45.76,Default - CN,,0,0,0,,在内存周期的下半程，硬件会将G写回到原来的内存单元中
Dialogue: 0,0:30:45.76,0:30:48.08,Default - CN,,0,0,0,,如果我们把微码和内存时序并列比较
Dialogue: 0,0:30:48.08,0:30:51.28,Default - CN,,0,0,0,,然后再把微码的操作翻译成容易看懂的伪指令
Dialogue: 0,0:30:51.28,0:30:55.36,Default - CN,,0,0,0,,就能看到硬件是先把内存内容先载入到G寄存器中，复制到B寄存器中
Dialogue: 0,0:30:51.28,0:30:55.36,Top Comments,,0,0,0,,译注：请与CPU的B寄存器区分开：CPU的B寄存器在图中为L
Dialogue: 0,0:30:55.36,0:30:57.00,Default - CN,,0,0,0,,最后才写入到A寄存器中
Dialogue: 0,0:30:57.04,0:30:59.04,Default - CN,,0,0,0,,更有意思的是交换指令
Dialogue: 0,0:30:59.04,0:31:04.88,Default - CN,,0,0,0,,它先是把A寄存器保存到B中，把内存单元的数据读入到G，然后把G写到A里
Dialogue: 0,0:31:04.88,0:31:09.60,Default - CN,,0,0,0,,把B寄存器中A原来的值写到G里，再把G写入到内存
Dialogue: 0,0:31:09.60,0:31:14.16,Default - CN,,0,0,0,,除法要花费好几个内存周期，微码复杂度也随之极大增加
Dialogue: 0,0:31:14.16,0:31:17.52,Default - CN,,0,0,0,,微码的数量比机器码指令的数量还要更多
Dialogue: 0,0:31:17.52,0:31:20.32,Default - CN,,0,0,0,,因为整个计算机只有一个加法单元
Dialogue: 0,0:31:20.32,0:31:24.96,Default - CN,,0,0,0,,递增和递减计数器也是通过把计数脉冲变成特殊的指令
Dialogue: 0,0:31:24.96,0:31:28.08,Default - CN,,0,0,0,,插入到指令流中来实现的
Dialogue: 0,0:31:28.08,0:31:32.16,Default - CN,,0,0,0,,总共有14个这样的“非编程序列”，它们都有自己的微码
Dialogue: 0,0:31:32.16,0:31:36.08,Default - CN,,0,0,0,,有的用来对计数器移位，有的是和硬件调试功能交互
Dialogue: 0,0:31:36.08,0:31:41.56,Default - CN,,0,0,0,,还有这两个用来控制中断和复位时序
Dialogue: 0,0:31:41.56,0:31:46.52,Default - CN,,0,0,0,,整机的原理图只有49页，在公开网络可查阅
Dialogue: 0,0:31:46.52,0:31:51.28,Default - CN,,0,0,0,,整台计算机只使用了一种三输入与非门搭建
Dialogue: 0,0:31:51.28,0:31:54.04,Default - CN,,0,0,0,,一片集成电路上有两个这样的与非门
Dialogue: 0,0:31:54.04,0:31:57.68,Default - CN,,0,0,0,,一块逻辑模块中包含上百个这样的逻辑门芯片
Dialogue: 0,0:32:00.04,0:32:04.80,Default - CN,,0,0,0,,在A机架上会搭载24个这样的逻辑模块，以及一些接口模块和电源模块互联
Dialogue: 0,0:32:04.80,0:32:07.28,Default - CN,,0,0,0,,还包括I/O和调试用的连接器
Dialogue: 0,0:32:07.28,0:32:11.80,Default - CN,,0,0,0,,机架B则包含了各种驱动器电路、放大器模块、ROM和RAM
Dialogue: 0,0:32:11.80,0:32:16.08,Default - CN,,0,0,0,,RAM是磁芯储存器，所有的比特都储存在这些磁化的磁芯中
Dialogue: 0,0:32:16.08,0:32:18.80,Default - CN,,0,0,0,,因为读出时会将数据清零，所以内存时序电路会保证在读出之后再把原来的值写回
Dialogue: 0,0:32:18.80,0:32:22.28,Default - CN,,0,0,0,,因为读出时会将数据清零，所以内存时序电路会保证在读出之后再把原来的值写回
Dialogue: 0,0:32:22.28,0:32:26.64,Default - CN,,0,0,0,,由于没有搭载磁带这样的外存装置，AGC搭载了巨量的ROM
Dialogue: 0,0:32:26.64,0:32:33.04,Default - CN,,0,0,0,,这种磁芯ROM通过导线穿过还是绕过一个磁芯来编码逻辑值
Dialogue: 0,0:32:33.04,0:32:37.04,Default - CN,,0,0,0,,每台计算机有50万比特的ROM容量，完全手工织造
Dialogue: 0,0:32:37.04,0:32:41.08,Default - CN,,0,0,0,,A、B机架会面对面扣合密封
Dialogue: 0,0:32:41.08,0:32:43.72,Default - CN,,0,0,0,,组装完成之后就是一台非常紧凑的计算机
Dialogue: 0,0:32:43.72,0:32:47.52,Default - CN,,0,0,0,,这是它安装在飞船上的方向
Dialogue: 0,0:32:47.52,0:32:52.48,Default - CN,,0,0,0,,外部可以接触到六个ROM模块，所以理论上在飞行任务中甚至也可以替换
Dialogue: 0,0:32:52.48,0:32:54.52,Default - CN,,0,0,0,,以上就是硬件部分
Dialogue: 0,0:32:54.52,0:33:00.68,Default - CN,,0,0,0,,下面我们来介绍AGC的外设
Dialogue: 0,0:33:00.68,0:33:04.60,Default - CN,,0,0,0,,
Dialogue: 0,0:33:04.60,0:33:08.08,Default - CN,,0,0,0,,我们来介绍AGC连接的外设
Dialogue: 0,0:33:08.08,0:33:12.28,Default - CN,,0,0,0,,首先是重中之重的核心外设，维持飞船的状态向量
Dialogue: 0,0:33:12.28,0:33:15.00,Default - CN,,0,0,0,,有一些非常特殊的外设在其他计算机上是见不到的
Dialogue: 0,0:33:15.00,0:33:18.84,Default - CN,,0,0,0,,最后是宇航员和控制中心通讯使用的外设
Dialogue: 0,0:33:18.84,0:33:22.96,Default - CN,,0,0,0,,AGC最开始设计时就是围绕陀螺仪做的文章
Dialogue: 0,0:33:22.96,0:33:27.52,Default - CN,,0,0,0,,AGC一开始会用CDU指令计数器把它转到一个特定角度
Dialogue: 0,0:33:27.52,0:33:30.64,Default - CN,,0,0,0,,之后陀螺仪就会开始检测飞船三个轴上的旋转
Dialogue: 0,0:33:30.64,0:33:32.56,Default - CN,,0,0,0,,旋转数值可以从CDU计数器读出
Dialogue: 0,0:33:32.56,0:33:37.84,Default - CN,,0,0,0,,有了陀螺仪飞船就可以时刻知晓自己在宇宙中的姿态
Dialogue: 0,0:33:37.84,0:33:40.84,Default - CN,,0,0,0,,加速度计用来维持三个轴向上的加速度
Dialogue: 0,0:33:40.84,0:33:44.52,Default - CN,,0,0,0,,三个轴向的加速度可以从这三个PIPA计数器读出
Dialogue: 0,0:33:44.52,0:33:49.24,Default - CN,,0,0,0,,指令舱上的光学仪器是用来测量飞船与星体之间的相对方位的
Dialogue: 0,0:33:49.24,0:33:52.20,Default - CN,,0,0,0,,在计算机上可以用OPT指令计数器来移动光学仪器
Dialogue: 0,0:33:52.20,0:33:55.44,Default - CN,,0,0,0,,把它指向恒星的大致方向，然后宇航员可以进行微调
Dialogue: 0,0:33:55.44,0:33:58.08,Default - CN,,0,0,0,,微调的结果可以从OPT计数器中读出
Dialogue: 0,0:33:58.08,0:34:00.64,Default - CN,,0,0,0,,着陆雷达位于登月舱的底部
Dialogue: 0,0:34:00.64,0:34:02.16,Default - CN,,0,0,0,,测量与地面之间的高度
Dialogue: 0,0:34:02.16,0:34:05.20,Default - CN,,0,0,0,,每当有新测量数据可用时，会触发RADARUPT中断（雷达中断）
Dialogue: 0,0:34:05.20,0:34:08.12,Default - CN,,0,0,0,,然后RNRAD计数器中就可以读出新的测量值
Dialogue: 0,0:34:08.12,0:34:13.00,Default - CN,,0,0,0,,登月舱的交会雷达会在交会时测量登月舱和指令与服务舱之间的距离
Dialogue: 0,0:34:13.00,0:34:18.20,Default - CN,,0,0,0,,在CDUT和CDUS计数器中设置了两个角度将它对准飞船的另外一部分时
Dialogue: 0,0:34:18.20,0:34:21.92,Default - CN,,0,0,0,,交会雷达就会自动跟踪对方，并在有新数据时产生RADARUPT中断
Dialogue: 0,0:34:21.92,0:34:24.60,Default - CN,,0,0,0,,同样也可以从RNRAD计数器读出
Dialogue: 0,0:34:24.60,0:34:28.88,Default - CN,,0,0,0,,指令舱、服务舱和登月舱都搭载了姿态控制系统
Dialogue: 0,0:34:28.88,0:34:33.04,Default - CN,,0,0,0,,RCS，就是这些维持或者改变姿态的小引擎
Dialogue: 0,0:34:33.04,0:34:35.68,Default - CN,,0,0,0,,登月舱上有16个喷嘴，每个喷嘴都有1位控制其开关
Dialogue: 0,0:34:35.68,0:34:37.72,Default - CN,,0,0,0,,将对应位置位后，对应的喷嘴就点火
Dialogue: 0,0:34:37.72,0:34:44.20,Default - CN,,0,0,0,,操作系统会使用专用的TIME6定时器和T6RUPT（TIME6定时器中断）控制喷气脉冲
Dialogue: 0,0:34:44.20,0:34:46.44,Default - CN,,0,0,0,,人机交互界面是这个所谓的“DSKY”
Dialogue: 0,0:34:46.44,0:34:48.36,Default - CN,,0,0,0,,全称是显示屏与键盘（DiSplay and KeYboard）
Dialogue: 0,0:34:48.36,0:34:51.88,Default - CN,,0,0,0,,上面有19个按键、15个灯和几行段码数字显示
Dialogue: 0,0:34:51.88,0:34:56.40,Default - CN,,0,0,0,,按下按键时会产生KEYRUPT中断（按键中断），键的编号可以从KEYIN I/O通道读出
Dialogue: 0,0:34:56.40,0:34:59.64,Default - CN,,0,0,0,,数字显示则是通过OUTO通道驱动
Dialogue: 0,0:34:59.64,0:35:04.08,Default - CN,,0,0,0,,每个飞船和控制中心之间都有双向的数字S波段无线电通信
Dialogue: 0,0:35:04.08,0:35:07.44,Default - CN,,0,0,0,,可以选择使用1.9或者51 kbit/s的通信速率
Dialogue: 0,0:35:07.44,0:35:11.88,Default - CN,,0,0,0,,控制中心传来的数据字会出现在INLINK计数器，并触发UPRUPT中断（上行数据中断）
Dialogue: 0,0:35:11.88,0:35:15.20,Default - CN,,0,0,0,,要传到控制中心的数据字要写入到I/O通道DNTM1中
Dialogue: 0,0:35:15.20,0:35:17.32,Default - CN,,0,0,0,,随后DOWNRUPT中断会告知程序何时可以写入下一个数据字
Dialogue: 0,0:35:17.32,0:35:20.16,Default - CN,,0,0,0,,随后DOWNRUPT中断会告知程序何时可以写入下一个数据字
Dialogue: 0,0:35:20.16,0:35:23.56,Default - CN,,0,0,0,,这些就是AGC的一些有趣的外设
Dialogue: 0,0:35:25.08,0:35:29.20,Default - CN,,0,0,0,,在AGC系统中，AGC的系统软件实现了
Dialogue: 0,0:35:29.20,0:35:32.24,Default - CN,,0,0,0,,基于优先级机制的、协作式或者抢占式多任务系统
Dialogue: 0,0:35:32.24,0:35:36.12,Default - CN,,0,0,0,,有实时性、人机交互，并且系统具有容错能力和虚拟机支持
Dialogue: 0,0:35:32.24,0:35:36.12,Top Comments,,0,0,0,,译注：虚拟机是类似JVM的字节码虚拟机
Dialogue: 0,0:35:36.12,0:35:40.40,Default - CN,,0,0,0,,这部分我们会讲解它的多任务系统、解释器、设备驱动程序
Dialogue: 0,0:35:40.40,0:35:44.84,Default - CN,,0,0,0,,等待列表、用户界面、以及错误恢复机制
Dialogue: 0,0:35:44.84,0:35:46.96,Default - CN,,0,0,0,,AGC在任务中有许多要做的事
Dialogue: 0,0:35:46.96,0:35:50.08,Default - CN,,0,0,0,,它又要做需要耗费数秒钟的数学运算
Dialogue: 0,0:35:50.08,0:35:51.72,Default - CN,,0,0,0,,又要和它的外设进行I/O操作
Dialogue: 0,0:35:51.72,0:35:56.00,Default - CN,,0,0,0,,比如外设提醒CPU的时候处理中断，像按键事件
Dialogue: 0,0:35:56.00,0:35:59.92,Default - CN,,0,0,0,,比如要处理更新屏幕显示这种定期任务
Dialogue: 0,0:35:59.92,0:36:05.84,Default - CN,,0,0,0,,还要支持实时控制，比如在精确的时间点亮指示灯或者给引擎点火
Dialogue: 0,0:36:05.84,0:36:09.52,Default - CN,,0,0,0,,只有这么一个CPU，所以计算机就必须在不同任务之间切换
Dialogue: 0,0:36:09.52,0:36:14.40,Default - CN,,0,0,0,,批处理多任务计算机会一个接一个处理长耗时的作业（job）
Dialogue: 0,0:36:14.40,0:36:16.44,Default - CN,,0,0,0,,但如果部分作业具有更高的优先级
Dialogue: 0,0:36:16.44,0:36:19.44,Default - CN,,0,0,0,,那么显然每个任务只运行20毫秒
Dialogue: 0,0:36:19.44,0:36:23.12,Default - CN,,0,0,0,,然后再查找有没有更高优先级的任务是更合理的
Dialogue: 0,0:36:23.12,0:36:26.60,Default - CN,,0,0,0,,就这样一直运行到最高优先级的作业结束，从队列中移除
Dialogue: 0,0:36:26.60,0:36:29.32,Default - CN,,0,0,0,,然后继续选择最高优先级的作业去执行
Dialogue: 0,0:36:29.32,0:36:32.28,Default - CN,,0,0,0,,必须至多每20毫秒手动检查一次作业队列
Dialogue: 0,0:36:32.28,0:36:36.68,Default - CN,,0,0,0,,程序要让出CPU（yield）检测队列中是否有更高优先级的作业
Dialogue: 0,0:36:36.68,0:36:41.64,Default - CN,,0,0,0,,所以AGC是一台基于优先级的、协作式多任务计算机
Dialogue: 0,0:36:41.64,0:36:44.48,Default - CN,,0,0,0,,每个作业在内存中都具有一个12字长的数据结构
Dialogue: 0,0:36:44.48,0:36:46.88,Default - CN,,0,0,0,,它包含了作业的PC、两个bank寄存器
Dialogue: 0,0:36:46.88,0:36:49.64,Default - CN,,0,0,0,,从而可以知道作业开始或者继续执行时需要从哪里开始
Dialogue: 0,0:36:49.64,0:36:55.80,Default - CN,,0,0,0,,还有一个字用符号位作为“禁用”位，并保存着5位的作业优先级
Dialogue: 0,0:36:55.80,0:36:58.04,Default - CN,,0,0,0,,系统的“核心集”（Core Set）能容纳7项作业项
Dialogue: 0,0:36:58.04,0:37:00.80,Default - CN,,0,0,0,,优先级字为-0时表示此项为空
Dialogue: 0,0:37:00.80,0:37:03.12,Default - CN,,0,0,0,,当前作业总是第0号作业
Dialogue: 0,0:37:03.12,0:37:05.92,Default - CN,,0,0,0,,当创建了一个具有更高优先级的新的作业时
Dialogue: 0,0:37:05.92,0:37:10.32,Default - CN,,0,0,0,,yield操作会把新作业与0号作业交换，这样新的作业就变成了0号
Dialogue: 0,0:37:10.32,0:37:14.20,Default - CN,,0,0,0,,反转优先级字的正负号可以使作业睡眠，这样就不会再切换到它
Dialogue: 0,0:37:14.20,0:37:16.52,Default - CN,,0,0,0,,再反转成正数它就又会被唤醒
Dialogue: 0,0:37:16.52,0:37:20.52,Default - CN,,0,0,0,,作业项的前8个字可以用作作业局部储存
Dialogue: 0,0:37:16.52,0:37:20.52,Top Comments,,0,0,0,,译注：请类比多线程编程中的“线程局部存储”（Thread Local Storage, TLS）
Dialogue: 0,0:37:20.52,0:37:22.36,Default - CN,,0,0,0,,因为当前作业总是正在执行的那个
Dialogue: 0,0:37:22.36,0:37:26.52,Default - CN,,0,0,0,,所以这些局部存储总是位于相同的内存地址
Dialogue: 0,0:37:26.52,0:37:31.56,Default - CN,,0,0,0,,调度器有一系列修改作业数据结构的子程序
Dialogue: 0,0:37:31.56,0:37:36.64,Default - CN,,0,0,0,,给定PC、BB和优先级，可以创建一个新的作业
Dialogue: 0,0:37:36.64,0:37:41.44,Default - CN,,0,0,0,,可以改变当前作业的优先级、让当前作业睡眠或者唤醒指定作业
Dialogue: 0,0:37:41.44,0:37:43.64,Default - CN,,0,0,0,,也可以终止当前的作业
Dialogue: 0,0:37:43.64,0:37:49.16,Default - CN,,0,0,0,,yield并不是一个调度器函数，而是两条检测NEWJOB变量的指令序列
Dialogue: 0,0:37:49.16,0:37:52.52,Default - CN,,0,0,0,,操作系统会根据当前最高优先级作业的情况设置NEWJOB变量的值
Dialogue: 0,0:37:52.52,0:37:55.44,Default - CN,,0,0,0,,如果当前作业，作业0就是最高优先级的变量，那么CCS指令就什么都不做
Dialogue: 0,0:37:55.44,0:38:00.64,Default - CN,,0,0,0,,如果存在更高优先给的作业，那么CCS就会调用切换作业函数，切换到那个作业
Dialogue: 0,0:38:00.64,0:38:04.40,Default - CN,,0,0,0,,并且，NEWJOB不仅是一个变量，还是前面提到的看门狗地址
Dialogue: 0,0:38:04.40,0:38:07.72,Default - CN,,0,0,0,,如果没有定期访问，就意味着协作式多任务系统卡死了
Dialogue: 0,0:38:07.72,0:38:10.76,Default - CN,,0,0,0,,硬件就会自动复位
Dialogue: 0,0:38:10.76,0:38:13.84,Default - CN,,0,0,0,,AGC中有许多代码是用来做科学计算的
Dialogue: 0,0:38:13.84,0:38:17.80,Default - CN,,0,0,0,,仅仅是计算两组标量和矢量的积然后相加
Dialogue: 0,0:38:17.80,0:38:20.68,Default - CN,,0,0,0,,就要花费几百条AGC机器码
Dialogue: 0,0:38:20.68,0:38:23.32,Default - CN,,0,0,0,,AGC为所有这些常用操作提供了库函数
Dialogue: 0,0:38:23.32,0:38:28.48,Default - CN,,0,0,0,,提供单、双、三精度定点数标量、矢量、矩阵运算
Dialogue: 0,0:38:28.48,0:38:31.92,Default - CN,,0,0,0,,库函数还提供了一个软件实现的“多功能累加器”MPAC
Dialogue: 0,0:38:31.92,0:38:34.96,Default - CN,,0,0,0,,根据模式标志的不同，里面可以储存一个双/三精度数或者一个矢量
Dialogue: 0,0:38:34.96,0:38:38.06,Default - CN,,0,0,0,,使用的方法用C语言伪代码写出来，差不多就是我们把一个矢量载入到MPAC中
Dialogue: 0,0:38:38.06,0:38:40.20,Default - CN,,0,0,0,,把它乘以一个标量，存到内存里
Dialogue: 0,0:38:40.20,0:38:44.52,Default - CN,,0,0,0,,再做一次乘法，然后把积和之前保存的结果相加
Dialogue: 0,0:38:44.52,0:38:50.48,Default - CN,,0,0,0,,这样的算式需要保存中间步骤的结果，所以还提供了一个38字长的栈
Dialogue: 0,0:38:50.48,0:38:53.92,Default - CN,,0,0,0,,如果一个作业需要用到数学库代码，那么MPAC、模式位、栈指针
Dialogue: 0,0:38:53.92,0:38:56.68,Default - CN,,0,0,0,,就会被储存在作业项剩余的字段中
Dialogue: 0,0:38:56.68,0:38:59.84,Default - CN,,0,0,0,,这个栈是一个叫做VAC的数据结构的一部分
Dialogue: 0,0:38:56.68,0:38:59.84,Top Comments,,0,0,0,,译注：VAC全称为“Vector ACcumulator area”，矢量累加器区域
Dialogue: 0,0:38:59.84,0:39:02.12,Default - CN,,0,0,0,,作业项中最后一个字剩余的位保存着指向VAC的指针
Dialogue: 0,0:39:02.12,0:39:07.84,Default - CN,,0,0,0,,取决于创建作业时调用的哪个子程序，一个作业可能有，也可能没有VAC
Dialogue: 0,0:39:07.84,0:39:11.84,Default - CN,,0,0,0,,我们上面举例的这些伪代码如果用汇编语言来写的话还是会非常冗长
Dialogue: 0,0:39:11.84,0:39:13.84,Default - CN,,0,0,0,,有一大堆函数调用、指针到处飞
Dialogue: 0,0:39:13.84,0:39:17.08,Default - CN,,0,0,0,,AGC软件工程师决定要创造一种全新的简练语言
Dialogue: 0,0:39:17.08,0:39:20.44,Default - CN,,0,0,0,,在运行时解释执行，于是就有了虚拟机
Dialogue: 0,0:39:20.44,0:39:25.56,Default - CN,,0,0,0,,这套解释执行语言也是图灵完备的，在MPAC之外，它另有两个变址寄存器
Dialogue: 0,0:39:25.56,0:39:28.32,Default - CN,,0,0,0,,两个步长寄存器，和它自己的链接寄存器
Dialogue: 0,0:39:28.32,0:39:31.48,Default - CN,,0,0,0,,指令的编码在一个字的长度里能塞下两个7位宽的操作码
Dialogue: 0,0:39:31.48,0:39:33.22,Default - CN,,0,0,0,,于是虚拟机总共可以有128个操作码
Dialogue: 0,0:39:33.22,0:39:37.48,Default - CN,,0,0,0,,也解释了为什么CPU里有一个诡异的“向右移7位”功能
Dialogue: 0,0:39:37.48,0:39:42.00,Default - CN,,0,0,0,,这两个指令的操作数则是储存在下面的两个指令字中，因此可以使用14位宽的虚拟地址
Dialogue: 0,0:39:42.00,0:39:47.28,Default - CN,,0,0,0,,有了14位的地址之后，解释型语言就不必再和AGC复杂的内存模型纠缠了
Dialogue: 0,0:39:47.28,0:39:50.40,Default - CN,,0,0,0,,它可以一次性寻址大约一半的ROM地址
Dialogue: 0,0:39:50.40,0:39:53.08,Default - CN,,0,0,0,,最低的1Ki字寻址空间是RAM
Dialogue: 0,0:39:53.08,0:39:57.12,Default - CN,,0,0,0,,所以解释型语言可以选择这两种内存布局之一
Dialogue: 0,0:39:57.12,0:39:59.02,Default - CN,,0,0,0,,这是解释型语言的完整指令集
Dialogue: 0,0:39:59.02,0:40:02.40,Default - CN,,0,0,0,,原生机器码和解释型语言可以在一个作业之内任意混用
Dialogue: 0,0:40:02.40,0:40:06.44,Default - CN,,0,0,0,,EXIT指令会在下一地址处开始执行原生机器码
Dialogue: 0,0:40:06.44,0:40:10.24,Default - CN,,0,0,0,,而调用CALL INTPRET则会切换到解释执行模式
Dialogue: 0,0:40:10.24,0:40:15.00,Default - CN,,0,0,0,,除了要耗费较长时间的数学运算，操作系统也支持设备驱动程序
Dialogue: 0,0:40:15.00,0:40:18.84,Default - CN,,0,0,0,,当一个设备，例如键盘按键被按下、请求CPU注意时
Dialogue: 0,0:40:18.84,0:40:20.36,Default - CN,,0,0,0,,外设便会产生中断
Dialogue: 0,0:40:20.36,0:40:22.04,Default - CN,,0,0,0,,当前执行的作业会被中断打断
Dialogue: 0,0:40:22.04,0:40:25.08,Default - CN,,0,0,0,,然后中断处理代码会读取外设的数据并尽快返回
Dialogue: 0,0:40:25.08,0:40:28.84,Default - CN,,0,0,0,,如果还有其他事情要做，它就会创建一个作业稍后去做
Dialogue: 0,0:40:28.84,0:40:31.40,Default - CN,,0,0,0,,有的设备需要定期服务
Dialogue: 0,0:40:31.40,0:40:39.48,Default - CN,,0,0,0,,有一个定时器每120毫秒触发一次中断，提醒系统要读写某些设备
Dialogue: 0,0:40:31.40,0:40:39.48,Top Comments,,0,0,0,,译注：讲者口误，实为120毫秒
Dialogue: 0,0:40:39.48,0:40:43.36,Default - CN,,0,0,0,,比如，屏幕上的数码管一次只能更新几位数字的显示
Dialogue: 0,0:40:43.36,0:40:47.92,Default - CN,,0,0,0,,所以它的驱动程序会被120毫秒定时器触发
Dialogue: 0,0:40:47.92,0:40:50.44,Default - CN,,0,0,0,,这个定时器的中断会在八种阶段中循环
Dialogue: 0,0:40:50.44,0:40:53.18,Default - CN,,0,0,0,,这样能够将不同设备的驱动程序分配到不同时刻处理
Dialogue: 0,0:40:53.18,0:40:56.56,Default - CN,,0,0,0,,来降低每次中断执行耗费的时间
Dialogue: 0,0:40:56.56,0:40:59.04,Default - CN,,0,0,0,,部分设备需要在精确的时刻被驱动
Dialogue: 0,0:40:59.04,0:41:02.20,Default - CN,,0,0,0,,如果一个作业需要将一个灯闪烁两次
Dialogue: 0,0:41:02.20,0:41:05.96,Default - CN,,0,0,0,,它会立刻将灯点亮，然后创建三个等待列表任务
Dialogue: 0,0:41:05.96,0:41:08.40,Default - CN,,0,0,0,,要求在未来的某个时间点执行
Dialogue: 0,0:41:08.40,0:41:12.24,Default - CN,,0,0,0,,第一个会让灯熄灭，第二个再把灯点亮
Dialogue: 0,0:41:12.24,0:41:15.64,Default - CN,,0,0,0,,第三个再把灯关掉
Dialogue: 0,0:41:15.64,0:41:20.60,Default - CN,,0,0,0,,等待列表任务的截止时间之差被排序，储存在LST1数据结构中
Dialogue: 0,0:41:20.60,0:41:24.36,Default - CN,,0,0,0,,第一项永远已经放入一个定时器寄存器中正在倒计时
Dialogue: 0,0:41:24.36,0:41:28.32,Default - CN,,0,0,0,,LST2储存了每个任务的PC和BB对
Dialogue: 0,0:41:28.32,0:41:32.68,Default - CN,,0,0,0,,系统也提供了创建新任务和终止当前任务的子程序
Dialogue: 0,0:41:32.68,0:41:36.56,Default - CN,,0,0,0,,控制等待列表的定时器的精度为10毫秒
Dialogue: 0,0:41:36.56,0:41:40.04,Default - CN,,0,0,0,,其他定时器也可以以相同频率触发，但是要加一点偏移量
Dialogue: 0,0:41:40.04,0:41:42.60,Default - CN,,0,0,0,,并且各定时器触发的任务也要写得尽可能简短
Dialogue: 0,0:41:42.60,0:41:45.72,Default - CN,,0,0,0,,保证永远不能和其他定时器触发的任务相互碰撞
Dialogue: 0,0:41:45.72,0:41:49.44,Default - CN,,0,0,0,,不过更麻烦的是什么时候都可能找上门的设备中断
Dialogue: 0,0:41:49.44,0:41:51.60,Default - CN,,0,0,0,,中断处理程序也会导致一定延迟
Dialogue: 0,0:41:51.60,0:41:56.76,Default - CN,,0,0,0,,从而导致定时器处理程序能使用的时间片变少
Dialogue: 0,0:41:56.76,0:41:59.44,Default - CN,,0,0,0,,操作系统软件无法保证这些计时完全精确
Dialogue: 0,0:41:59.44,0:42:04.12,Default - CN,,0,0,0,,这些都需要各个组件互相配合
Dialogue: 0,0:42:04.12,0:42:07.72,Default - CN,,0,0,0,,从而满足实时性的要求
Dialogue: 0,0:42:07.72,0:42:10.48,Default - CN,,0,0,0,,PINBALL程序是AGC的Shell（“外壳”界面）
Dialogue: 0,0:42:10.48,0:42:14.00,Default - CN,,0,0,0,,按键中断会创建一项作业，获取这个指令需要的数字
Dialogue: 0,0:42:14.00,0:42:17.52,Default - CN,,0,0,0,,并更新显示屏内容的内存缓冲区
Dialogue: 0,0:42:17.52,0:42:21.92,Default - CN,,0,0,0,,120毫秒的定时器会触发显示屏更新代码
Dialogue: 0,0:42:21.92,0:42:25.80,Default - CN,,0,0,0,,当一个命令执行完之后，PINBALL又会创建一项作业
Dialogue: 0,0:42:25.80,0:42:31.64,Default - CN,,0,0,0,,控制中心还有一个远程的DSKY界面，用S波段无线电远程连接
Dialogue: 0,0:42:31.64,0:42:36.04,Default - CN,,0,0,0,,系统软件的稳定性关乎性命，所以必须能显示异常情况
Dialogue: 0,0:42:36.04,0:42:38.04,Default - CN,,0,0,0,,并且要能从异常中恢复
Dialogue: 0,0:42:38.04,0:42:41.04,Default - CN,,0,0,0,,“警报”（ALARM）子程序会从指令流中取出下一个指令字
Dialogue: 0,0:42:41.04,0:42:43.40,Default - CN,,0,0,0,,将它显示在屏幕上，并点亮PROG灯
Dialogue: 0,0:42:43.40,0:42:46.56,Default - CN,,0,0,0,,看到它就应该认为程序报出了警告或者错误消息
Dialogue: 0,0:42:46.56,0:42:49.66,Default - CN,,0,0,0,,AGC的软件中随处可见数据合法性检查
Dialogue: 0,0:42:49.66,0:42:51.32,Default - CN,,0,0,0,,有助于在开发中暴露bug
Dialogue: 0,0:42:51.32,0:42:54.68,Default - CN,,0,0,0,,也可更好地在任务中理解可能产生的问题
Dialogue: 0,0:42:54.68,0:42:58.56,Default - CN,,0,0,0,,有些失效情形是由各种硬件看门狗引发或者由代码激活的
Dialogue: 0,0:42:58.56,0:43:01.16,Default - CN,,0,0,0,,这些情况下代码将无法正常继续执行
Dialogue: 0,0:43:01.16,0:43:04.48,Default - CN,,0,0,0,,除了显示错误码之外，它们也会导致硬件复位
Dialogue: 0,0:43:04.48,0:43:07.76,Default - CN,,0,0,0,,不过操作系统软件也提供了错误恢复机制
Dialogue: 0,0:43:07.76,0:43:10.96,Default - CN,,0,0,0,,一项作业的不同阶段可以各自有错误恢复代码
Dialogue: 0,0:43:10.96,0:43:13.80,Default - CN,,0,0,0,,在作业执行时可以设置作业进行到了哪个阶段
Dialogue: 0,0:43:13.80,0:43:16.46,Default - CN,,0,0,0,,如果任何任务或者作业调用到中止（ABORT）
Dialogue: 0,0:43:16.46,0:43:19.76,Default - CN,,0,0,0,,当前阶段的错误恢复代码就会被执行
Dialogue: 0,0:43:19.76,0:43:24.76,Default - CN,,0,0,0,,这时可以清理错误现场重试，也可以跳到另一个阶段
Dialogue: 0,0:43:24.76,0:43:27.12,Default - CN,,0,0,0,,要么就取消掉整个作业
Dialogue: 0,0:43:27.12,0:43:31.24,Default - CN,,0,0,0,,PHASCHNG（变更阶段）子程序会设置错误恢复表中一项作业的阶段编号
Dialogue: 0,0:43:31.24,0:43:33.56,Default - CN,,0,0,0,,比如可以设置4号作业目前在阶段5
Dialogue: 0,0:43:33.56,0:43:39.24,Default - CN,,0,0,0,,每个阶段都有一个描述符，可以绑定一个任务、有VAC或者无VAC的作业
Dialogue: 0,0:43:39.24,0:43:42.80,Default - CN,,0,0,0,,所以，系统正常运行时，比如已经计划了若干个任务和作业
Dialogue: 0,0:43:42.80,0:43:46.04,Default - CN,,0,0,0,,如果发生了中止，那么作业队列和等待列表都将被清空
Dialogue: 0,0:43:46.04,0:43:48.32,Default - CN,,0,0,0,,错误恢复表中的代码将会被启用
Dialogue: 0,0:43:48.32,0:43:52.20,Default - CN,,0,0,0,,重新创建那些注册了错误恢复代码的任务和作业
Dialogue: 0,0:43:52.20,0:43:56.24,Default - CN,,0,0,0,,有时候像内存破坏这类错误是无法恢复的
Dialogue: 0,0:43:56.24,0:44:02.08,Default - CN,,0,0,0,,它们会导致全系统重新初始化，不执行任何错误恢复代码
Dialogue: 0,0:44:02.08,0:44:05.04,Default - CN,,0,0,0,,以上就是AGC操作系统软件
Dialogue: 0,0:44:07.64,0:44:12.00,Default - CN,,0,0,0,,讲完了AGC的以上所有架构、硬件、外设、操作系统知识之后
Dialogue: 0,0:44:12.00,0:44:16.72,Default - CN,,0,0,0,,终于可以来看看它的登月任务软件在实际中的使用了
Dialogue: 0,0:44:16.72,0:44:22.28,Default - CN,,0,0,0,,我们将会讲到用户界面、发射时序、入轨后的轨道确定方式
Dialogue: 0,0:44:22.28,0:44:24.76,Default - CN,,0,0,0,,进阶部分会讲到它的数字自动驾驶仪的工作方式
Dialogue: 0,0:44:24.76,0:44:27.36,Default - CN,,0,0,0,,动力飞行是如何进行的
Dialogue: 0,0:44:27.36,0:44:31.76,Default - CN,,0,0,0,,以及当我们抵达月球之后，我们如何执行月面降落、重新升空后的交会过程
Dialogue: 0,0:44:31.76,0:44:34.36,Default - CN,,0,0,0,,和最终重入大气层的过程
Dialogue: 0,0:44:34.36,0:44:38.00,Default - CN,,0,0,0,,最后是一些突发事件，或者大家喜闻乐见的“小麻烦”
Dialogue: 0,0:44:38.00,0:44:40.00,Default - CN,,0,0,0,,先从用户界面说起
Dialogue: 0,0:44:40.00,0:44:41.78,Default - CN,,0,0,0,,登月软件的用户界面类似于命令行界面
Dialogue: 0,0:44:41.78,0:44:43.68,Default - CN,,0,0,0,,但是因为界面上只能输入输出数字，没有字母
Dialogue: 0,0:44:43.68,0:44:45.28,Default - CN,,0,0,0,,关键字也必须编码成数字
Dialogue: 0,0:44:45.28,0:44:48.68,Default - CN,,0,0,0,,在一个一般的系统上你可能会输入“显示内存”，按Enter
Dialogue: 0,0:44:48.68,0:44:50.88,Default - CN,,0,0,0,,“显示”是动词，“内存”是名词
Dialogue: 0,0:44:50.88,0:44:55.08,Default - CN,,0,0,0,,那么在AGC上，你要输入：“动词01”，意思是“显示”
Dialogue: 0,0:44:55.08,0:44:57.60,Default - CN,,0,0,0,,然后输入“名词02”，意思是“内存”，再按Enter
Dialogue: 0,0:44:57.60,0:44:59.56,Default - CN,,0,0,0,,有的程序需要输入参数
Dialogue: 0,0:44:59.56,0:45:02.88,Default - CN,,0,0,0,,一般的系统上会显示一个提示符，此时你输入数字，按Enter
Dialogue: 0,0:45:02.88,0:45:07.76,Default - CN,,0,0,0,,在AGC上，“动词”“名词”在闪烁就代表着它在等待用户输入
Dialogue: 0,0:45:07.76,0:45:12.60,Default - CN,,0,0,0,,此时输入八进制地址“25”，按Enter，AGC就会显示出
Dialogue: 0,0:45:07.76,0:45:15.56,Top Comments,,0,0,0,,译注：历史上使用八进制数的计算机，一般它们的字长都是可被3整除的\N由于AGC字长15位、地址宽12位，使用八进制符合其道产生的时代背景
Dialogue: 0,0:45:12.60,0:45:15.56,Default - CN,,0,0,0,,位于八进制内存地址“25”中的内容
Dialogue: 0,0:45:15.56,0:45:20.32,Default - CN,,0,0,0,,AGC主动要求用户输入时也会使用类似的“动词”“名词”概念
Dialogue: 0,0:45:20.32,0:45:23.60,Default - CN,,0,0,0,,“动词6”“名词11”就是AGC在要求输入CSI点火时间
Dialogue: 0,0:45:23.60,0:45:27.16,Default - CN,,0,0,0,,CSI指“共椭圆轨道序列启动”，我们后面会提到
Dialogue: 0,0:45:27.16,0:45:30.28,Default - CN,,0,0,0,,有一个特殊情况是AGC要求输入“是”或“否”的问题
Dialogue: 0,0:45:30.28,0:45:35.00,Default - CN,,0,0,0,,“动词99”是要求宇航员按PRO键（Proceed，继续）确认点火
Dialogue: 0,0:45:35.00,0:45:38.00,Default - CN,,0,0,0,,宇航员手里有一张纸质的参考文档记载了所有的动词和名词
Dialogue: 0,0:45:38.00,0:45:41.16,Default - CN,,0,0,0,,还有记录了最重要的信息的提示卡
Dialogue: 0,0:45:41.16,0:45:45.88,Default - CN,,0,0,0,,现在我们就跟随任务的不同阶段来体验一下，首先是起飞
Dialogue: 0,0:45:45.88,0:45:48.46,Default - CN,,0,0,0,,我们现在点火了
Dialogue: 0,0:45:48.46,0:45:51.00,Default - CN,,0,0,0,,此时AGC处于被动的监视模式
Dialogue: 0,0:45:51.00,0:45:55.72,Default - CN,,0,0,0,,差不多在这时候，在切断火箭和地面之间的连接管线时
Dialogue: 0,0:45:55.72,0:45:57.16,Default - CN,,0,0,0,,它就会开始计时任务时钟
Dialogue: 0,0:45:57.16,0:46:01.64,Default - CN,,0,0,0,,以防这个自动触发机制失效，一部DSKY上总是会预先输入好“动词75”等着按Enter
Dialogue: 0,0:46:01.64,0:46:03.12,Default - CN,,0,0,0,,这样也可以手动启动任务时钟
Dialogue: 0,0:46:03.12,0:46:08.20,Default - CN,,0,0,0,,可以在任何时候用“动词16”“名词65”把任务耗时显示在屏幕上
Dialogue: 0,0:46:08.20,0:46:13.08,Default - CN,,0,0,0,,在土星五号飞行过程中，AGC只是被动地监视飞行状态
Dialogue: 0,0:46:13.08,0:46:17.72,Default - CN,,0,0,0,,土星五号的飞行是由它自己的数字飞行计算机和箭体上的一圈测量仪器控制的
Dialogue: 0,0:46:17.72,0:46:22.28,Default - CN,,0,0,0,,DSKY会自动显示“动词16”“名词62”，也就是飞行速度，单位为英尺/秒
Dialogue: 0,0:46:22.28,0:46:26.20,Default - CN,,0,0,0,,还有英尺/秒的海拔变化率、以海里计的距离发射台的高度
Dialogue: 0,0:46:26.20,0:46:29.52,Default - CN,,0,0,0,,需要注意的是，这些数值的单位以及小数点的位置都是隐含的
Dialogue: 0,0:46:29.52,0:46:32.20,Default - CN,,0,0,0,,并且整个系统内部是以公制单位运算的
Dialogue: 0,0:46:32.20,0:46:39.32,Default - CN,,0,0,0,,但为了美国宇航员的方便，显示代码会把所有数据转换成英制单位
Dialogue: 0,0:46:39.32,0:46:42.40,Default - CN,,0,0,0,,（笑声）
Dialogue: 0,0:46:42.40,0:46:44.72,Default - CN,,0,0,0,,万一土星五号的计算机出现了任何故障
Dialogue: 0,0:46:44.72,0:46:47.56,Default - CN,,0,0,0,,阿波罗的导航计算机也可以完全接管发射火箭
Dialogue: 0,0:46:47.56,0:46:52.48,Default - CN,,0,0,0,,在最极端的情况下，宇航员甚至可以用操作杆把整个轨道器入轨
Dialogue: 0,0:46:52.48,0:46:55.92,Default - CN,,0,0,0,,只要你愿意用双手控制这发110米高、3000万牛推力的大呲花
Dialogue: 0,0:46:55.92,0:46:57.46,Default - CN,,0,0,0,,只要你愿意用双手控制这发110米高、3000万牛推力的大呲花
Dialogue: 0,0:46:57.46,0:46:59.24,Default - CN,,0,0,0,,爱拼才会赢
Dialogue: 0,0:46:59.24,0:47:01.56,Default - CN,,0,0,0,,在12分钟内，我们会经过整个一级和二级推进阶段
Dialogue: 0,0:47:01.56,0:47:02.74,Default - CN,,0,0,0,,在12分钟内，我们会经过整个一级和二级推进阶段
Dialogue: 0,0:47:02.74,0:47:04.56,Default - CN,,0,0,0,,现在三级就只剩下了一个小的推进器
Dialogue: 0,0:47:04.56,0:47:09.20,Default - CN,,0,0,0,,它会将我们送入一个高185公里、88分钟绕地球一圈的轨道
Dialogue: 0,0:47:11.04,0:47:13.88,Default - CN,,0,0,0,,但是我们要怎么知道我们是否进入正确的轨道了呢
Dialogue: 0,0:47:13.88,0:47:17.88,Default - CN,,0,0,0,,答案是，AGC和控制中心都会监视飞船的方位和速度
Dialogue: 0,0:47:17.88,0:47:21.56,Default - CN,,0,0,0,,要解决往哪去的问题，首先得知道我们在哪
Dialogue: 0,0:47:21.56,0:47:25.52,Default - CN,,0,0,0,,在太空中导航需要我们知道自己的三维方位
Dialogue: 0,0:47:25.52,0:47:28.40,Default - CN,,0,0,0,,以及三维速度，这些叫做“状态向量”
Dialogue: 0,0:47:28.40,0:47:30.36,Default - CN,,0,0,0,,先来看看位置是如何测定的
Dialogue: 0,0:47:30.36,0:47:33.04,Default - CN,,0,0,0,,测定太空中的方位，需要一台望远镜和太空六分仪
Dialogue: 0,0:47:33.04,0:47:36.44,Default - CN,,0,0,0,,“太空六分仪”和18世纪航海用的六分仪非常相似
Dialogue: 0,0:47:36.44,0:47:40.28,Default - CN,,0,0,0,,定位是通过测量地平线和一个天体之间的夹角来完成的
Dialogue: 0,0:47:40.28,0:47:43.04,Default - CN,,0,0,0,,地平线我们可以用地球也可以用月球的
Dialogue: 0,0:47:43.04,0:47:47.48,Default - CN,,0,0,0,,至于天地——我们已经入轨了，那到处都是天体，随便挑一个就行
Dialogue: 0,0:47:47.48,0:47:50.88,Default - CN,,0,0,0,,AGC的代码里已经内置了45个天体的位置
Dialogue: 0,0:47:50.88,0:47:54.32,Default - CN,,0,0,0,,整个光学仪器组件、连带着指令与服务舱都要转动
Dialogue: 0,0:47:54.32,0:47:56.08,Default - CN,,0,0,0,,指向地球或者月球的方向
Dialogue: 0,0:47:56.08,0:48:00.12,Default - CN,,0,0,0,,用程序P52可以使AGC旋转飞船
Dialogue: 0,0:48:00.12,0:48:05.08,Default - CN,,0,0,0,,来让六分仪的其中一个轴“地标视线”LLOS指向最近的天体
Dialogue: 0,0:48:05.08,0:48:06.28,Default - CN,,0,0,0,,比如地球或者月球
Dialogue: 0,0:48:06.28,0:48:10.68,Default - CN,,0,0,0,,然后宇航员把光学仪器系统转动来完全把地平线对准地标视线
Dialogue: 0,0:48:10.68,0:48:13.36,Default - CN,,0,0,0,,然后，宇航员用望远镜寻找一个已知的天体
Dialogue: 0,0:48:13.36,0:48:17.04,Default - CN,,0,0,0,,然后把“恒星线”指向它，并让AGC读出耳轴和主轴的旋转角度
Dialogue: 0,0:48:17.04,0:48:22.20,Default - CN,,0,0,0,,在不同的平面多次重复，就能得到航天器在太空中的方位
Dialogue: 0,0:48:22.20,0:48:26.00,Default - CN,,0,0,0,,在登月舱上，为了减重，光学仪器的结构被简化了
Dialogue: 0,0:48:26.00,0:48:28.36,Default - CN,,0,0,0,,现在不管是对齐到地平线还是天体都需要转动整个登月舱
Dialogue: 0,0:48:28.36,0:48:32.24,Default - CN,,0,0,0,,这里的数据主要是用来确认登月着陆地点和供交会对接使用的
Dialogue: 0,0:48:32.24,0:48:36.12,Default - CN,,0,0,0,,登月舱上的软件根本无法在地月转移轨道上测定方位
Dialogue: 0,0:48:36.12,0:48:38.60,Default - CN,,0,0,0,,在飞行中，我们的方位时刻都在改变
Dialogue: 0,0:48:38.60,0:48:41.20,Default - CN,,0,0,0,,但在进行两次方位测定之后，我们就可以在航行中
Dialogue: 0,0:48:41.20,0:48:45.48,Default - CN,,0,0,0,,得到航天器的速度，并直接用航迹推算法计算我们的方位
Dialogue: 0,0:48:45.48,0:48:48.72,Default - CN,,0,0,0,,已知起始位置和速度后，未来的方位就可以通过外推得到
Dialogue: 0,0:48:48.72,0:48:51.56,Default - CN,,0,0,0,,然而太空中不能随意外推方位
Dialogue: 0,0:48:51.56,0:48:54.00,Default - CN,,0,0,0,,因为其他天体的万有引力会影响我们的航线
Dialogue: 0,0:48:54.00,0:48:57.48,Default - CN,,0,0,0,,AGC中实现了两种数学模型
Dialogue: 0,0:48:57.48,0:49:00.36,Default - CN,,0,0,0,,左边是基于开普勒轨道方程的圆锥曲线积分法
Dialogue: 0,0:49:00.36,0:49:04.48,Default - CN,,0,0,0,,这种模型假定有一个理想球状的引力体正在影响我们的航迹
Dialogue: 0,0:49:04.48,0:49:06.86,Default - CN,,0,0,0,,另一种是右侧的Encke数值积分法计算航天器摄动
Dialogue: 0,0:49:06.86,0:49:10.16,Default - CN,,0,0,0,,这个模型会考虑多个不均匀引力体的影响
Dialogue: 0,0:49:10.16,0:49:12.76,Default - CN,,0,0,0,,讲到这里大家也许能理解为什么我们需要导航计算机
Dialogue: 0,0:49:12.76,0:49:15.16,Default - CN,,0,0,0,,而不能直接手操飞船上月球
Dialogue: 0,0:49:15.16,0:49:18.36,Default - CN,,0,0,0,,显然，阿波罗飞船完全可以不靠外援自行飞到月球
Dialogue: 0,0:49:18.36,0:49:21.44,Default - CN,,0,0,0,,但最终NASA还是拍板状态向量的首要数据源
Dialogue: 0,0:49:21.44,0:49:24.52,Default - CN,,0,0,0,,要由休斯顿控制中心的三个地面站的测量结果提供
Dialogue: 0,0:49:24.52,0:49:28.60,Default - CN,,0,0,0,,AGC运行程序P27时计算机处于空闲状态，此时可以远程进行编程
Dialogue: 0,0:49:28.60,0:49:31.88,Default - CN,,0,0,0,,此时地面站可以用S波段上行链路更新状态向量
Dialogue: 0,0:49:31.88,0:49:35.88,Default - CN,,0,0,0,,不过有一个东西是我们比控制中心更了解的，那就是姿态
Dialogue: 0,0:49:35.88,0:49:39.00,Default - CN,,0,0,0,,姿态就是飞船在三个轴上的旋转角度
Dialogue: 0,0:49:39.00,0:49:44.04,Default - CN,,0,0,0,,当我们确定了一个已知姿态后，必须保证我们能测量任意轴上的任何转动
Dialogue: 0,0:49:44.04,0:49:45.84,Default - CN,,0,0,0,,这时候就轮到陀螺仪了
Dialogue: 0,0:49:45.84,0:49:49.36,Default - CN,,0,0,0,,它们是惯性测量系统，IMU的重要组件
Dialogue: 0,0:49:49.36,0:49:54.28,Default - CN,,0,0,0,,每个轴都配备了一部陀螺仪，它们会将数据回报给AGC
Dialogue: 0,0:49:54.28,0:49:56.56,Default - CN,,0,0,0,,AGC据此跟踪飞船的姿态信息
Dialogue: 0,0:49:56.56,0:50:00.52,Default - CN,,0,0,0,,在我们离开地球轨道之前，先来快速地过一下数字自动驾驶仪
Dialogue: 0,0:50:00.52,0:50:02.96,Default - CN,,0,0,0,,它是AGC上最庞大的程序，没有之一
Dialogue: 0,0:50:02.96,0:50:07.52,Default - CN,,0,0,0,,占据了源码总量的大约10%，指令与服务舱和登月舱的计算机上都有搭载
Dialogue: 0,0:50:07.52,0:50:10.28,Default - CN,,0,0,0,,两边航天器的实现是略有不同的
Dialogue: 0,0:50:10.28,0:50:13.96,Default - CN,,0,0,0,,因为它们的飞行方式、推进器、对称性都不相同
Dialogue: 0,0:50:13.96,0:50:18.80,Default - CN,,0,0,0,,因为太空中没有空气摩擦力，任何一点微小的扰动都会让飞船开始转动
Dialogue: 0,0:50:18.80,0:50:21.92,Default - CN,,0,0,0,,AGC的数字自动驾驶仪软件会使用RCS喷口
Dialogue: 0,0:50:21.92,0:50:26.12,Default - CN,,0,0,0,,维持飞船姿态在一个特定的“死区”阈值之内
Dialogue: 0,0:50:26.12,0:50:30.04,Default - CN,,0,0,0,,万一宇航员需要手动控制推进器，自动驾驶仪软件也能派上用场
Dialogue: 0,0:50:30.04,0:50:34.28,Default - CN,,0,0,0,,指令与服务舱和登月舱都有电传飞控
Dialogue: 0,0:50:34.28,0:50:36.26,Default - CN,,0,0,0,,并且，为防止任何时刻有推进器损坏
Dialogue: 0,0:50:36.26,0:50:40.52,Default - CN,,0,0,0,,自动驾驶仪软件甚至可以计算出在缺少部分推进器下的理想点火方式
Dialogue: 0,0:50:40.52,0:50:44.32,Default - CN,,0,0,0,,AGC还内置了一些关于重心和质量分布的简单算法
Dialogue: 0,0:50:44.32,0:50:47.88,Default - CN,,0,0,0,,在计算推进器操作时也会纳入考虑
Dialogue: 0,0:50:47.88,0:50:49.44,Default - CN,,0,0,0,,还不止可以做这些事
Dialogue: 0,0:50:49.44,0:50:54.52,Default - CN,,0,0,0,,输入一个新的状态数据，它可以计算出最高效的转移向量
Dialogue: 0,0:50:54.52,0:50:57.72,Default - CN,,0,0,0,,在一部分飞行模式中甚至可能要求飞船具有一定的转速
Dialogue: 0,0:50:57.72,0:51:01.00,Default - CN,,0,0,0,,可以是为了控制舱温或者是监视着陆地点之类的原因
Dialogue: 0,0:51:01.00,0:51:05.52,Default - CN,,0,0,0,,自动驾驶仪支持以恒速度滚转，可以直接使用
Dialogue: 0,0:51:05.52,0:51:10.00,Default - CN,,0,0,0,,自动驾驶仪不仅控制姿态，也能在宇航员进行动力机动时提供帮助
Dialogue: 0,0:51:10.00,0:51:14.24,Default - CN,,0,0,0,,它可以为机动计算出一个可行的解，当然也可以被地面站的指令覆盖
Dialogue: 0,0:51:14.24,0:51:17.52,Default - CN,,0,0,0,,在宇航员确定后，自动驾驶仪会自动控制引擎点火
Dialogue: 0,0:51:17.52,0:51:19.52,Default - CN,,0,0,0,,并且用定时器准确计时点火时长
Dialogue: 0,0:51:19.52,0:51:22.64,Default - CN,,0,0,0,,不过它不会检测点火的效果
Dialogue: 0,0:51:22.64,0:51:26.04,Default - CN,,0,0,0,,在动力飞行段，仅靠外推推算方位显然是不再准确的
Dialogue: 0,0:51:26.04,0:51:29.16,Default - CN,,0,0,0,,所以AGC还包含了一段子程序“G均值”（Average G）
Dialogue: 0,0:51:29.16,0:51:32.36,Default - CN,,0,0,0,,会参考IMU，也就是陀螺仪和加速度计的信息
Dialogue: 0,0:51:32.36,0:51:35.08,Default - CN,,0,0,0,,来计算状态向量的变化量
Dialogue: 0,0:51:35.08,0:51:38.08,Default - CN,,0,0,0,,现在我们了解了如何定位、如何操纵飞船
Dialogue: 0,0:51:38.08,0:51:39.72,Default - CN,,0,0,0,,终于该飞向月球了
Dialogue: 0,0:51:39.72,0:51:43.48,Default - CN,,0,0,0,,地月转移一般是在绕地球第二圈绕到一半的时候开始
Dialogue: 0,0:51:43.48,0:51:45.64,Default - CN,,0,0,0,,也就是起飞后2小时45分钟
Dialogue: 0,0:51:45.64,0:51:48.40,Default - CN,,0,0,0,,这部分依然是依靠土星五号的三级推进器完成
Dialogue: 0,0:51:48.40,0:51:51.28,Default - CN,,0,0,0,,所以在此时AGC的任务还是被动监测土星五号
Dialogue: 0,0:51:51.28,0:51:54.72,Default - CN,,0,0,0,,运行一段专门的程序P15来监测地月转移
Dialogue: 0,0:51:54.72,0:51:57.52,Default - CN,,0,0,0,,三级分离后，就轮到我们自己控制了
Dialogue: 0,0:51:57.52,0:52:01.88,Default - CN,,0,0,0,,大家最关心的下一步肯定都是月球登陆，所以我们就直接跳到落月
Dialogue: 0,0:52:01.88,0:52:05.64,Default - CN,,0,0,0,,进入月球轨道后，在着陆前4小时45分钟
Dialogue: 0,0:52:05.64,0:52:08.36,Default - CN,,0,0,0,,指令与服务舱和登月舱分离
Dialogue: 0,0:52:08.36,0:52:13.36,Default - CN,,0,0,0,,分离之后，登月舱上的交会雷达、导引灯、甚高频电台会进行测试
Dialogue: 0,0:52:13.36,0:52:15.16,Default - CN,,0,0,0,,并重新校准IMU
Dialogue: 0,0:52:15.16,0:52:18.08,Default - CN,,0,0,0,,还有其他很多的准备工作要做
Dialogue: 0,0:52:18.08,0:52:21.52,Default - CN,,0,0,0,,其中之一就是准备“中止导航系统”AGS
Dialogue: 0,0:52:21.52,0:52:23.32,Default - CN,,0,0,0,,这是另一台简单得多的计算机
Dialogue: 0,0:52:23.32,0:52:25.72,Default - CN,,0,0,0,,可以在紧急情况时把登月舱和宇航员带回轨道
Dialogue: 0,0:52:25.72,0:52:28.56,Default - CN,,0,0,0,,并安全地和指令与服务舱对接
Dialogue: 0,0:52:28.56,0:52:30.40,Default - CN,,0,0,0,,回到动力下降段
Dialogue: 0,0:52:30.40,0:52:34.72,Default - CN,,0,0,0,,登月舱上的AGC有一个特别的程序P63控制这一阶段
Dialogue: 0,0:52:34.72,0:52:37.44,Default - CN,,0,0,0,,着陆雷达被启用，也参与到状态向量的更新中
Dialogue: 0,0:52:37.44,0:52:41.04,Default - CN,,0,0,0,,AGC会控制推进器以最少的燃料消耗，带着登月舱
Dialogue: 0,0:52:41.04,0:52:42.52,Default - CN,,0,0,0,,进入正确的下降包线
Dialogue: 0,0:52:42.52,0:52:45.84,Default - CN,,0,0,0,,这个过程是完全自动的，宇航员只需要坐着旁观
Dialogue: 0,0:52:45.84,0:52:51.16,Default - CN,,0,0,0,,登月舱的姿态会被调整成引擎朝月面，此时月面对宇航员能见度几乎为零
Dialogue: 0,0:52:51.16,0:52:54.80,Default - CN,,0,0,0,,第二组程序，P64，会在离月面约8000英尺时自动启动
Dialogue: 0,0:52:51.16,0:52:54.80,Top Comments,,0,0,0,,译注：8000英尺=2438.4米
Dialogue: 0,0:52:54.80,0:52:57.84,Default - CN,,0,0,0,,登月舱会倾斜一点角度让宇航员能看到将要登陆的月面
Dialogue: 0,0:52:57.84,0:53:00.78,Default - CN,,0,0,0,,这样登月舱指令长就能对登陆地有一个更清晰的认知
Dialogue: 0,0:53:00.78,0:53:02.28,Default - CN,,0,0,0,,可以开始寻找一个合适的着陆点了
Dialogue: 0,0:53:02.28,0:53:07.16,Default - CN,,0,0,0,,第三组程序，P66，会维持登月舱在月面上空飞行的姿态
Dialogue: 0,0:53:02.28,0:53:07.16,Top Comments,,0,0,0,,译注：讲者口误
Dialogue: 0,0:53:07.16,0:53:11.12,Default - CN,,0,0,0,,指令长则开始手动以1英尺每秒的速度调整飞船高度
Dialogue: 0,0:53:11.12,0:53:12.68,Default - CN,,0,0,0,,缓缓靠近月面
Dialogue: 0,0:53:12.68,0:53:16.24,Default - CN,,0,0,0,,理想状态下此时登月舱的水平速度应该已经降至0
Dialogue: 0,0:53:16.24,0:53:19.64,Default - CN,,0,0,0,,接地后，乘员手动启用程序P68
Dialogue: 0,0:53:19.64,0:53:22.88,Default - CN,,0,0,0,,它的功能就是告诉AGC，我们确确实实已经着陆了
Dialogue: 0,0:53:22.88,0:53:25.80,Default - CN,,0,0,0,,并确保引擎已经关闭，结束“G均值”程序
Dialogue: 0,0:53:25.80,0:53:28.36,Default - CN,,0,0,0,,并把自动驾驶仪调到一种误差容忍非常高的模式
Dialogue: 0,0:53:28.36,0:53:31.64,Default - CN,,0,0,0,,避免它检测到月球转动时又执行姿态矫正
Dialogue: 0,0:53:31.64,0:53:34.04,Default - CN,,0,0,0,,但是，自动驾驶仪不会彻底关闭
Dialogue: 0,0:53:34.04,0:53:37.12,Default - CN,,0,0,0,,因为在紧急情况下还要用它来进行紧急升空
Dialogue: 0,0:53:37.12,0:53:38.48,Default - CN,,0,0,0,,现在，人到月球上了，把那些小事做完
Dialogue: 0,0:53:38.48,0:53:42.92,Default - CN,,0,0,0,,什么人类的一大步啦，蹦蹦跳跳插上旗啦，然后我们就直接跳到最有趣的环节
Dialogue: 0,0:53:42.92,0:53:44.60,Default - CN,,0,0,0,,升空和交会对接
Dialogue: 0,0:53:44.60,0:53:47.84,Default - CN,,0,0,0,,阿波罗的交会技术是双子星计划中研发的
Dialogue: 0,0:53:47.84,0:53:50.52,Default - CN,,0,0,0,,这是地球轨道上的阿金纳目标飞行器
Dialogue: 0,0:53:50.52,0:53:53.84,Default - CN,,0,0,0,,阿金纳此时是追逐方，类比我们的登月舱
Dialogue: 0,0:53:53.84,0:53:58.32,Default - CN,,0,0,0,,此时登月舱正在从指令与服务舱的下方，以一个稍快一些的轨道靠近它
Dialogue: 0,0:53:58.32,0:54:00.56,Default - CN,,0,0,0,,交会有两种不同的方式
Dialogue: 0,0:54:00.56,0:54:03.16,Default - CN,,0,0,0,,比较保守的方法是之前提到的“共椭圆轨道交会”
Dialogue: 0,0:54:03.16,0:54:06.80,Default - CN,,0,0,0,,需要登月舱飞过一周半轨道长度才能追上指令与服务舱
Dialogue: 0,0:54:06.80,0:54:11.32,Default - CN,,0,0,0,,但能有充足的机会监控交会过程、做轨道修正
Dialogue: 0,0:54:11.32,0:54:13.40,Default - CN,,0,0,0,,还有一个更冒险的交会方式
Dialogue: 0,0:54:13.40,0:54:16.00,Default - CN,,0,0,0,,登月舱会直接朝着指令与服务舱飞去
Dialogue: 0,0:54:16.00,0:54:18.80,Default - CN,,0,0,0,,花费不到轨道一周的长度就能对接
Dialogue: 0,0:54:18.80,0:54:21.44,Default - CN,,0,0,0,,从阿波罗14号任务开始就在使用这种方式
Dialogue: 0,0:54:21.44,0:54:26.72,Default - CN,,0,0,0,,因为这时控制中心的经验也更充足了，也想要减少燃料消耗
Dialogue: 0,0:54:26.72,0:54:29.76,Default - CN,,0,0,0,,升空前两小时就要开始做准备工作了
Dialogue: 0,0:54:29.76,0:54:35.08,Default - CN,,0,0,0,,要重新校准IMU，目视测算指令与服务舱的轨道，并计算交会数据
Dialogue: 0,0:54:35.08,0:54:38.68,Default - CN,,0,0,0,,AGC的程序P22，跟踪指令与服务舱，就是做这件事的
Dialogue: 0,0:54:38.68,0:54:42.44,Default - CN,,0,0,0,,升空前一小时，我们启动程序P12：动力上升
Dialogue: 0,0:54:42.44,0:54:46.56,Default - CN,,0,0,0,,并输入必要的数据，升空时间和目标速度值
Dialogue: 0,0:54:46.56,0:54:49.40,Default - CN,,0,0,0,,AGC会自动进行倒计时，并在结束时请求确认
Dialogue: 0,0:54:49.40,0:54:51.80,Default - CN,,0,0,0,,我们按确认，飞船就升空了
Dialogue: 0,0:54:51.80,0:54:54.24,Default - CN,,0,0,0,,入轨只需要花7分半钟
Dialogue: 0,0:54:54.24,0:54:56.84,Default - CN,,0,0,0,,不过根据交会时追逐目标轨道的方式不同
Dialogue: 0,0:54:56.84,0:55:00.92,Default - CN,,0,0,0,,分别会花一个半小时，或者三个半小时追上指令与服务舱
Dialogue: 0,0:55:00.92,0:55:05.16,Default - CN,,0,0,0,,在这个过程中，程序P20一直在运行
Dialogue: 0,0:55:05.16,0:55:08.80,Default - CN,,0,0,0,,通过交会雷达、甚高频天线和光学系统的目视校准等方式
Dialogue: 0,0:55:08.80,0:55:11.56,Default - CN,,0,0,0,,监控指令与服务舱的状态向量
Dialogue: 0,0:55:11.56,0:55:14.76,Default - CN,,0,0,0,,它会计算通过什么机动，进入何种飞行包线
Dialogue: 0,0:55:14.76,0:55:16.56,Default - CN,,0,0,0,,才能让登月舱进入截获轨道
Dialogue: 0,0:55:16.56,0:55:21.32,Default - CN,,0,0,0,,计算机上同时还运行着几个其他程序来控制修正机动
Dialogue: 0,0:55:21.32,0:55:25.52,Default - CN,,0,0,0,,服务舱指令长会一直追踪登月舱入轨的过程
Dialogue: 0,0:55:25.52,0:55:29.12,Default - CN,,0,0,0,,指令与服务舱上的计算机也在时刻计算登月舱的状态向量
Dialogue: 0,0:55:29.12,0:55:32.32,Default - CN,,0,0,0,,并一直准备着在突发情况时接管登月舱的计算机
Dialogue: 0,0:55:32.32,0:55:34.72,Default - CN,,0,0,0,,登月舱在50米距离时会停止接近的过程
Dialogue: 0,0:55:34.72,0:55:39.68,Default - CN,,0,0,0,,此时它会将自己的对接口转到能和指令与服务舱对接的角度
Dialogue: 0,0:55:39.68,0:55:42.68,Default - CN,,0,0,0,,这时，指令与服务舱变换成主动追逐的角色
Dialogue: 0,0:55:42.68,0:55:45.24,Default - CN,,0,0,0,,并启动程序P79：最终交会
Dialogue: 0,0:55:45.24,0:55:49.04,Default - CN,,0,0,0,,这会将指令与服务舱减速以拉近两个航天器的距离直到成功对接
Dialogue: 0,0:55:49.04,0:55:52.52,Default - CN,,0,0,0,,对接的前几秒，两个航天器的自动驾驶仪都会被关闭
Dialogue: 0,0:55:52.52,0:55:56.28,Default - CN,,0,0,0,,避免对接之后两边各自试图修正组合体的状态
Dialogue: 0,0:55:56.28,0:56:00.36,Default - CN,,0,0,0,,到目前为止，一切顺利，我们马上回地球
Dialogue: 0,0:56:00.36,0:56:02.96,Default - CN,,0,0,0,,我们给AGC输入地球轨道的参数
Dialogue: 0,0:56:02.96,0:56:05.92,Default - CN,,0,0,0,,让它计算点火时间，控制点火和转移
Dialogue: 0,0:56:05.92,0:56:09.84,Default - CN,,0,0,0,,中途如果有任何修正，也是以完全相同的方式进行
Dialogue: 0,0:56:09.84,0:56:13.96,Default - CN,,0,0,0,,进入地球轨道后，地面中心会计算好再入参数
Dialogue: 0,0:56:13.96,0:56:16.72,Default - CN,,0,0,0,,并通过S波段上行链路发送给AGC
Dialogue: 0,0:56:16.72,0:56:21.32,Default - CN,,0,0,0,,第一组再入程序，P61，在再入开始后25分钟启动
Dialogue: 0,0:56:21.32,0:56:25.08,Default - CN,,0,0,0,,它会请求各种着陆参数，比如溅落区的经纬度
Dialogue: 0,0:56:25.08,0:56:27.60,Default - CN,,0,0,0,,再入大气层的速度和角度
Dialogue: 0,0:56:27.60,0:56:31.40,Default - CN,,0,0,0,,输入这些数据之后程序P61即告结束，并启动程序P62
Dialogue: 0,0:56:31.40,0:56:34.12,Default - CN,,0,0,0,,它的作用基本就是要求宇航员执行一个检查单
Dialogue: 0,0:56:34.12,0:56:36.56,Default - CN,,0,0,0,,准备好指令舱与服务舱分离
Dialogue: 0,0:56:36.56,0:56:38.88,Default - CN,,0,0,0,,因为AGC无法控制这部分操作
Dialogue: 0,0:56:38.88,0:56:44.92,Default - CN,,0,0,0,,做完检查单之后就会自动切换到程序P63：再入初段
Dialogue: 0,0:56:44.92,0:56:47.88,Default - CN,,0,0,0,,此时，自动驾驶仪会接管推进器
Dialogue: 0,0:56:47.88,0:56:51.00,Default - CN,,0,0,0,,让指令舱脱离轨道，进入地球大气层
Dialogue: 0,0:56:51.00,0:56:56.32,Default - CN,,0,0,0,,再入时的主要程序是P64，自动启动
Dialogue: 0,0:56:56.32,0:56:59.48,Default - CN,,0,0,0,,程序P64会监视再入轨道和溅落区域
Dialogue: 0,0:56:59.48,0:57:02.18,Default - CN,,0,0,0,,并且计算出再入的最佳解、减速方式
Dialogue: 0,0:57:02.18,0:57:03.88,Default - CN,,0,0,0,,这部分要调用两个子程序
Dialogue: 0,0:57:03.88,0:57:09.04,Default - CN,,0,0,0,,P65：再入上升段控制，基本就是让指令舱段在大气层上面打水漂
Dialogue: 0,0:57:09.04,0:57:10.80,Default - CN,,0,0,0,,来降低指令舱的速度并延长航线
Dialogue: 0,0:57:10.80,0:57:15.32,Default - CN,,0,0,0,,另一个是P66：再入弹道，把指令舱像炮弹一样丢进大气层
Dialogue: 0,0:57:15.32,0:57:18.76,Default - CN,,0,0,0,,两个子程序的操作该怎么结合是P64决定的
Dialogue: 0,0:57:18.76,0:57:23.88,Default - CN,,0,0,0,,最后一组程序P67：最终段，进行溅落前的最终机动操作
Dialogue: 0,0:57:23.88,0:57:27.88,Default - CN,,0,0,0,,放出减速伞等等这些操作不是由AGC执行的
Dialogue: 0,0:57:27.88,0:57:30.60,Default - CN,,0,0,0,,而是由地球着陆时序控制器，ELSC控制的
Dialogue: 0,0:57:30.60,0:57:34.20,Default - CN,,0,0,0,,在释放减速伞之前，阿波罗导航计算机的任务就完成了
Dialogue: 0,0:57:34.20,0:57:38.08,Default - CN,,0,0,0,,任务完成得很棒，能出什么问题呢？
Dialogue: 0,0:57:38.08,0:57:43.20,Default - CN,,0,0,0,,先说阿波罗11号任务，在动力下降段出现了1202警告
Dialogue: 0,0:57:43.20,0:57:47.64,Default - CN,,0,0,0,,正常情况下，动力下降段会占用计算机大约85%的算力
Dialogue: 0,0:57:47.64,0:57:49.88,Default - CN,,0,0,0,,但是由于电源设计有缺陷
Dialogue: 0,0:57:49.88,0:57:55.28,Default - CN,,0,0,0,,交会雷达额外让处理器每秒执行了12800条指令
Dialogue: 0,0:57:55.28,0:57:58.72,Default - CN,,0,0,0,,正正好好多出来15%的负载
Dialogue: 0,0:57:58.72,0:58:02.20,Default - CN,,0,0,0,,因为系统是协作式多任务的，没执行完的作业堆积在队列中
Dialogue: 0,0:58:02.20,0:58:07.68,Default - CN,,0,0,0,,最后导致了任务队列溢出并触发了1202警告
Dialogue: 0,0:58:07.68,0:58:12.36,Default - CN,,0,0,0,,操作系统自动触发了程序中止，取消了所有作业并重启了它们
Dialogue: 0,0:58:12.36,0:58:15.76,Default - CN,,0,0,0,,这一切都发生在短短几秒的时间内，并且完全能搞砸着陆计划
Dialogue: 0,0:58:15.76,0:58:22.96,Default - CN,,0,0,0,,下一位是阿波罗13号，在任务55小时54分钟53秒时，他们的液氧罐发生了爆炸
Dialogue: 0,0:58:22.96,0:58:27.16,Default - CN,,0,0,0,,此时他们距离地球32万公里
Dialogue: 0,0:58:27.16,0:58:31.24,Default - CN,,0,0,0,,幸好他们还可以利用自由返回轨道把宇航员送回地球
Dialogue: 0,0:58:31.24,0:58:35.04,Default - CN,,0,0,0,,但他们被迫在登月舱中维生，因为指令与服务舱被彻底关闭了
Dialogue: 0,0:58:35.04,0:58:37.20,Default - CN,,0,0,0,,其中也包括那里的阿波罗导航计算机
Dialogue: 0,0:58:37.20,0:58:40.44,Default - CN,,0,0,0,,IMU设置也需要事先转移到登月舱的计算机上
Dialogue: 0,0:58:40.44,0:58:43.12,Default - CN,,0,0,0,,因为不同飞行器的IMU方向不同
Dialogue: 0,0:58:43.12,0:58:47.60,Default - CN,,0,0,0,,手动控制的点火和中途修正是使用登月舱上的中止导航系统完成的
Dialogue: 0,0:58:47.60,0:58:49.76,Default - CN,,0,0,0,,因为电源不够给AGC供电
Dialogue: 0,0:58:49.76,0:58:55.08,Default - CN,,0,0,0,,在再入大气层的前几个小时，指令与服务舱幸运地成功重启了
Dialogue: 0,0:58:55.08,0:58:59.64,Default - CN,,0,0,0,,最后是阿波罗14号，它的“任务中止”按钮里残留了一个锡球
Dialogue: 0,0:58:59.64,0:59:03.76,Default - CN,,0,0,0,,可能导致无意中触发任务中止并把登月舱再带回轨道
Dialogue: 0,0:59:03.76,0:59:06.76,Default - CN,,0,0,0,,这个问题几个小时就通过重新编程AGC解决了
Dialogue: 0,0:59:06.76,0:59:12.08,Default - CN,,0,0,0,,让动力下降段程序不要听中止按钮的话，而是监测另一个程序的执行状态
Dialogue: 0,0:59:12.08,0:59:16.40,Default - CN,,0,0,0,,真正需要中止任务的时候，需要手动在DSKY输入命令触发
Dialogue: 0,0:59:16.40,0:59:23.28,Default - CN,,0,0,0,,那么，以上就是对登月和返航软件的介绍
Dialogue: 0,0:59:23.28,0:59:32.76,Default - CN,,0,0,0,,
Dialogue: 0,0:59:32.76,0:59:36.64,Default - CN,,0,0,0,,现在您可能想要在一台真正的阿波罗登月计算机上运行您自己的代码
Dialogue: 0,0:59:36.64,0:59:38.88,Default - CN,,0,0,0,,那就得知道从哪里能搞来一台
Dialogue: 0,0:59:38.88,0:59:44.52,Default - CN,,0,0,0,,在总计生产的42台中，7台登月舱计算机在月球撞毁
Dialogue: 0,0:59:44.52,0:59:48.44,Default - CN,,0,0,0,,3台登月舱计算机在地球大气中烧毁
Dialogue: 0,0:59:48.44,0:59:50.48,Default - CN,,0,0,0,,11台指令舱计算机返回到了地球
Dialogue: 0,0:59:50.48,0:59:53.48,Default - CN,,0,0,0,,它们大概都成了博物馆的展品
Dialogue: 0,0:59:53.48,0:59:57.12,Default - CN,,0,0,0,,还有21台没有上天的计算机，我们对它们了解甚少
Dialogue: 0,0:59:57.12,1:00:02.60,Default - CN,,0,0,0,,其中一台在加州山景城的计算机历史博物馆展出，但是少了一些零件
Dialogue: 0,1:00:02.60,1:00:07.84,Default - CN,,0,0,0,,幸运的是，公开可用的模拟方案还是有不少，还有一套工具链
Dialogue: 0,1:00:07.84,1:00:17.08,Default - CN,,0,0,0,,原先有一个手提箱大小的完整的任务源码也可以从GitHub上下载到
Dialogue: 0,1:00:17.08,1:00:26.08,Default - CN,,0,0,0,,
Dialogue: 0,1:00:26.08,1:00:28.08,Default - CN,,0,0,0,,这场讲座的演示部分是许多人合力完成的
Dialogue: 0,1:00:28.08,1:00:30.88,Default - CN,,0,0,0,,我们衷心感谢所有帮助我们的人
Dialogue: 0,1:00:30.88,1:00:33.48,Default - CN,,0,0,0,,这也包括间接协助我们的人，包括那些编写书籍
Dialogue: 0,1:00:33.48,1:00:36.56,Default - CN,,0,0,0,,原始文档、网站和软件的人
Dialogue: 0,1:00:36.56,1:00:38.34,Default - CN,,0,0,0,,非常感谢各位的关注
Dialogue: 0,1:00:38.34,1:00:39.60,Default - CN,,0,0,0,,感谢
Dialogue: 0,1:00:39.60,1:00:53.04,Default - CN,,0,0,0,,
Dialogue: 0,1:00:53.04,1:00:58.08,Default - CN,,0,0,0,,哇   信息量可真不少
Dialogue: 0,1:00:58.08,1:01:06.28,Default - CN,,0,0,0,,感谢Michael，感谢Christian为我们带来的干货
Dialogue: 0,1:01:06.28,1:01:11.40,Default - CN,,0,0,0,,大家给一点热烈的掌声，很遗憾我们的时间不够问答环节了
Dialogue: 0,1:01:11.40,1:01:20.12,Default - CN,,0,0,0,,
Dialogue: 0,1:01:20.12,1:01:35.44,Default - CN,,0,0,0,,
Dialogue: 0,1:01:20.12,1:01:35.44,Top Comments,,0,0,0,,英文听写：c3subtitles.de\N时轴：RigoLigo\N翻译：RigoLigo\N校对：你
Dialogue: 0,1:01:35.44,1:01:41.32,Default - CN,,0,0,0,,
Dialogue: 0,1:01:35.44,1:01:41.32,Top Comments,,0,0,0,,本视频的字幕文件可在https://github.com/RigoLigoRLC/rigo-open-subtitles获得\N以CC-0协议公开分发
